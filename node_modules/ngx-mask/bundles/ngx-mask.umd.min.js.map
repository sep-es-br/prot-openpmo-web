{"version":3,"sources":["ng://ngx-mask/app/ngx-mask/config.ts","node_modules/tslib/tslib.es6.js","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"names":["config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","sufix","prefix","clearIfNotMatch","showTemplate","showMaskTyped","dropSpecialCharacters","specialCharacters","patterns","0","pattern","RegExp","9","optional","A","S","d","m","extendStatics","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","step","op","TypeError","done","value","pop","push","e","__read","o","r","ar","error","MaskApplierService","_config","maskExpression","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","inputValue","maskAndPattern","_a","mask","customPattern","applyMask","position","cb","undefined","cursor","result","multi","slice","inputArray","toString","split","inputSymbol","_checkSymbolMask","Number","shiftStep","test","add","indexOf","_findSpecialChar","shift","newPosition","has","find","val","maskSymbol","Injectable","Inject","args","MaskService","document","_elementRef","_renderer","_this","_super","isNumberValue","maskIsShown","onChange","onTouch","_formElement","nativeElement","__extends","__","constructor","create","tslib_1.__extends","replace","isArray","_removeMask","_removeSufix","_removePrefix","resLen","applyValueChanges","maskedInput","activeElement","clearIfNotMatchFn","showMaskInInput","formElementProperty","defineProperty","_b","name","setProperty","specialCharactersForRemove","_regExpForRemove","map","item","join","DOCUMENT","ElementRef","Renderer2","MaskDirective","_maskService","_position","_maskValue","_repeatPatternSymbols","_inputValue","onInput","el","caretShift","selectionStart","selectionEnd","inputType","onBlur","onFocus","keyCode","a","preventDefault","onPaste","MAX_SAFE_INTEGER","writeValue","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","rejected","then","String","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","maskExp","match","reduce","accum","currval","index","_start","_end","repeatNumber","Directive","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Input","HostListener","MaskPipe","transform","Pipe","pure","NgxMaskModule","forRoot","configValue","ngModule","useValue","useFactory","_configFactory","deps","forChild","NgModule","exports","declarations","initConfig"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n    sufix: string;\n    prefix: string;\n    clearIfNotMatch: boolean;\n    showTemplate: boolean;\n    showMaskTyped: boolean;\n    dropSpecialCharacters: boolean | string[];\n    specialCharacters: string[];\n    patterns: {\n        [character: string]: {\n            pattern: RegExp,\n            optional?: boolean\n        }\n    };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<string> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n    sufix: '',\n    prefix: '',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    dropSpecialCharacters: true,\n    specialCharacters: ['/', '(', ')', '.', ':', '-', ' ', '+', ',', '@', '[', ']', '\\\"', '\\''],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true\n        },\n        'A': {\n            pattern: new RegExp('\\[a-zA-Z0-9\\]')\n        },\n        'S': {\n            pattern: new RegExp('\\[a-zA-Z\\]')\n        },\n        'd': {\n          pattern: new RegExp('\\\\d'),\n        },\n        'm': {\n          pattern: new RegExp('\\\\d'),\n        },\n    }\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n\n    public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    public showTemplate: IConfig['showTemplate'];\n    public clearIfNotMatch: IConfig['clearIfNotMatch'];\n    public maskExpression: string = '';\n    public maskSpecialCharacters: IConfig['specialCharacters'];\n    public maskAvailablePatterns: IConfig['patterns'];\n    public prefix: IConfig['prefix'];\n    public sufix: IConfig['sufix'];\n    public customPattern: IConfig['patterns'];\n\n\n    private _shift: Set<number>;\n\n    public constructor(\n        @Inject(config) protected _config: IConfig\n    ) {\n        this._shift = new Set();\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.sufix = this._config.sufix;\n\n\n    }\n    // tslint:disable-next-line:no-any\n    public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\n      const [mask, customPattern] = maskAndPattern;\n      this.customPattern = customPattern;\n      return this.applyMask(inputValue, mask);\n    }\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n      ): string {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n\n        let cursor: number = 0;\n        let result: string = ``;\n        let multi: boolean = false;\n\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n\n        const inputArray: string[] = inputValue.toString()\n            .split('');\n\n        // tslint:disable-next-line\n        for (let i: number = 0, inputSymbol: string = inputArray[0]; i\n        < inputArray.length; i++, inputSymbol = inputArray[i]) {\n            if (cursor === maskExpression.length) {\n                break;\n            }\n            if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                result += inputSymbol;\n                cursor += 2;\n            } else if (\n              maskExpression[cursor + 1] === '*' && multi\n              && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n            ) {\n              result += inputSymbol;\n              cursor += 3;\n              multi = false;\n            } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])\n                && maskExpression[cursor + 1]\n                === '*') {\n                result += inputSymbol;\n                multi = true;\n            } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(\n                inputSymbol,\n                maskExpression[cursor + 2]\n            )) {\n                result += inputSymbol;\n                cursor += 3;\n            } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                if (maskExpression[cursor] === 'd') {\n                  if (Number(inputSymbol) > 3) {\n                    result += 0;\n                    cursor += 1;\n                    const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                      ? inputArray.length\n                      : cursor;\n                    this._shift.add( shiftStep + this.prefix.length || 0);\n                    i--;\n                    continue;\n                  }\n                }\n              if (maskExpression[cursor - 1] === 'd') {\n                  if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31 ) {\n                    continue;\n                  }\n              }\n              if (maskExpression[cursor] === 'm') {\n                if (Number(inputSymbol) > 1) {\n                  result += 0;\n                  cursor += 1;\n                  const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                    ? inputArray.length\n                    : cursor;\n                  this._shift.add( shiftStep + this.prefix.length || 0);\n                  i--;\n                  continue;\n                }\n              }\n              if (maskExpression[cursor - 1] === 'm') {\n                if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12 ) {\n                  continue;\n                }\n              }\n                result += inputSymbol;\n                cursor++;\n            } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                result += maskExpression[cursor];\n                cursor++;\n                const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                    ? inputArray.length\n                    : cursor;\n                this._shift.add(shiftStep + this.prefix.length || 0);\n                i--;\n            } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1\n                && this.maskAvailablePatterns[maskExpression[cursor]]\n                && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n                cursor++;\n                i--;\n            } else if ( (this.maskExpression[cursor + 1] === '*')\n              && (this._findSpecialChar(this.maskExpression[cursor + 2]))\n              && (this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2]) ) {\n              cursor += 3;\n              result += inputSymbol;\n            }\n        }\n\n\n        if (result.length + 1 === maskExpression.length\n            && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n\n\n        let shift: number = 1;\n        let newPosition: number = position + 1;\n\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n\n        cb(this._shift.has(position) ? shift : 0);\n        let res: string = `${this.prefix}${result}`;\n        res = this.sufix &&\n              cursor === maskExpression.length\n            ? `${this.prefix}${result}${this.sufix}`\n            : `${this.prefix}${result}`;\n        return res;\n    }\n    public _findSpecialChar (inputSymbol: string): undefined | string {\n      const symbol: string | undefined = this.maskSpecialCharacters\n          .find( (val: string) => val === inputSymbol);\n      return symbol ;\n    }\n\n    private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n      this.maskAvailablePatterns = this.customPattern\n        ? this.customPattern\n        : this.maskAvailablePatterns;\n        return this.maskAvailablePatterns[maskSymbol]\n            && this.maskAvailablePatterns[maskSymbol].pattern\n            && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n    }\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n  public maskExpression: string = '';\n  public isNumberValue: boolean = false;\n  public showMaskTyped: boolean = false;\n  public maskIsShown: string = '';\n  private _formElement: HTMLInputElement;\n  // tslint:disable-next-line\n  public onChange = (_: any) => {};\n  public onTouch = () => {};\n  public constructor(\n    // tslint:disable-next-line\n    @Inject(DOCUMENT) private document: any,\n    @Inject(config) protected _config: IConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2\n  ) {\n    super(_config);\n    this._formElement = this._elementRef.nativeElement;\n  }\n\n  public applyMask(\n    inputValue: string,\n    maskExpression: string,\n    position: number = 0,\n    cb: Function = () => {}\n  ): string  {\n\n    this.maskIsShown = this.showMaskTyped\n        ? this.maskExpression.replace(/[0-9]/g, '_')\n        : '';\n    if (!inputValue && this.showMaskTyped) {\n      return this.prefix + this.maskIsShown;\n    }\n    const result: string  = super.applyMask(\n      inputValue,\n      maskExpression,\n      position,\n      cb\n    );\n    Array.isArray(this.dropSpecialCharacters)\n        ? this.onChange(this._removeMask(this._removeSufix(this._removePrefix(result)), this.dropSpecialCharacters))\n        : this.dropSpecialCharacters === true\n         ? this.onChange(\n          this.isNumberValue\n             ? Number(this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters))\n             : this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters)\n            )\n         : this.onChange(this._removeSufix(this._removePrefix(result)));\n          let ifMaskIsShown: string = '';\n          if (!this.showMaskTyped) {\n            return result;\n          }\n          const resLen: number = result.length;\n          const prefNmask: string = this.prefix + this.maskIsShown;\n          ifMaskIsShown = prefNmask.slice(resLen);\n    return result + ifMaskIsShown;\n  }\n\n  public applyValueChanges(\n    position: number = 0,\n    cb: Function = () => {}\n  ): void {\n    const maskedInput: string | number = this.applyMask(\n      this._formElement.value,\n      this.maskExpression,\n      position,\n      cb\n    );\n    this._formElement.value = maskedInput;\n    if (this._formElement === this.document.activeElement) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n\n  public showMaskInInput(): void {\n    if (this.showMaskTyped) {\n      this.maskIsShown = this.maskExpression.replace(/[0-9]/g, '_');\n    }\n  }\n\n  public clearIfNotMatchFn(): void {\n    if (\n      this.clearIfNotMatch === true &&\n      this.maskExpression.length !== this._formElement.value.length\n    ) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(this._formElement.value, this.maskExpression);\n    }\n  }\n\n  public set formElementProperty([name, value]: [string, string | boolean]) {\n    this._renderer.setProperty(this._formElement, name, value);\n  }\n\n  private _removeMask(\n    value: string,\n    specialCharactersForRemove: string[]\n  ): string {\n    return value\n      ? value.replace(this._regExpForRemove(specialCharactersForRemove), '')\n      : value;\n  }\n\n  private _removePrefix(value: string): string {\n    if (!this.prefix) {\n      return value;\n    }\n    return value\n      ? value.replace(this.prefix, '')\n      : value;\n  }\n\n  private _removeSufix(value: string): string {\n    if (!this.sufix) {\n      return value;\n    }\n    return value\n      ? value.replace(this.sufix, '')\n      : value;\n  }\n\n  private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n    return new RegExp(\n      specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'),\n      'gi'\n    );\n  }\n}\n","import {\n  Directive,\n  forwardRef,\n  HostListener,\n  Inject,\n  Input\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { IConfig } from './config';\n\n@Directive({\n  selector: '[mask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true\n    },\n    MaskService\n  ]\n})\nexport class MaskDirective implements ControlValueAccessor {\n  private _maskValue: string;\n  private _inputValue: string;\n  private _position: number | null = null;\n  // tslint:disable-next-line\n  private _start: number;\n  private _end: number;\n  // tslint:disable-next-line\n  public onChange = (_: any) => { };\n  public onTouch = () => { };\n  public constructor(\n    // tslint:disable-next-line\n    @Inject(DOCUMENT) private document: any,\n    private _maskService: MaskService\n  ) { }\n\n\n  @Input('mask')\n  public set maskExpression(value: string) {\n    this._maskValue = value || '';\n    if (!this._maskValue) {\n      return;\n    }\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue);\n    this._maskService.formElementProperty = [\n      'value',\n      this._maskService.applyMask(\n        this._inputValue,\n        this._maskService.maskExpression\n      )\n    ];\n  }\n\n  @Input()\n  public set specialCharacters(value: IConfig['specialCharacters']) {\n    if (\n      !value ||\n      !Array.isArray(value) ||\n      (Array.isArray(value) && !value.length)\n    ) {\n      return;\n    }\n    this._maskService.maskSpecialCharacters = value;\n  }\n\n  @Input()\n  public set patterns(value: IConfig['patterns']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.maskAvailablePatterns = value;\n  }\n\n  @Input()\n  public set prefix(value: IConfig['prefix']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.prefix = value;\n  }\n\n  @Input()\n  public set sufix(value: IConfig['sufix']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.sufix = value;\n  }\n\n  @Input()\n  public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\n    this._maskService.dropSpecialCharacters = value;\n  }\n\n  @Input()\n  public set showMaskTyped(value: IConfig['showMaskTyped']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.showMaskTyped = value;\n  }\n\n  @Input()\n  public set showTemplate(value: IConfig['showTemplate']) {\n    this._maskService.showTemplate = value;\n  }\n\n  @Input()\n  public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\n    this._maskService.clearIfNotMatch = value;\n  }\n\n  @HostListener('input', ['$event'])\n  public onInput(e: KeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    this._inputValue = el.value;\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n    const position: number = (el.selectionStart as number) === 1\n      ? (el.selectionStart as number) + this._maskService.prefix.length\n      : el.selectionStart as number;\n    let caretShift: number = 0;\n    this._maskService.applyValueChanges(\n      position,\n      (shift: number) => (caretShift = shift)\n    );\n    // only set the selection if the element is active\n    if (this.document.activeElement !== el) {\n      return;\n    }\n    el.selectionStart = el.selectionEnd =\n      this._position !== null\n        ? this._position\n        : position +\n        // tslint:disable-next-line\n        ((e as any).inputType === 'deleteContentBackward' ? 0 : caretShift);\n    this._position = null;\n  }\n\n  @HostListener('blur')\n  public onBlur(): void {\n    this._maskService.clearIfNotMatchFn();\n    this.onTouch();\n  }\n\n  @HostListener('click', ['$event'])\n  public onFocus(e: MouseEvent | KeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    if (\n      el !== null && el.selectionStart !== null &&\n      el.selectionStart === el.selectionEnd &&\n      el.selectionStart > this._maskService.prefix.length &&\n      // tslint:disable-next-line\n      (e as any).keyCode !== 38\n    ) {\n      return;\n    }\n    if (this._maskService.showMaskTyped) {\n      this._maskService.maskIsShown = this._maskService.maskExpression.replace(/[0-9]/g, '_');\n    }\n    el.value = !el.value || el.value === this._maskService.prefix\n      ? this._maskService.prefix + this._maskService.maskIsShown\n      : el.value;\n    /** fix of cursor position with prefix when mouse click occur */\n    if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n  }\n\n  @HostListener('keydown', ['$event'])\n  public a(e: KeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n    if (e.keyCode === 37 || e.keyCode === 8) {\n      if ((el.selectionStart as number) <= this._maskService.prefix.length\n        && (el.selectionEnd as number) <= this._maskService.prefix.length) {\n        e.preventDefault();\n      }\n      this.onFocus(e);\n      if (e.keyCode === 8\n        && el.selectionStart === 0\n        && el.selectionEnd === el.value.length) {\n        el.value = this._maskService.prefix;\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 1;\n        this.onInput(e);\n      }\n    }\n  }\n\n  @HostListener('paste')\n  public onPaste(): void {\n    this._position = Number.MAX_SAFE_INTEGER;\n  }\n\n  /** It writes the value in the input */\n  public async writeValue(inputValue: string): Promise<void> {\n    if (inputValue === undefined) {\n      inputValue = '';\n    }\n    if (typeof inputValue === 'number') {\n      inputValue = String(inputValue);\n      this._maskService.isNumberValue = true;\n    }\n    inputValue && this._maskService.maskExpression ||\n      this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)\n      ? (this._maskService.formElementProperty = [\n        'value',\n        this._maskService.applyMask(\n          inputValue,\n          this._maskService.maskExpression\n        )\n      ])\n      : (this._maskService.formElementProperty = ['value', inputValue]);\n    this._inputValue = inputValue;\n  }\n\n  // tslint:disable-next-line\n  public registerOnChange(fn: any): void {\n    this.onChange = fn;\n    this._maskService.onChange = this.onChange;\n  }\n\n  // tslint:disable-next-line\n  public registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n\n  /** It disables the input element */\n  public setDisabledState(isDisabled: boolean): void {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n  private _repeatPatternSymbols(maskExp: string): string {\n    return maskExp.match(/{[0-9]+}/)\n      && maskExp.split('')\n        .reduce((accum: string, currval: string, index: number): string => {\n          this._start = (currval === '{') ? index : this._start;\n\n          if (currval !== '}') {\n            return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n          }\n          this._end = index;\n          const repeatNumber: number = Number(maskExp\n            .slice(this._start + 1, this._end));\n          const repaceWith: string = new Array(repeatNumber + 1)\n            .join(maskExp[this._start - 1]);\n          return accum + repaceWith;\n        }, '') || maskExp;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n  name: 'mask',\n  pure: true\n})\nexport class MaskPipe implements PipeTransform {\n\n  public constructor(private _maskService: MaskApplierService) { }\n\n  public transform(value: string|number, mask: string | [string, IConfig['patterns']]): string {\n    if (!value) {\n      return '';\n    }\n    if (typeof mask === 'string') {\n      return this._maskService.applyMask(`${value}`, mask);\n    }\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n  providers: [MaskApplierService],\n  exports: [MaskDirective, MaskPipe],\n  declarations: [MaskDirective, MaskPipe]\n})\nexport class NgxMaskModule {\n\n  public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [\n        {\n          provide: NEW_CONFIG,\n          useValue: configValue\n        },\n        {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig\n        },\n        {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\n        },\n      ]\n    };\n  }\n  public static forChild(configValue?: optionsConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMaskModule,\n    };\n  }\n}\n\n/**\n * @internal\n */\nexport function _configFactory\n(initConfig: optionsConfig, configValue: optionsConfig | (() => optionsConfig)): Function | optionsConfig {\n  return (typeof configValue === 'function') ? configValue() : { ...initConfig, ...configValue };\n}\n"]}