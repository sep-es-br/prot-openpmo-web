(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-pipes', ['exports', '@angular/core'], factory) :
    (factory((global['ngx-pipes'] = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DiffPipe = (function () {
        function DiffPipe() {
        }
        /**
         * @param {?} input
         * @param {...?} args
         * @return {?}
         */
        DiffPipe.prototype.transform = /**
         * @param {?} input
         * @param {...?} args
         * @return {?}
         */
            function (input) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!Array.isArray(input)) {
                    return input;
                }
                // tslint:disable-next-line no-bitwise
                return args.reduce(function (d, c) { return d.filter(function (e) { return !~c.indexOf(e); }); }, input);
            };
        DiffPipe.decorators = [
            { type: core.Pipe, args: [{ name: "diff" },] },
        ];
        return DiffPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var InitialPipe = (function () {
        function InitialPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} num
         * @return {?}
         */
        InitialPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} num
         * @return {?}
         */
            function (input, num) {
                if (num === void 0) {
                    num = 0;
                }
                return Array.isArray(input) ? input.slice(0, input.length - num) : input;
            };
        InitialPipe.decorators = [
            { type: core.Pipe, args: [{ name: "initial" },] },
        ];
        return InitialPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FlattenPipe = (function () {
        function FlattenPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} shallow
         * @return {?}
         */
        FlattenPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} shallow
         * @return {?}
         */
            function (input, shallow) {
                if (shallow === void 0) {
                    shallow = false;
                }
                if (!Array.isArray(input)) {
                    return input;
                }
                return shallow ? [].concat.apply([], input) : this.flatten(input);
            };
        /**
         * @param {?} array
         * @return {?}
         */
        FlattenPipe.prototype.flatten = /**
         * @param {?} array
         * @return {?}
         */
            function (array) {
                var _this = this;
                return array.reduce(function (arr, elm) {
                    if (Array.isArray(elm)) {
                        return arr.concat(_this.flatten(elm));
                    }
                    return arr.concat(elm);
                }, []);
            };
        FlattenPipe.decorators = [
            { type: core.Pipe, args: [{ name: "flatten" },] },
        ];
        return FlattenPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IntersectionPipe = (function () {
        function IntersectionPipe() {
        }
        /**
         * @param {?} input
         * @param {...?} args
         * @return {?}
         */
        IntersectionPipe.prototype.transform = /**
         * @param {?} input
         * @param {...?} args
         * @return {?}
         */
            function (input) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!Array.isArray(input)) {
                    return input;
                }
                // tslint:disable-next-line no-bitwise
                return args.reduce(function (n, c) { return n.filter(function (e) { return !!~c.indexOf(e); }); }, input);
            };
        IntersectionPipe.decorators = [
            { type: core.Pipe, args: [{ name: "intersection" },] },
        ];
        return IntersectionPipe;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function isUndefined(value) {
        return typeof value === "undefined";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isFunction(value) {
        return typeof value === "function";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNumber(value) {
        return typeof value === "number";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isString(value) {
        return typeof value === "string";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isBoolean(value) {
        return typeof value === "boolean";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isObject(value) {
        return value !== null && typeof value === "object";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNumberFinite(value) {
        return isNumber(value) && isFinite(value);
    }
    /**
     * @param {?} num
     * @param {?} precision
     * @return {?}
     */
    function applyPrecision(num, precision) {
        if (precision <= 0) {
            return Math.round(num);
        }
        var /** @type {?} */ tho = Math.pow(10, precision);
        return Math.round(num * tho) / tho;
    }
    /**
     * @param {?} obj
     * @param {?} map
     * @return {?}
     */
    function extractDeepPropertyByMapKey(obj, map) {
        var /** @type {?} */ keys = map.split(".");
        var /** @type {?} */ head = keys.shift();
        return keys.reduce(function (prop, key) {
            return !isUndefined(prop) && !isUndefined(prop[key]) ? prop[key] : undefined;
        }, obj[head || ""]);
    }
    /**
     * @param {?} obj
     * @param {?} map
     * @return {?}
     */
    function extractDeepPropertyByParentMapKey(obj, map) {
        var /** @type {?} */ keys = map.split(".");
        var /** @type {?} */ tail = keys.pop();
        var /** @type {?} */ props = extractDeepPropertyByMapKey(obj, keys.join("."));
        return { props: props, tail: tail };
    }
    /**
     * @param {?} obj
     * @param {?} other
     * @return {?}
     */
    function getKeysTwoObjects(obj, other) {
        return __spread(Object.keys(obj), Object.keys(other)).filter(function (key, index, array) { return array.indexOf(key) === index; });
    }
    /**
     * @param {?} obj
     * @param {?} other
     * @return {?}
     */
    function isDeepEqual(obj, other) {
        if (!isObject(obj) || !isObject(other)) {
            return obj === other;
        }
        return getKeysTwoObjects(obj, other).every(function (key) {
            if (!isObject(obj[key]) && !isObject(other[key])) {
                return obj[key] === other[key];
            }
            if (!isObject(obj[key]) || !isObject(other[key])) {
                return false;
            }
            return isDeepEqual(obj[key], other[key]);
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ReversePipe = (function () {
        function ReversePipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        ReversePipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (isString(input)) {
                    return input
                        .split("")
                        .reverse()
                        .join("");
                }
                return Array.isArray(input) ? input.slice().reverse() : input;
            };
        ReversePipe.decorators = [
            { type: core.Pipe, args: [{ name: "reverse" },] },
        ];
        return ReversePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TailPipe = (function () {
        function TailPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} num
         * @return {?}
         */
        TailPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} num
         * @return {?}
         */
            function (input, num) {
                if (num === void 0) {
                    num = 0;
                }
                return Array.isArray(input) ? input.slice(num) : input;
            };
        TailPipe.decorators = [
            { type: core.Pipe, args: [{ name: "tail" },] },
        ];
        return TailPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TrurthifyPipe = (function () {
        function TrurthifyPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        TrurthifyPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return Array.isArray(input) ? input.filter(function (e) { return !!e; }) : input;
            };
        TrurthifyPipe.decorators = [
            { type: core.Pipe, args: [{ name: "truthify" },] },
        ];
        return TrurthifyPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UnionPipe = (function () {
        function UnionPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} args
         * @return {?}
         */
        UnionPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} args
         * @return {?}
         */
            function (input, args) {
                if (args === void 0) {
                    args = [];
                }
                if (!Array.isArray(input) || !Array.isArray(args)) {
                    return input;
                }
                return args.reduce(function (newArr, currArr) {
                    return newArr.concat(currArr.reduce(function (noDupArr, curr) {
                        // tslint:disable-next-line:no-bitwise
                        return !~noDupArr.indexOf(curr) && !~newArr.indexOf(curr) ? noDupArr.concat([curr]) : noDupArr;
                    }, []));
                }, input);
            };
        UnionPipe.decorators = [
            { type: core.Pipe, args: [{ name: "union" },] },
        ];
        return UnionPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UniquePipe = (function () {
        function UniquePipe() {
        }
        /**
         * @param {?} input
         * @param {?=} propertyName
         * @return {?}
         */
        UniquePipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} propertyName
         * @return {?}
         */
            function (input, propertyName) {
                var /** @type {?} */ uniques = [];
                return Array.isArray(input)
                    ? isUndefined(propertyName)
                        ? input.filter(function (e, i) { return input.indexOf(e) === i; })
                        : input.filter(function (e, i) {
                            var /** @type {?} */ value = extractDeepPropertyByMapKey(e, propertyName);
                            value = isObject(value) ? JSON.stringify(value) : value;
                            if (isUndefined(value) || uniques[value]) {
                                return false;
                            }
                            uniques[value] = true;
                            return true;
                        })
                    : input;
            };
        UniquePipe.decorators = [
            { type: core.Pipe, args: [{ name: "unique" },] },
        ];
        return UniquePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WithoutPipe = (function () {
        function WithoutPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} args
         * @return {?}
         */
        WithoutPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} args
         * @return {?}
         */
            function (input, args) {
                if (args === void 0) {
                    args = [];
                }
                return Array.isArray(input)
                    ? // tslint:disable-next-line:no-bitwise
                        input.filter(function (e) { return !~args.indexOf(e); })
                    : input;
            };
        WithoutPipe.decorators = [
            { type: core.Pipe, args: [{ name: "without" },] },
        ];
        return WithoutPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PluckPipe = (function () {
        function PluckPipe() {
        }
        /**
         * @param {?} input
         * @param {?} map
         * @return {?}
         */
        PluckPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} map
         * @return {?}
         */
            function (input, map) {
                return Array.isArray(input) ? input.map(function (e) { return extractDeepPropertyByMapKey(e, map); }) : input;
            };
        PluckPipe.decorators = [
            { type: core.Pipe, args: [{ name: "pluck", pure: false },] },
        ];
        return PluckPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ShufflePipe = (function () {
        function ShufflePipe() {
        }
        // Using a version of the Fisher-Yates shuffle algorithm
        // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
        /**
         * @param {?} input
         * @return {?}
         */
        ShufflePipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!Array.isArray(input)) {
                    return input;
                }
                var /** @type {?} */ shuffled = __spread(input);
                var /** @type {?} */ n = input.length - 1;
                for (var /** @type {?} */ i = 0; i < n; ++i) {
                    var /** @type {?} */ j = Math.floor(Math.random() * (n - i + 1)) + i;
                    _a = __read([shuffled[j], shuffled[i]], 2), shuffled[i] = _a[0], shuffled[j] = _a[1];
                }
                return shuffled;
                var _a;
            };
        ShufflePipe.decorators = [
            { type: core.Pipe, args: [{ name: "shuffle" },] },
        ];
        return ShufflePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EveryPipe = (function () {
        function EveryPipe() {
        }
        /**
         * @param {?} input
         * @param {?} predicate
         * @return {?}
         */
        EveryPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} predicate
         * @return {?}
         */
            function (input, predicate) {
                return Array.isArray(input) ? input.every(predicate) : false;
            };
        EveryPipe.decorators = [
            { type: core.Pipe, args: [{ name: "every" },] },
        ];
        return EveryPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SomePipe = (function () {
        function SomePipe() {
        }
        /**
         * @param {?} input
         * @param {?} predicate
         * @return {?}
         */
        SomePipe.prototype.transform = /**
         * @param {?} input
         * @param {?} predicate
         * @return {?}
         */
            function (input, predicate) {
                return Array.isArray(input) ? input.some(predicate) : input;
            };
        SomePipe.decorators = [
            { type: core.Pipe, args: [{ name: "some" },] },
        ];
        return SomePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SamplePipe = (function () {
        function SamplePipe() {
        }
        /**
         * @param {?} input
         * @param {?=} len
         * @return {?}
         */
        SamplePipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} len
         * @return {?}
         */
            function (input, len) {
                if (len === void 0) {
                    len = 1;
                }
                if (!Array.isArray(input)) {
                    return input;
                }
                var /** @type {?} */ sample = [];
                var /** @type {?} */ tmp = __spread(input);
                var /** @type {?} */ l = len < tmp.length ? len : tmp.length;
                for (var /** @type {?} */ i = 0; i < l; ++i) {
                    sample = sample.concat(tmp.splice(Math.floor(Math.random() * tmp.length), 1));
                }
                return sample;
            };
        SamplePipe.decorators = [
            { type: core.Pipe, args: [{ name: "sample" },] },
        ];
        return SamplePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GroupByPipe = (function () {
        function GroupByPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} discriminator
         * @param {?=} delimiter
         * @return {?}
         */
        GroupByPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} discriminator
         * @param {?=} delimiter
         * @return {?}
         */
            function (input, discriminator, delimiter) {
                if (discriminator === void 0) {
                    discriminator = [];
                }
                if (delimiter === void 0) {
                    delimiter = "|";
                }
                if (!Array.isArray(input)) {
                    return input;
                }
                return this.groupBy(input, discriminator, delimiter);
            };
        /**
         * @param {?} list
         * @param {?} discriminator
         * @param {?} delimiter
         * @return {?}
         */
        GroupByPipe.prototype.groupBy = /**
         * @param {?} list
         * @param {?} discriminator
         * @param {?} delimiter
         * @return {?}
         */
            function (list, discriminator, delimiter) {
                var _this = this;
                return list.reduce(function (acc, payload) {
                    var /** @type {?} */ key = _this.extractKeyByDiscriminator(discriminator, payload, delimiter);
                    acc[key] = Array.isArray(acc[key]) ? acc[key].concat([payload]) : [payload];
                    return acc;
                }, {});
            };
        /**
         * @param {?} discriminator
         * @param {?} payload
         * @param {?} delimiter
         * @return {?}
         */
        GroupByPipe.prototype.extractKeyByDiscriminator = /**
         * @param {?} discriminator
         * @param {?} payload
         * @param {?} delimiter
         * @return {?}
         */
            function (discriminator, payload, delimiter) {
                if (isFunction(discriminator)) {
                    return ((discriminator))(payload);
                }
                if (Array.isArray(discriminator)) {
                    return discriminator.map(function (k) { return extractDeepPropertyByMapKey(payload, k); }).join(delimiter);
                }
                return extractDeepPropertyByMapKey(payload, /** @type {?} */ (discriminator));
            };
        GroupByPipe.decorators = [
            { type: core.Pipe, args: [{ name: "groupBy" },] },
        ];
        return GroupByPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FilterByPipe = (function () {
        function FilterByPipe() {
        }
        /**
         * @param {?} input
         * @param {?} props
         * @param {?=} search
         * @param {?=} strict
         * @return {?}
         */
        FilterByPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} props
         * @param {?=} search
         * @param {?=} strict
         * @return {?}
         */
            function (input, props, search, strict) {
                if (search === void 0) {
                    search = "";
                }
                if (strict === void 0) {
                    strict = false;
                }
                if (!Array.isArray(input) || (!isString(search) && !isNumberFinite(search) && !isBoolean(search))) {
                    return input;
                }
                var /** @type {?} */ term = String(search).toLowerCase();
                return input.filter(function (obj) {
                    return props.some(function (prop) {
                        var /** @type {?} */ value = extractDeepPropertyByMapKey(obj, prop);
                        var _a = extractDeepPropertyByParentMapKey(obj, prop), props = _a.props, tail = _a.tail;
                        if (isUndefined(value) && !isUndefined(props) && Array.isArray(props)) {
                            return props.some(function (parent) {
                                var /** @type {?} */ str = String(parent[tail]).toLowerCase();
                                return strict ? str === term : !!~str.indexOf(term);
                            });
                        }
                        if (isUndefined(value)) {
                            return false;
                        }
                        var /** @type {?} */ strValue = String(value).toLowerCase();
                        return strict ? term === strValue : !!~strValue.indexOf(term);
                    });
                });
            };
        FilterByPipe.decorators = [
            { type: core.Pipe, args: [{ name: "filterBy" },] },
        ];
        return FilterByPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var OrderByPipe = (function () {
        function OrderByPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} config
         * @return {?}
         */
        OrderByPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} config
         * @return {?}
         */
            function (input, config) {
                if (!Array.isArray(input)) {
                    return input;
                }
                var /** @type {?} */ out = __spread(input);
                // sort by multiple properties
                if (Array.isArray(config)) {
                    return out.sort(function (a, b) {
                        var /** @type {?} */ l = config.length;
                        for (var /** @type {?} */ i = 0; i < l; ++i) {
                            var _a = __read(OrderByPipe.extractFromConfig(config[i]), 2), prop = _a[0], asc = _a[1];
                            var /** @type {?} */ pos = OrderByPipe.orderCompare(prop, asc, a, b);
                            if (pos !== 0) {
                                return pos;
                            }
                        }
                        return 0;
                    });
                }
                // sort by a single property value
                if (isString(config)) {
                    var _a = __read(OrderByPipe.extractFromConfig(config), 3), prop = _a[0], asc = _a[1], sign = _a[2];
                    if (config.length === 1) {
                        // tslint:disable-next-line:switch-default
                        switch (sign) {
                            case "+":
                                return out.sort(OrderByPipe.simpleSort.bind(this));
                            case "-":
                                return out.sort(OrderByPipe.simpleSort.bind(this)).reverse();
                        }
                    }
                    return out.sort(OrderByPipe.orderCompare.bind(this, prop, asc));
                }
                // default sort by value
                return out.sort(OrderByPipe.simpleSort.bind(this));
            };
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        OrderByPipe.simpleSort = /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
            function (a, b) {
                return isString(a) && isString(b) ? a.toLowerCase().localeCompare(b.toLowerCase()) : a - b;
            };
        /**
         * @param {?} prop
         * @param {?} asc
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        OrderByPipe.orderCompare = /**
         * @param {?} prop
         * @param {?} asc
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
            function (prop, asc, a, b) {
                var /** @type {?} */ first = extractDeepPropertyByMapKey(a, prop);
                var /** @type {?} */ second = extractDeepPropertyByMapKey(b, prop);
                if (first === second) {
                    return 0;
                }
                if (isUndefined(first) || first === "") {
                    return 1;
                }
                if (isUndefined(second) || second === "") {
                    return -1;
                }
                if (isString(first) && isString(second)) {
                    var /** @type {?} */ pos = first.toLowerCase().localeCompare(second.toLowerCase());
                    return asc ? pos : -pos;
                }
                return asc ? first - second : second - first;
            };
        /**
         * @param {?} config
         * @return {?}
         */
        OrderByPipe.extractFromConfig = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var /** @type {?} */ sign = config.substr(0, 1);
                var /** @type {?} */ prop = config.replace(/^[-+]/, "");
                var /** @type {?} */ asc = sign !== "-";
                return [prop, asc, sign];
            };
        OrderByPipe.decorators = [
            { type: core.Pipe, args: [{ name: "orderBy" },] },
        ];
        return OrderByPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GroupByImpurePipe = (function (_super) {
        __extends(GroupByImpurePipe, _super);
        function GroupByImpurePipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GroupByImpurePipe.decorators = [
            { type: core.Pipe, args: [{ name: "groupByImpure", pure: false },] },
        ];
        return GroupByImpurePipe;
    }(GroupByPipe));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FilterByImpurePipe = (function (_super) {
        __extends(FilterByImpurePipe, _super);
        function FilterByImpurePipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FilterByImpurePipe.decorators = [
            { type: core.Pipe, args: [{ name: "filterByImpure", pure: false },] },
        ];
        return FilterByImpurePipe;
    }(FilterByPipe));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var OrderByImpurePipe = (function (_super) {
        __extends(OrderByImpurePipe, _super);
        function OrderByImpurePipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OrderByImpurePipe.decorators = [
            { type: core.Pipe, args: [{ name: "orderByImpure", pure: false },] },
        ];
        return OrderByImpurePipe;
    }(OrderByPipe));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RangePipe = (function () {
        function RangePipe() {
        }
        /**
         * @param {?=} start
         * @param {?=} count
         * @param {?=} step
         * @return {?}
         */
        RangePipe.prototype.transform = /**
         * @param {?=} start
         * @param {?=} count
         * @param {?=} step
         * @return {?}
         */
            function (start, count, step) {
                if (start === void 0) {
                    start = 1;
                }
                if (count === void 0) {
                    count = 0;
                }
                if (step === void 0) {
                    step = 1;
                }
                return Array(count)
                    .fill("")
                    .map(function (v, i) { return step * i + start; });
            };
        RangePipe.decorators = [
            { type: core.Pipe, args: [{ name: "range" },] },
        ];
        return RangePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ ARRAY_PIPES = [
        DiffPipe,
        FlattenPipe,
        InitialPipe,
        IntersectionPipe,
        ReversePipe,
        TailPipe,
        TrurthifyPipe,
        UnionPipe,
        UniquePipe,
        WithoutPipe,
        PluckPipe,
        ShufflePipe,
        EveryPipe,
        SomePipe,
        SamplePipe,
        GroupByPipe,
        GroupByImpurePipe,
        FilterByPipe,
        FilterByImpurePipe,
        OrderByPipe,
        OrderByImpurePipe,
        RangePipe,
    ];
    var NgArrayPipesModule = (function () {
        function NgArrayPipesModule() {
        }
        NgArrayPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: ARRAY_PIPES,
                        imports: [],
                        exports: ARRAY_PIPES,
                    },] },
        ];
        return NgArrayPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var KeysPipe = (function () {
        function KeysPipe() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        KeysPipe.prototype.transform = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return Object.keys(obj);
            };
        KeysPipe.decorators = [
            { type: core.Pipe, args: [{ name: "keys" },] },
        ];
        return KeysPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ValuesPipe = (function () {
        function ValuesPipe() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        ValuesPipe.prototype.transform = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return Object.keys(obj).map(function (k) { return obj[k]; });
            };
        ValuesPipe.decorators = [
            { type: core.Pipe, args: [{ name: "values" },] },
        ];
        return ValuesPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PairsPipe = (function () {
        function PairsPipe() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        PairsPipe.prototype.transform = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return Object.keys(obj).map(function (k) { return [k, obj[k]]; });
            };
        PairsPipe.decorators = [
            { type: core.Pipe, args: [{ name: "pairs" },] },
        ];
        return PairsPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PickPipe = (function () {
        function PickPipe() {
        }
        /**
         * @param {?} obj
         * @param {...?} args
         * @return {?}
         */
        PickPipe.prototype.transform = /**
         * @param {?} obj
         * @param {...?} args
         * @return {?}
         */
            function (obj) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return args.reduce(function (o, k) {
                    return Object.assign(o, (_a = {}, _a[k] = obj[k], _a));
                    var _a;
                }, {});
            };
        PickPipe.decorators = [
            { type: core.Pipe, args: [{ name: "pick" },] },
        ];
        return PickPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var OmitPipe = (function () {
        function OmitPipe() {
        }
        /**
         * @param {?} obj
         * @param {...?} args
         * @return {?}
         */
        OmitPipe.prototype.transform = /**
         * @param {?} obj
         * @param {...?} args
         * @return {?}
         */
            function (obj) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return (Object.keys(obj)
                    .filter(function (k) { return !~args.indexOf(k); })
                    .reduce(function (o, k) {
                    return Object.assign(o, (_a = {}, _a[k] = obj[k], _a));
                    var _a;
                }, {}));
            };
        OmitPipe.decorators = [
            { type: core.Pipe, args: [{ name: "omit" },] },
        ];
        return OmitPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var InvertPipe = (function () {
        function InvertPipe() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        InvertPipe.prototype.transform = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return Object.keys(obj).reduce(function (o, k) {
                    return Object.assign(o, (_a = {}, _a[obj[k]] = k, _a));
                    var _a;
                }, {});
            };
        InvertPipe.decorators = [
            { type: core.Pipe, args: [{ name: "invert" },] },
        ];
        return InvertPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var InvertByPipe = (function () {
        function InvertByPipe() {
        }
        /**
         * @param {?} obj
         * @param {?=} cb
         * @return {?}
         */
        InvertByPipe.prototype.transform = /**
         * @param {?} obj
         * @param {?=} cb
         * @return {?}
         */
            function (obj, cb) {
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return Object.keys(obj).reduce(function (o, k) {
                    var /** @type {?} */ key = cb ? cb(obj[k]) : obj[k];
                    return Array.isArray(o[key]) ? (o[key].push(k), o) : Object.assign(o, (_a = {}, _a[key] = [k], _a));
                    var _a;
                }, {});
            };
        InvertByPipe.decorators = [
            { type: core.Pipe, args: [{ name: "invertBy" },] },
        ];
        return InvertByPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DiffObjPipe = (function () {
        function DiffObjPipe() {
        }
        /**
         * @param {?} obj
         * @param {?=} original
         * @return {?}
         */
        DiffObjPipe.prototype.transform = /**
         * @param {?} obj
         * @param {?=} original
         * @return {?}
         */
            function (obj, original) {
                if (original === void 0) {
                    original = {};
                }
                if (Array.isArray(obj) || Array.isArray(original) || !isObject(obj) || !isObject(original)) {
                    return {};
                }
                return getKeysTwoObjects(obj, original).reduce(function (diff, key) {
                    if (!isDeepEqual(original[key], obj[key])) {
                        diff[key] = obj[key];
                    }
                    return diff;
                }, {});
            };
        DiffObjPipe.decorators = [
            { type: core.Pipe, args: [{ name: "diffObj" },] },
        ];
        return DiffObjPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ OBJECT_PIPES = [KeysPipe, ValuesPipe, PairsPipe, PickPipe, InvertPipe, InvertByPipe, OmitPipe, DiffObjPipe];
    var NgObjectPipesModule = (function () {
        function NgObjectPipesModule() {
        }
        NgObjectPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: OBJECT_PIPES,
                        imports: [],
                        exports: OBJECT_PIPES,
                    },] },
        ];
        return NgObjectPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UcWordsPipe = (function () {
        function UcWordsPipe() {
        }
        /**
         * @param {?} text
         * @return {?}
         */
        UcWordsPipe.prototype.transform = /**
         * @param {?} text
         * @return {?}
         */
            function (text) {
                if (isString(text)) {
                    return text
                        .split(" ")
                        .map(function (sub) { return sub.slice(0, 1).toUpperCase() + sub.slice(1); })
                        .join(" ");
                }
                return text;
            };
        UcWordsPipe.decorators = [
            { type: core.Pipe, args: [{ name: "ucwords" },] },
        ];
        return UcWordsPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LeftTrimPipe = (function () {
        function LeftTrimPipe() {
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        LeftTrimPipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                if (chars === void 0) {
                    chars = "\\s";
                }
                return isString(text) ? text.replace(new RegExp("^[" + chars + "]+"), "") : text;
            };
        LeftTrimPipe.decorators = [
            { type: core.Pipe, args: [{ name: "ltrim" },] },
        ];
        return LeftTrimPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RepeatPipe = (function () {
        function RepeatPipe() {
        }
        /**
         * @param {?} str
         * @param {?=} n
         * @param {?=} separator
         * @return {?}
         */
        RepeatPipe.prototype.transform = /**
         * @param {?} str
         * @param {?=} n
         * @param {?=} separator
         * @return {?}
         */
            function (str, n, separator) {
                if (n === void 0) {
                    n = 1;
                }
                if (separator === void 0) {
                    separator = "";
                }
                if (n <= 0) {
                    throw new RangeError();
                }
                return n === 1 ? str : this.repeat(str, n - 1, separator);
            };
        /**
         * @param {?} str
         * @param {?} n
         * @param {?} separator
         * @return {?}
         */
        RepeatPipe.prototype.repeat = /**
         * @param {?} str
         * @param {?} n
         * @param {?} separator
         * @return {?}
         */
            function (str, n, separator) {
                return isString(str) ? (n === 0 ? str : str + separator + this.repeat(str, n - 1, separator)) : str;
            };
        RepeatPipe.decorators = [
            { type: core.Pipe, args: [{ name: "repeat" },] },
        ];
        return RepeatPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RightTrimPipe = (function () {
        function RightTrimPipe() {
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        RightTrimPipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                if (chars === void 0) {
                    chars = "\\s";
                }
                return isString(text) ? text.replace(new RegExp("[" + chars + "]+$"), "") : text;
            };
        RightTrimPipe.decorators = [
            { type: core.Pipe, args: [{ name: "rtrim" },] },
        ];
        return RightTrimPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ScanPipe = (function () {
        function ScanPipe() {
        }
        /**
         * @param {?} text
         * @param {?=} args
         * @return {?}
         */
        ScanPipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} args
         * @return {?}
         */
            function (text, args) {
                if (args === void 0) {
                    args = [];
                }
                return isString(text)
                    ? text.replace(/\{(\d+)}/g, function (match, index) { return (!isUndefined(args[index]) ? args[index] : match); })
                    : text;
            };
        ScanPipe.decorators = [
            { type: core.Pipe, args: [{ name: "scan" },] },
        ];
        return ScanPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ShortenPipe = (function () {
        function ShortenPipe() {
        }
        /**
         * @param {?} text
         * @param {?=} length
         * @param {?=} suffix
         * @param {?=} wordBreak
         * @return {?}
         */
        ShortenPipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} length
         * @param {?=} suffix
         * @param {?=} wordBreak
         * @return {?}
         */
            function (text, length, suffix, wordBreak) {
                if (length === void 0) {
                    length = 0;
                }
                if (suffix === void 0) {
                    suffix = "";
                }
                if (wordBreak === void 0) {
                    wordBreak = true;
                }
                if (!isString(text)) {
                    return text;
                }
                if (text.length > length) {
                    if (wordBreak) {
                        return text.slice(0, length) + suffix;
                    }
                    // tslint:disable-next-line:no-bitwise
                    if (!!~text.indexOf(" ", length)) {
                        return text.slice(0, text.indexOf(" ", length)) + suffix;
                    }
                }
                return text;
            };
        ShortenPipe.decorators = [
            { type: core.Pipe, args: [{ name: "shorten" },] },
        ];
        return ShortenPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var StripTagsPipe = (function () {
        function StripTagsPipe() {
        }
        /**
         * @param {?} text
         * @param {...?} allowedTags
         * @return {?}
         */
        StripTagsPipe.prototype.transform = /**
         * @param {?} text
         * @param {...?} allowedTags
         * @return {?}
         */
            function (text) {
                var allowedTags = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    allowedTags[_i - 1] = arguments[_i];
                }
                return allowedTags.length > 0
                    ? text.replace(new RegExp("<(?!/?(" + allowedTags.join("|") + ")s*/?)[^>]+>", "g"), "")
                    : text.replace(/<(?:.|\s)*?>/g, "");
            };
        StripTagsPipe.decorators = [
            { type: core.Pipe, args: [{ name: "stripTags" },] },
        ];
        return StripTagsPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TrimPipe = (function () {
        function TrimPipe() {
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        TrimPipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                if (chars === void 0) {
                    chars = "\\s";
                }
                return isString(text) ? text.replace(new RegExp("^[" + chars + "]+|[" + chars + "]+$", "g"), "") : text;
            };
        TrimPipe.decorators = [
            { type: core.Pipe, args: [{ name: "trim" },] },
        ];
        return TrimPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UcFirstPipe = (function () {
        function UcFirstPipe() {
        }
        /**
         * @param {?} text
         * @return {?}
         */
        UcFirstPipe.prototype.transform = /**
         * @param {?} text
         * @return {?}
         */
            function (text) {
                return isString(text) ? text.slice(0, 1).toUpperCase() + text.slice(1) : text;
            };
        UcFirstPipe.decorators = [
            { type: core.Pipe, args: [{ name: "ucfirst" },] },
        ];
        return UcFirstPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SlugifyPipe = (function () {
        function SlugifyPipe() {
        }
        /**
         * @param {?} str
         * @return {?}
         */
        SlugifyPipe.prototype.transform = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                return isString(str)
                    ? str
                        .toLowerCase()
                        .trim()
                        .replace(/[^\w\-]+/g, " ")
                        .replace(/\s+/g, "-")
                    : str;
            };
        SlugifyPipe.decorators = [
            { type: core.Pipe, args: [{ name: "slugify" },] },
        ];
        return SlugifyPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CamelizePipe = (function () {
        function CamelizePipe() {
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        CamelizePipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                if (chars === void 0) {
                    chars = "\\s";
                }
                if (!isString(text)) {
                    return text;
                }
                return text
                    .toLowerCase()
                    .split(/[-_\s]/g)
                    .filter(function (v) { return !!v; })
                    .map(function (word, key) {
                    return !key ? word : word.slice(0, 1).toUpperCase() + word.slice(1);
                })
                    .join("");
            };
        CamelizePipe.decorators = [
            { type: core.Pipe, args: [{ name: "camelize" },] },
        ];
        return CamelizePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LatinisePipe = (function () {
        function LatinisePipe() {
            this.latinMap = {
                Á: "A",
                Ă: "A",
                Ắ: "A",
                Ặ: "A",
                Ằ: "A",
                Ẳ: "A",
                Ẵ: "A",
                Ǎ: "A",
                Â: "A",
                Ấ: "A",
                Ậ: "A",
                Ầ: "A",
                Ẩ: "A",
                Ẫ: "A",
                Ä: "A",
                Ǟ: "A",
                Ȧ: "A",
                Ǡ: "A",
                Ạ: "A",
                Ȁ: "A",
                À: "A",
                Ả: "A",
                Ȃ: "A",
                Ā: "A",
                Ą: "A",
                Å: "A",
                Ǻ: "A",
                Ḁ: "A",
                Ⱥ: "A",
                Ã: "A",
                Ꜳ: "AA",
                Æ: "AE",
                Ǽ: "AE",
                Ǣ: "AE",
                Ꜵ: "AO",
                Ꜷ: "AU",
                Ꜹ: "AV",
                Ꜻ: "AV",
                Ꜽ: "AY",
                Ḃ: "B",
                Ḅ: "B",
                Ɓ: "B",
                Ḇ: "B",
                Ƀ: "B",
                Ƃ: "B",
                Ć: "C",
                Č: "C",
                Ç: "C",
                Ḉ: "C",
                Ĉ: "C",
                Ċ: "C",
                Ƈ: "C",
                Ȼ: "C",
                Ď: "D",
                Ḑ: "D",
                Ḓ: "D",
                Ḋ: "D",
                Ḍ: "D",
                Ɗ: "D",
                Ḏ: "D",
                ǲ: "D",
                ǅ: "D",
                Đ: "D",
                Ƌ: "D",
                Ǳ: "DZ",
                Ǆ: "DZ",
                É: "E",
                Ĕ: "E",
                Ě: "E",
                Ȩ: "E",
                Ḝ: "E",
                Ê: "E",
                Ế: "E",
                Ệ: "E",
                Ề: "E",
                Ể: "E",
                Ễ: "E",
                Ḙ: "E",
                Ë: "E",
                Ė: "E",
                Ẹ: "E",
                Ȅ: "E",
                È: "E",
                Ẻ: "E",
                Ȇ: "E",
                Ē: "E",
                Ḗ: "E",
                Ḕ: "E",
                Ę: "E",
                Ɇ: "E",
                Ẽ: "E",
                Ḛ: "E",
                Ꝫ: "ET",
                Ḟ: "F",
                Ƒ: "F",
                Ǵ: "G",
                Ğ: "G",
                Ǧ: "G",
                Ģ: "G",
                Ĝ: "G",
                Ġ: "G",
                Ɠ: "G",
                Ḡ: "G",
                Ǥ: "G",
                Ḫ: "H",
                Ȟ: "H",
                Ḩ: "H",
                Ĥ: "H",
                Ⱨ: "H",
                Ḧ: "H",
                Ḣ: "H",
                Ḥ: "H",
                Ħ: "H",
                Í: "I",
                Ĭ: "I",
                Ǐ: "I",
                Î: "I",
                Ï: "I",
                Ḯ: "I",
                İ: "I",
                Ị: "I",
                Ȉ: "I",
                Ì: "I",
                Ỉ: "I",
                Ȋ: "I",
                Ī: "I",
                Į: "I",
                Ɨ: "I",
                Ĩ: "I",
                Ḭ: "I",
                Ꝺ: "D",
                Ꝼ: "F",
                Ᵹ: "G",
                Ꞃ: "R",
                Ꞅ: "S",
                Ꞇ: "T",
                Ꝭ: "IS",
                Ĵ: "J",
                Ɉ: "J",
                Ḱ: "K",
                Ǩ: "K",
                Ķ: "K",
                Ⱪ: "K",
                Ꝃ: "K",
                Ḳ: "K",
                Ƙ: "K",
                Ḵ: "K",
                Ꝁ: "K",
                Ꝅ: "K",
                Ĺ: "L",
                Ƚ: "L",
                Ľ: "L",
                Ļ: "L",
                Ḽ: "L",
                Ḷ: "L",
                Ḹ: "L",
                Ⱡ: "L",
                Ꝉ: "L",
                Ḻ: "L",
                Ŀ: "L",
                Ɫ: "L",
                ǈ: "L",
                Ł: "L",
                Ǉ: "LJ",
                Ḿ: "M",
                Ṁ: "M",
                Ṃ: "M",
                Ɱ: "M",
                Ń: "N",
                Ň: "N",
                Ņ: "N",
                Ṋ: "N",
                Ṅ: "N",
                Ṇ: "N",
                Ǹ: "N",
                Ɲ: "N",
                Ṉ: "N",
                Ƞ: "N",
                ǋ: "N",
                Ñ: "N",
                Ǌ: "NJ",
                Ó: "O",
                Ŏ: "O",
                Ǒ: "O",
                Ô: "O",
                Ố: "O",
                Ộ: "O",
                Ồ: "O",
                Ổ: "O",
                Ỗ: "O",
                Ö: "O",
                Ȫ: "O",
                Ȯ: "O",
                Ȱ: "O",
                Ọ: "O",
                Ő: "O",
                Ȍ: "O",
                Ò: "O",
                Ỏ: "O",
                Ơ: "O",
                Ớ: "O",
                Ợ: "O",
                Ờ: "O",
                Ở: "O",
                Ỡ: "O",
                Ȏ: "O",
                Ꝋ: "O",
                Ꝍ: "O",
                Ō: "O",
                Ṓ: "O",
                Ṑ: "O",
                Ɵ: "O",
                Ǫ: "O",
                Ǭ: "O",
                Ø: "O",
                Ǿ: "O",
                Õ: "O",
                Ṍ: "O",
                Ṏ: "O",
                Ȭ: "O",
                Ƣ: "OI",
                Ꝏ: "OO",
                Ɛ: "E",
                Ɔ: "O",
                Ȣ: "OU",
                Ṕ: "P",
                Ṗ: "P",
                Ꝓ: "P",
                Ƥ: "P",
                Ꝕ: "P",
                Ᵽ: "P",
                Ꝑ: "P",
                Ꝙ: "Q",
                Ꝗ: "Q",
                Ŕ: "R",
                Ř: "R",
                Ŗ: "R",
                Ṙ: "R",
                Ṛ: "R",
                Ṝ: "R",
                Ȑ: "R",
                Ȓ: "R",
                Ṟ: "R",
                Ɍ: "R",
                Ɽ: "R",
                Ꜿ: "C",
                Ǝ: "E",
                Ś: "S",
                Ṥ: "S",
                Š: "S",
                Ṧ: "S",
                Ş: "S",
                Ŝ: "S",
                Ș: "S",
                Ṡ: "S",
                Ṣ: "S",
                Ṩ: "S",
                ẞ: "SS",
                Ť: "T",
                Ţ: "T",
                Ṱ: "T",
                Ț: "T",
                Ⱦ: "T",
                Ṫ: "T",
                Ṭ: "T",
                Ƭ: "T",
                Ṯ: "T",
                Ʈ: "T",
                Ŧ: "T",
                Ɐ: "A",
                Ꞁ: "L",
                Ɯ: "M",
                Ʌ: "V",
                Ꜩ: "TZ",
                Ú: "U",
                Ŭ: "U",
                Ǔ: "U",
                Û: "U",
                Ṷ: "U",
                Ü: "U",
                Ǘ: "U",
                Ǚ: "U",
                Ǜ: "U",
                Ǖ: "U",
                Ṳ: "U",
                Ụ: "U",
                Ű: "U",
                Ȕ: "U",
                Ù: "U",
                Ủ: "U",
                Ư: "U",
                Ứ: "U",
                Ự: "U",
                Ừ: "U",
                Ử: "U",
                Ữ: "U",
                Ȗ: "U",
                Ū: "U",
                Ṻ: "U",
                Ų: "U",
                Ů: "U",
                Ũ: "U",
                Ṹ: "U",
                Ṵ: "U",
                Ꝟ: "V",
                Ṿ: "V",
                Ʋ: "V",
                Ṽ: "V",
                Ꝡ: "VY",
                Ẃ: "W",
                Ŵ: "W",
                Ẅ: "W",
                Ẇ: "W",
                Ẉ: "W",
                Ẁ: "W",
                Ⱳ: "W",
                Ẍ: "X",
                Ẋ: "X",
                Ý: "Y",
                Ŷ: "Y",
                Ÿ: "Y",
                Ẏ: "Y",
                Ỵ: "Y",
                Ỳ: "Y",
                Ƴ: "Y",
                Ỷ: "Y",
                Ỿ: "Y",
                Ȳ: "Y",
                Ɏ: "Y",
                Ỹ: "Y",
                Ź: "Z",
                Ž: "Z",
                Ẑ: "Z",
                Ⱬ: "Z",
                Ż: "Z",
                Ẓ: "Z",
                Ȥ: "Z",
                Ẕ: "Z",
                Ƶ: "Z",
                Ĳ: "IJ",
                Œ: "OE",
                ᴀ: "A",
                ᴁ: "AE",
                ʙ: "B",
                ᴃ: "B",
                ᴄ: "C",
                ᴅ: "D",
                ᴇ: "E",
                ꜰ: "F",
                ɢ: "G",
                ʛ: "G",
                ʜ: "H",
                ɪ: "I",
                ʁ: "R",
                ᴊ: "J",
                ᴋ: "K",
                ʟ: "L",
                ᴌ: "L",
                ᴍ: "M",
                ɴ: "N",
                ᴏ: "O",
                ɶ: "OE",
                ᴐ: "O",
                ᴕ: "OU",
                ᴘ: "P",
                ʀ: "R",
                ᴎ: "N",
                ᴙ: "R",
                ꜱ: "S",
                ᴛ: "T",
                ⱻ: "E",
                ᴚ: "R",
                ᴜ: "U",
                ᴠ: "V",
                ᴡ: "W",
                ʏ: "Y",
                ᴢ: "Z",
                á: "a",
                ă: "a",
                ắ: "a",
                ặ: "a",
                ằ: "a",
                ẳ: "a",
                ẵ: "a",
                ǎ: "a",
                â: "a",
                ấ: "a",
                ậ: "a",
                ầ: "a",
                ẩ: "a",
                ẫ: "a",
                ä: "a",
                ǟ: "a",
                ȧ: "a",
                ǡ: "a",
                ạ: "a",
                ȁ: "a",
                à: "a",
                ả: "a",
                ȃ: "a",
                ā: "a",
                ą: "a",
                ᶏ: "a",
                ẚ: "a",
                å: "a",
                ǻ: "a",
                ḁ: "a",
                ⱥ: "a",
                ã: "a",
                ꜳ: "aa",
                æ: "ae",
                ǽ: "ae",
                ǣ: "ae",
                ꜵ: "ao",
                ꜷ: "au",
                ꜹ: "av",
                ꜻ: "av",
                ꜽ: "ay",
                ḃ: "b",
                ḅ: "b",
                ɓ: "b",
                ḇ: "b",
                ᵬ: "b",
                ᶀ: "b",
                ƀ: "b",
                ƃ: "b",
                ɵ: "o",
                ć: "c",
                č: "c",
                ç: "c",
                ḉ: "c",
                ĉ: "c",
                ɕ: "c",
                ċ: "c",
                ƈ: "c",
                ȼ: "c",
                ď: "d",
                ḑ: "d",
                ḓ: "d",
                ȡ: "d",
                ḋ: "d",
                ḍ: "d",
                ɗ: "d",
                ᶑ: "d",
                ḏ: "d",
                ᵭ: "d",
                ᶁ: "d",
                đ: "d",
                ɖ: "d",
                ƌ: "d",
                ı: "i",
                ȷ: "j",
                ɟ: "j",
                ʄ: "j",
                ǳ: "dz",
                ǆ: "dz",
                é: "e",
                ĕ: "e",
                ě: "e",
                ȩ: "e",
                ḝ: "e",
                ê: "e",
                ế: "e",
                ệ: "e",
                ề: "e",
                ể: "e",
                ễ: "e",
                ḙ: "e",
                ë: "e",
                ė: "e",
                ẹ: "e",
                ȅ: "e",
                è: "e",
                ẻ: "e",
                ȇ: "e",
                ē: "e",
                ḗ: "e",
                ḕ: "e",
                ⱸ: "e",
                ę: "e",
                ᶒ: "e",
                ɇ: "e",
                ẽ: "e",
                ḛ: "e",
                ꝫ: "et",
                ḟ: "f",
                ƒ: "f",
                ᵮ: "f",
                ᶂ: "f",
                ǵ: "g",
                ğ: "g",
                ǧ: "g",
                ģ: "g",
                ĝ: "g",
                ġ: "g",
                ɠ: "g",
                ḡ: "g",
                ᶃ: "g",
                ǥ: "g",
                ḫ: "h",
                ȟ: "h",
                ḩ: "h",
                ĥ: "h",
                ⱨ: "h",
                ḧ: "h",
                ḣ: "h",
                ḥ: "h",
                ɦ: "h",
                ẖ: "h",
                ħ: "h",
                ƕ: "hv",
                í: "i",
                ĭ: "i",
                ǐ: "i",
                î: "i",
                ï: "i",
                ḯ: "i",
                ị: "i",
                ȉ: "i",
                ì: "i",
                ỉ: "i",
                ȋ: "i",
                ī: "i",
                į: "i",
                ᶖ: "i",
                ɨ: "i",
                ĩ: "i",
                ḭ: "i",
                ꝺ: "d",
                ꝼ: "f",
                ᵹ: "g",
                ꞃ: "r",
                ꞅ: "s",
                ꞇ: "t",
                ꝭ: "is",
                ǰ: "j",
                ĵ: "j",
                ʝ: "j",
                ɉ: "j",
                ḱ: "k",
                ǩ: "k",
                ķ: "k",
                ⱪ: "k",
                ꝃ: "k",
                ḳ: "k",
                ƙ: "k",
                ḵ: "k",
                ᶄ: "k",
                ꝁ: "k",
                ꝅ: "k",
                ĺ: "l",
                ƚ: "l",
                ɬ: "l",
                ľ: "l",
                ļ: "l",
                ḽ: "l",
                ȴ: "l",
                ḷ: "l",
                ḹ: "l",
                ⱡ: "l",
                ꝉ: "l",
                ḻ: "l",
                ŀ: "l",
                ɫ: "l",
                ᶅ: "l",
                ɭ: "l",
                ł: "l",
                ǉ: "lj",
                ſ: "s",
                ẜ: "s",
                ẛ: "s",
                ẝ: "s",
                ḿ: "m",
                ṁ: "m",
                ṃ: "m",
                ɱ: "m",
                ᵯ: "m",
                ᶆ: "m",
                ń: "n",
                ň: "n",
                ņ: "n",
                ṋ: "n",
                ȵ: "n",
                ṅ: "n",
                ṇ: "n",
                ǹ: "n",
                ɲ: "n",
                ṉ: "n",
                ƞ: "n",
                ᵰ: "n",
                ᶇ: "n",
                ɳ: "n",
                ñ: "n",
                ǌ: "nj",
                ó: "o",
                ŏ: "o",
                ǒ: "o",
                ô: "o",
                ố: "o",
                ộ: "o",
                ồ: "o",
                ổ: "o",
                ỗ: "o",
                ö: "o",
                ȫ: "o",
                ȯ: "o",
                ȱ: "o",
                ọ: "o",
                ő: "o",
                ȍ: "o",
                ò: "o",
                ỏ: "o",
                ơ: "o",
                ớ: "o",
                ợ: "o",
                ờ: "o",
                ở: "o",
                ỡ: "o",
                ȏ: "o",
                ꝋ: "o",
                ꝍ: "o",
                ⱺ: "o",
                ō: "o",
                ṓ: "o",
                ṑ: "o",
                ǫ: "o",
                ǭ: "o",
                ø: "o",
                ǿ: "o",
                õ: "o",
                ṍ: "o",
                ṏ: "o",
                ȭ: "o",
                ƣ: "oi",
                ꝏ: "oo",
                ɛ: "e",
                ᶓ: "e",
                ɔ: "o",
                ᶗ: "o",
                ȣ: "ou",
                ṕ: "p",
                ṗ: "p",
                ꝓ: "p",
                ƥ: "p",
                ᵱ: "p",
                ᶈ: "p",
                ꝕ: "p",
                ᵽ: "p",
                ꝑ: "p",
                ꝙ: "q",
                ʠ: "q",
                ɋ: "q",
                ꝗ: "q",
                ŕ: "r",
                ř: "r",
                ŗ: "r",
                ṙ: "r",
                ṛ: "r",
                ṝ: "r",
                ȑ: "r",
                ɾ: "r",
                ᵳ: "r",
                ȓ: "r",
                ṟ: "r",
                ɼ: "r",
                ᵲ: "r",
                ᶉ: "r",
                ɍ: "r",
                ɽ: "r",
                ↄ: "c",
                ꜿ: "c",
                ɘ: "e",
                ɿ: "r",
                ś: "s",
                ṥ: "s",
                š: "s",
                ṧ: "s",
                ş: "s",
                ŝ: "s",
                ș: "s",
                ṡ: "s",
                ṣ: "s",
                ṩ: "s",
                ʂ: "s",
                ᵴ: "s",
                ᶊ: "s",
                ȿ: "s",
                ɡ: "g",
                ß: "ss",
                ᴑ: "o",
                ᴓ: "o",
                ᴝ: "u",
                ť: "t",
                ţ: "t",
                ṱ: "t",
                ț: "t",
                ȶ: "t",
                ẗ: "t",
                ⱦ: "t",
                ṫ: "t",
                ṭ: "t",
                ƭ: "t",
                ṯ: "t",
                ᵵ: "t",
                ƫ: "t",
                ʈ: "t",
                ŧ: "t",
                ᵺ: "th",
                ɐ: "a",
                ᴂ: "ae",
                ǝ: "e",
                ᵷ: "g",
                ɥ: "h",
                ʮ: "h",
                ʯ: "h",
                ᴉ: "i",
                ʞ: "k",
                ꞁ: "l",
                ɯ: "m",
                ɰ: "m",
                ᴔ: "oe",
                ɹ: "r",
                ɻ: "r",
                ɺ: "r",
                ⱹ: "r",
                ʇ: "t",
                ʌ: "v",
                ʍ: "w",
                ʎ: "y",
                ꜩ: "tz",
                ú: "u",
                ŭ: "u",
                ǔ: "u",
                û: "u",
                ṷ: "u",
                ü: "u",
                ǘ: "u",
                ǚ: "u",
                ǜ: "u",
                ǖ: "u",
                ṳ: "u",
                ụ: "u",
                ű: "u",
                ȕ: "u",
                ù: "u",
                ủ: "u",
                ư: "u",
                ứ: "u",
                ự: "u",
                ừ: "u",
                ử: "u",
                ữ: "u",
                ȗ: "u",
                ū: "u",
                ṻ: "u",
                ų: "u",
                ᶙ: "u",
                ů: "u",
                ũ: "u",
                ṹ: "u",
                ṵ: "u",
                ᵫ: "ue",
                ꝸ: "um",
                ⱴ: "v",
                ꝟ: "v",
                ṿ: "v",
                ʋ: "v",
                ᶌ: "v",
                ⱱ: "v",
                ṽ: "v",
                ꝡ: "vy",
                ẃ: "w",
                ŵ: "w",
                ẅ: "w",
                ẇ: "w",
                ẉ: "w",
                ẁ: "w",
                ⱳ: "w",
                ẘ: "w",
                ẍ: "x",
                ẋ: "x",
                ᶍ: "x",
                ý: "y",
                ŷ: "y",
                ÿ: "y",
                ẏ: "y",
                ỵ: "y",
                ỳ: "y",
                ƴ: "y",
                ỷ: "y",
                ỿ: "y",
                ȳ: "y",
                ẙ: "y",
                ɏ: "y",
                ỹ: "y",
                ź: "z",
                ž: "z",
                ẑ: "z",
                ʑ: "z",
                ⱬ: "z",
                ż: "z",
                ẓ: "z",
                ȥ: "z",
                ẕ: "z",
                ᵶ: "z",
                ᶎ: "z",
                ʐ: "z",
                ƶ: "z",
                ɀ: "z",
                ﬀ: "ff",
                ﬃ: "ffi",
                ﬄ: "ffl",
                ﬁ: "fi",
                ﬂ: "fl",
                ĳ: "ij",
                œ: "oe",
                ﬆ: "st",
                ₐ: "a",
                ₑ: "e",
                ᵢ: "i",
                ⱼ: "j",
                ₒ: "o",
                ᵣ: "r",
                ᵤ: "u",
                ᵥ: "v",
                ₓ: "x",
            };
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        LatinisePipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                var _this = this;
                if (chars === void 0) {
                    chars = "\\s";
                }
                return isString(text)
                    ? text.replace(/[^A-Za-z0-9]/g, function (key) {
                        return _this.latinMap[key] || key;
                    })
                    : text;
            };
        LatinisePipe.decorators = [
            { type: core.Pipe, args: [{ name: "latinise" },] },
        ];
        return LatinisePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LinesPipe = (function () {
        function LinesPipe() {
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        LinesPipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                if (chars === void 0) {
                    chars = "\\s";
                }
                return isString(text) ? text.replace(/\r\n/g, "\n").split("\n") : text;
            };
        LinesPipe.decorators = [
            { type: core.Pipe, args: [{ name: "lines" },] },
        ];
        return LinesPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UnderscorePipe = (function () {
        function UnderscorePipe() {
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        UnderscorePipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                if (chars === void 0) {
                    chars = "\\s";
                }
                return isString(text)
                    ? text
                        .trim()
                        .replace(/\s+/g, "")
                        .replace(/[A-Z]/g, function (c, k) {
                        return k ? "_" + c.toLowerCase() : c.toLowerCase();
                    })
                    : text;
            };
        UnderscorePipe.decorators = [
            { type: core.Pipe, args: [{ name: "underscore" },] },
        ];
        return UnderscorePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MatchPipe = (function () {
        function MatchPipe() {
        }
        /**
         * @param {?} text
         * @param {?} pattern
         * @param {?=} flags
         * @return {?}
         */
        MatchPipe.prototype.transform = /**
         * @param {?} text
         * @param {?} pattern
         * @param {?=} flags
         * @return {?}
         */
            function (text, pattern, flags) {
                if (!isString(text)) {
                    return text;
                }
                return text.match(new RegExp(pattern, flags));
            };
        MatchPipe.decorators = [
            { type: core.Pipe, args: [{ name: "match" },] },
        ];
        return MatchPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TestPipe = (function () {
        function TestPipe() {
        }
        /**
         * @param {?} text
         * @param {?} pattern
         * @param {?=} flags
         * @return {?}
         */
        TestPipe.prototype.transform = /**
         * @param {?} text
         * @param {?} pattern
         * @param {?=} flags
         * @return {?}
         */
            function (text, pattern, flags) {
                if (!isString(text)) {
                    return text;
                }
                return new RegExp(pattern, flags).test(text);
            };
        TestPipe.decorators = [
            { type: core.Pipe, args: [{ name: "test" },] },
        ];
        return TestPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LeftPadPipe = (function () {
        function LeftPadPipe() {
        }
        /**
         * @param {?} str
         * @param {?} length
         * @param {?=} padCharacter
         * @return {?}
         */
        LeftPadPipe.prototype.transform = /**
         * @param {?} str
         * @param {?} length
         * @param {?=} padCharacter
         * @return {?}
         */
            function (str, length, padCharacter) {
                if (padCharacter === void 0) {
                    padCharacter = " ";
                }
                if (!isString(str) || str.length >= length) {
                    return str;
                }
                while (str.length < length) {
                    str = padCharacter + str;
                }
                return str;
            };
        LeftPadPipe.decorators = [
            { type: core.Pipe, args: [{ name: "lpad" },] },
        ];
        return LeftPadPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RightPadPipe = (function () {
        function RightPadPipe() {
        }
        /**
         * @param {?} str
         * @param {?=} length
         * @param {?=} padCharacter
         * @return {?}
         */
        RightPadPipe.prototype.transform = /**
         * @param {?} str
         * @param {?=} length
         * @param {?=} padCharacter
         * @return {?}
         */
            function (str, length, padCharacter) {
                if (length === void 0) {
                    length = 1;
                }
                if (padCharacter === void 0) {
                    padCharacter = " ";
                }
                if (!isString(str) || str.length >= length) {
                    return str;
                }
                while (str.length < length) {
                    str = str + padCharacter;
                }
                return str;
            };
        RightPadPipe.decorators = [
            { type: core.Pipe, args: [{ name: "rpad" },] },
        ];
        return RightPadPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WrapPipe = (function () {
        function WrapPipe() {
        }
        /**
         * @param {?} str
         * @param {?=} prefix
         * @param {?=} suffix
         * @return {?}
         */
        WrapPipe.prototype.transform = /**
         * @param {?} str
         * @param {?=} prefix
         * @param {?=} suffix
         * @return {?}
         */
            function (str, prefix, suffix) {
                if (prefix === void 0) {
                    prefix = "";
                }
                if (suffix === void 0) {
                    suffix = "";
                }
                if (!isString(str)) {
                    return str;
                }
                return (!!prefix && isString(prefix) ? prefix : "") + str + (!!suffix && isString(suffix) ? suffix : "");
            };
        WrapPipe.decorators = [
            { type: core.Pipe, args: [{ name: "wrap" },] },
        ];
        return WrapPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ STRING_PIPES = [
        LeftTrimPipe,
        RepeatPipe,
        RightTrimPipe,
        ScanPipe,
        ShortenPipe,
        StripTagsPipe,
        TrimPipe,
        UcFirstPipe,
        UcWordsPipe,
        SlugifyPipe,
        CamelizePipe,
        LatinisePipe,
        LinesPipe,
        UnderscorePipe,
        MatchPipe,
        TestPipe,
        LeftPadPipe,
        RightPadPipe,
        WrapPipe,
    ];
    var NgStringPipesModule = (function () {
        function NgStringPipesModule() {
        }
        NgStringPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: STRING_PIPES,
                        imports: [],
                        exports: STRING_PIPES,
                    },] },
        ];
        return NgStringPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MaxPipe = (function () {
        function MaxPipe() {
        }
        /**
         * @param {?} arr
         * @return {?}
         */
        MaxPipe.prototype.transform = /**
         * @param {?} arr
         * @return {?}
         */
            function (arr) {
                return Array.isArray(arr) ? Math.max.apply(Math, __spread(arr)) : arr;
            };
        MaxPipe.decorators = [
            { type: core.Pipe, args: [{ name: "max" },] },
        ];
        return MaxPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MinPipe = (function () {
        function MinPipe() {
        }
        /**
         * @param {?} arr
         * @return {?}
         */
        MinPipe.prototype.transform = /**
         * @param {?} arr
         * @return {?}
         */
            function (arr) {
                return Array.isArray(arr) ? Math.min.apply(Math, __spread(arr)) : arr;
            };
        MinPipe.decorators = [
            { type: core.Pipe, args: [{ name: "min" },] },
        ];
        return MinPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PercentagePipe = (function () {
        function PercentagePipe() {
        }
        /**
         * @param {?} num
         * @param {?=} total
         * @param {?=} floor
         * @return {?}
         */
        PercentagePipe.prototype.transform = /**
         * @param {?} num
         * @param {?=} total
         * @param {?=} floor
         * @return {?}
         */
            function (num, total, floor) {
                if (total === void 0) {
                    total = 100;
                }
                if (floor === void 0) {
                    floor = false;
                }
                if (isNaN(num)) {
                    return num;
                }
                var /** @type {?} */ percent = (num * 100) / total;
                return floor ? Math.floor(percent) : percent;
            };
        PercentagePipe.decorators = [
            { type: core.Pipe, args: [{ name: "percentage" },] },
        ];
        return PercentagePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SumPipe = (function () {
        function SumPipe() {
        }
        /**
         * @param {?} arr
         * @return {?}
         */
        SumPipe.prototype.transform = /**
         * @param {?} arr
         * @return {?}
         */
            function (arr) {
                return Array.isArray(arr) ? arr.reduce(function (sum, curr) { return sum + curr; }, 0) : arr;
            };
        SumPipe.decorators = [
            { type: core.Pipe, args: [{ name: "sum" },] },
        ];
        return SumPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FloorPipe = (function () {
        function FloorPipe() {
        }
        /**
         * @param {?} num
         * @param {?=} precision
         * @return {?}
         */
        FloorPipe.prototype.transform = /**
         * @param {?} num
         * @param {?=} precision
         * @return {?}
         */
            function (num, precision) {
                if (precision === void 0) {
                    precision = 0;
                }
                if (precision <= 0) {
                    return Math.floor(num);
                }
                var /** @type {?} */ tho = Math.pow(10, precision);
                return Math.floor(num * tho) / tho;
            };
        FloorPipe.decorators = [
            { type: core.Pipe, args: [{ name: "floor" },] },
        ];
        return FloorPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RoundPipe = (function () {
        function RoundPipe() {
        }
        /**
         * @param {?} num
         * @param {?=} precision
         * @return {?}
         */
        RoundPipe.prototype.transform = /**
         * @param {?} num
         * @param {?=} precision
         * @return {?}
         */
            function (num, precision) {
                if (precision === void 0) {
                    precision = 0;
                }
                return applyPrecision(num, precision);
            };
        RoundPipe.decorators = [
            { type: core.Pipe, args: [{ name: "round" },] },
        ];
        return RoundPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SqrtPipe = (function () {
        function SqrtPipe() {
        }
        /**
         * @param {?} num
         * @return {?}
         */
        SqrtPipe.prototype.transform = /**
         * @param {?} num
         * @return {?}
         */
            function (num) {
                return !isNaN(num) ? Math.sqrt(num) : num;
            };
        SqrtPipe.decorators = [
            { type: core.Pipe, args: [{ name: "sqrt" },] },
        ];
        return SqrtPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PowerPipe = (function () {
        function PowerPipe() {
        }
        /**
         * @param {?} num
         * @param {?=} power
         * @return {?}
         */
        PowerPipe.prototype.transform = /**
         * @param {?} num
         * @param {?=} power
         * @return {?}
         */
            function (num, power) {
                if (power === void 0) {
                    power = 2;
                }
                return !isNaN(num) ? Math.pow(num, power) : num;
            };
        PowerPipe.decorators = [
            { type: core.Pipe, args: [{ name: "pow" },] },
        ];
        return PowerPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CeilPipe = (function () {
        function CeilPipe() {
        }
        /**
         * @param {?} num
         * @param {?=} precision
         * @return {?}
         */
        CeilPipe.prototype.transform = /**
         * @param {?} num
         * @param {?=} precision
         * @return {?}
         */
            function (num, precision) {
                if (precision === void 0) {
                    precision = 0;
                }
                if (precision <= 0) {
                    return Math.ceil(num);
                }
                var /** @type {?} */ tho = Math.pow(10, precision);
                return Math.ceil(num * tho) / tho;
            };
        CeilPipe.decorators = [
            { type: core.Pipe, args: [{ name: "ceil" },] },
        ];
        return CeilPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DegreesPipe = (function () {
        function DegreesPipe() {
        }
        /**
         * @param {?} radians
         * @return {?}
         */
        DegreesPipe.prototype.transform = /**
         * @param {?} radians
         * @return {?}
         */
            function (radians) {
                if (!isNumberFinite(radians)) {
                    return NaN;
                }
                return (radians * 180) / Math.PI;
            };
        DegreesPipe.decorators = [
            { type: core.Pipe, args: [{ name: "degrees" },] },
        ];
        return DegreesPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var BytesPipe = (function () {
        function BytesPipe() {
            this.dictionary = [
                { max: 1024, type: "B" },
                { max: 1048576, type: "KB" },
                { max: 1073741824, type: "MB" },
                { max: 1.0995116e12, type: "GB" },
            ];
        }
        /**
         * @param {?} value
         * @param {?=} precision
         * @return {?}
         */
        BytesPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} precision
         * @return {?}
         */
            function (value, precision) {
                if (!isNumberFinite(value)) {
                    return NaN;
                }
                var /** @type {?} */ format = this.dictionary.find(function (d) { return value < d.max; }) || this.dictionary[this.dictionary.length - 1];
                var /** @type {?} */ calc = value / (format.max / 1024);
                var /** @type {?} */ num = isUndefined(precision) ? calc : applyPrecision(calc, precision);
                return num + " " + format.type;
            };
        BytesPipe.decorators = [
            { type: core.Pipe, args: [{ name: "bytes" },] },
        ];
        return BytesPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RadiansPipe = (function () {
        function RadiansPipe() {
        }
        /**
         * @param {?} degrees
         * @return {?}
         */
        RadiansPipe.prototype.transform = /**
         * @param {?} degrees
         * @return {?}
         */
            function (degrees) {
                if (!isNumberFinite(degrees)) {
                    return NaN;
                }
                return (degrees * Math.PI) / 180;
            };
        RadiansPipe.decorators = [
            { type: core.Pipe, args: [{ name: "radians" },] },
        ];
        return RadiansPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ MATH_PIPES = [
        MaxPipe,
        MinPipe,
        PercentagePipe,
        SumPipe,
        FloorPipe,
        RoundPipe,
        SqrtPipe,
        PowerPipe,
        CeilPipe,
        DegreesPipe,
        BytesPipe,
        RadiansPipe,
    ];
    var NgMathPipesModule = (function () {
        function NgMathPipesModule() {
        }
        NgMathPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: MATH_PIPES,
                        imports: [],
                        exports: MATH_PIPES,
                    },] },
        ];
        return NgMathPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsDefinedPipe = (function () {
        function IsDefinedPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsDefinedPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return !isUndefined(input);
            };
        IsDefinedPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isDefined" },] },
        ];
        return IsDefinedPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsNullPipe = (function () {
        function IsNullPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsNullPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return input === null;
            };
        IsNullPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isNull" },] },
        ];
        return IsNullPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsUndefinedPipe = (function () {
        function IsUndefinedPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsUndefinedPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return isUndefined(input);
            };
        IsUndefinedPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isUndefined" },] },
        ];
        return IsUndefinedPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsStringPipe = (function () {
        function IsStringPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsStringPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return isString(input);
            };
        IsStringPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isString" },] },
        ];
        return IsStringPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsFunctionPipe = (function () {
        function IsFunctionPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsFunctionPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return isFunction(input);
            };
        IsFunctionPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isFunction" },] },
        ];
        return IsFunctionPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsNumberPipe = (function () {
        function IsNumberPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsNumberPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return isNumber(input);
            };
        IsNumberPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isNumber" },] },
        ];
        return IsNumberPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsArrayPipe = (function () {
        function IsArrayPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsArrayPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return Array.isArray(input);
            };
        IsArrayPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isArray" },] },
        ];
        return IsArrayPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsObjectPipe = (function () {
        function IsObjectPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsObjectPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return isObject(input);
            };
        IsObjectPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isObject" },] },
        ];
        return IsObjectPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsGreaterEqualThanPipe = (function () {
        function IsGreaterEqualThanPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsGreaterEqualThanPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                return input >= other;
            };
        IsGreaterEqualThanPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isGreaterEqualThan" },] },
        ];
        return IsGreaterEqualThanPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsGreaterThanPipe = (function () {
        function IsGreaterThanPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsGreaterThanPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                return input > other;
            };
        IsGreaterThanPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isGreaterThan" },] },
        ];
        return IsGreaterThanPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsLessEqualThanPipe = (function () {
        function IsLessEqualThanPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsLessEqualThanPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                return input <= other;
            };
        IsLessEqualThanPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isLessEqualThan" },] },
        ];
        return IsLessEqualThanPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsEqualToPipe = (function () {
        function IsEqualToPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsEqualToPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                // tslint:disable-next-line:triple-equals
                return input == other;
            };
        IsEqualToPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isEqualTo" },] },
        ];
        return IsEqualToPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsNotEqualToPipe = (function () {
        function IsNotEqualToPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsNotEqualToPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                // tslint:disable-next-line:triple-equals
                return input != other;
            };
        IsNotEqualToPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isNotEqualTo" },] },
        ];
        return IsNotEqualToPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsIdenticalToPipe = (function () {
        function IsIdenticalToPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsIdenticalToPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                return input === other;
            };
        IsIdenticalToPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isIdenticalTo" },] },
        ];
        return IsIdenticalToPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsNotIdenticalToPipe = (function () {
        function IsNotIdenticalToPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsNotIdenticalToPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                return input !== other;
            };
        IsNotIdenticalToPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isNotIdenticalTo" },] },
        ];
        return IsNotIdenticalToPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsLessThanPipe = (function () {
        function IsLessThanPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsLessThanPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                return input < other;
            };
        IsLessThanPipe.decorators = [
            { type: core.Pipe, args: [{ name: "isLessThan" },] },
        ];
        return IsLessThanPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ BOOLEAN_PIPES = [
        IsDefinedPipe,
        IsNullPipe,
        IsUndefinedPipe,
        IsStringPipe,
        IsFunctionPipe,
        IsNumberPipe,
        IsArrayPipe,
        IsObjectPipe,
        IsGreaterEqualThanPipe,
        IsGreaterThanPipe,
        IsLessEqualThanPipe,
        IsLessEqualThanPipe,
        IsEqualToPipe,
        IsNotEqualToPipe,
        IsIdenticalToPipe,
        IsNotIdenticalToPipe,
        IsLessThanPipe,
    ];
    var NgBooleanPipesModule = (function () {
        function NgBooleanPipesModule() {
        }
        NgBooleanPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: BOOLEAN_PIPES,
                        imports: [],
                        exports: BOOLEAN_PIPES,
                    },] },
        ];
        return NgBooleanPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgPipesModule = (function () {
        function NgPipesModule() {
        }
        NgPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        exports: [NgArrayPipesModule, NgStringPipesModule, NgMathPipesModule, NgBooleanPipesModule, NgObjectPipesModule],
                    },] },
        ];
        return NgPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgPipesModule = NgPipesModule;
    exports.NgArrayPipesModule = NgArrayPipesModule;
    exports.DiffPipe = DiffPipe;
    exports.InitialPipe = InitialPipe;
    exports.FlattenPipe = FlattenPipe;
    exports.IntersectionPipe = IntersectionPipe;
    exports.ReversePipe = ReversePipe;
    exports.TailPipe = TailPipe;
    exports.TrurthifyPipe = TrurthifyPipe;
    exports.UnionPipe = UnionPipe;
    exports.UniquePipe = UniquePipe;
    exports.WithoutPipe = WithoutPipe;
    exports.PluckPipe = PluckPipe;
    exports.ShufflePipe = ShufflePipe;
    exports.EveryPipe = EveryPipe;
    exports.SomePipe = SomePipe;
    exports.SamplePipe = SamplePipe;
    exports.GroupByPipe = GroupByPipe;
    exports.FilterByPipe = FilterByPipe;
    exports.OrderByPipe = OrderByPipe;
    exports.GroupByImpurePipe = GroupByImpurePipe;
    exports.FilterByImpurePipe = FilterByImpurePipe;
    exports.OrderByImpurePipe = OrderByImpurePipe;
    exports.RangePipe = RangePipe;
    exports.NgObjectPipesModule = NgObjectPipesModule;
    exports.KeysPipe = KeysPipe;
    exports.ValuesPipe = ValuesPipe;
    exports.PairsPipe = PairsPipe;
    exports.PickPipe = PickPipe;
    exports.OmitPipe = OmitPipe;
    exports.InvertPipe = InvertPipe;
    exports.InvertByPipe = InvertByPipe;
    exports.DiffObjPipe = DiffObjPipe;
    exports.STRING_PIPES = STRING_PIPES;
    exports.NgStringPipesModule = NgStringPipesModule;
    exports.UcWordsPipe = UcWordsPipe;
    exports.LeftTrimPipe = LeftTrimPipe;
    exports.RepeatPipe = RepeatPipe;
    exports.RightTrimPipe = RightTrimPipe;
    exports.ScanPipe = ScanPipe;
    exports.ShortenPipe = ShortenPipe;
    exports.StripTagsPipe = StripTagsPipe;
    exports.TrimPipe = TrimPipe;
    exports.UcFirstPipe = UcFirstPipe;
    exports.SlugifyPipe = SlugifyPipe;
    exports.CamelizePipe = CamelizePipe;
    exports.LatinisePipe = LatinisePipe;
    exports.LinesPipe = LinesPipe;
    exports.UnderscorePipe = UnderscorePipe;
    exports.MatchPipe = MatchPipe;
    exports.TestPipe = TestPipe;
    exports.LeftPadPipe = LeftPadPipe;
    exports.RightPadPipe = RightPadPipe;
    exports.WrapPipe = WrapPipe;
    exports.MATH_PIPES = MATH_PIPES;
    exports.NgMathPipesModule = NgMathPipesModule;
    exports.MaxPipe = MaxPipe;
    exports.MinPipe = MinPipe;
    exports.PercentagePipe = PercentagePipe;
    exports.SumPipe = SumPipe;
    exports.FloorPipe = FloorPipe;
    exports.RoundPipe = RoundPipe;
    exports.SqrtPipe = SqrtPipe;
    exports.PowerPipe = PowerPipe;
    exports.CeilPipe = CeilPipe;
    exports.DegreesPipe = DegreesPipe;
    exports.BytesPipe = BytesPipe;
    exports.BOOLEAN_PIPES = BOOLEAN_PIPES;
    exports.NgBooleanPipesModule = NgBooleanPipesModule;
    exports.IsDefinedPipe = IsDefinedPipe;
    exports.IsNullPipe = IsNullPipe;
    exports.IsUndefinedPipe = IsUndefinedPipe;
    exports.IsStringPipe = IsStringPipe;
    exports.IsFunctionPipe = IsFunctionPipe;
    exports.IsNumberPipe = IsNumberPipe;
    exports.IsArrayPipe = IsArrayPipe;
    exports.IsObjectPipe = IsObjectPipe;
    exports.IsGreaterEqualThanPipe = IsGreaterEqualThanPipe;
    exports.IsGreaterThanPipe = IsGreaterThanPipe;
    exports.IsLessEqualThanPipe = IsLessEqualThanPipe;
    exports.IsEqualToPipe = IsEqualToPipe;
    exports.IsNotEqualToPipe = IsNotEqualToPipe;
    exports.IsIdenticalToPipe = IsIdenticalToPipe;
    exports.IsNotIdenticalToPipe = IsNotIdenticalToPipe;
    exports.IsLessThanPipe = IsLessThanPipe;
    exports.ɵa = isString;
    exports.ɵb = RadiansPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBpcGVzLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9hcnJheS9kaWZmLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL2FycmF5L2luaXRpYWwudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYXJyYXkvZmxhdHRlbi50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9hcnJheS9pbnRlcnNlY3Rpb24udHMiLG51bGwsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9oZWxwZXJzL2hlbHBlcnMudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYXJyYXkvcmV2ZXJzZS50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9hcnJheS90YWlsLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL2FycmF5L3RydXRoaWZ5LnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL2FycmF5L3VuaW9uLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL2FycmF5L3VuaXF1ZS50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9hcnJheS93aXRob3V0LnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL2FycmF5L3BsdWNrLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL2FycmF5L3NodWZmbGUudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYXJyYXkvZXZlcnkudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYXJyYXkvc29tZS50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9hcnJheS9zYW1wbGUudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYXJyYXkvZ3JvdXAtYnkudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYXJyYXkvZmlsdGVyLWJ5LnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL2FycmF5L29yZGVyLWJ5LnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL2FycmF5L2dyb3VwLWJ5LWltcHVyZS50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9hcnJheS9maWx0ZXItYnktaW1wdXJlLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL2FycmF5L29yZGVyLWJ5LWltcHVyZS50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9hcnJheS9yYW5nZS50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9hcnJheS9pbmRleC50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9vYmplY3Qva2V5cy50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9vYmplY3QvdmFsdWVzLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL29iamVjdC9wYWlycy50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9vYmplY3QvcGljay50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9vYmplY3Qvb21pdC50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9vYmplY3QvaW52ZXJ0LnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL29iamVjdC9pbnZlcnQtYnkudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvb2JqZWN0L2RpZmYtb2JqLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL29iamVjdC9pbmRleC50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9zdHJpbmcvdWN3b3Jkcy50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9zdHJpbmcvbHRyaW0udHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvc3RyaW5nL3JlcGVhdC50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9zdHJpbmcvcnRyaW0udHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvc3RyaW5nL3NjYW4udHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvc3RyaW5nL3Nob3J0ZW4udHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvc3RyaW5nL3N0cmlwLXRhZ3MudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvc3RyaW5nL3RyaW0udHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvc3RyaW5nL3VjZmlyc3QudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvc3RyaW5nL3NsdWdpZnkudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvc3RyaW5nL2NhbWVsaXplLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL3N0cmluZy9sYXRpbmlzZS50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9zdHJpbmcvbGluZXMudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvc3RyaW5nL3VuZGVyc2NvcmUudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvc3RyaW5nL21hdGNoLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL3N0cmluZy90ZXN0LnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL3N0cmluZy9scGFkLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL3N0cmluZy9ycGFkLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL3N0cmluZy93cmFwLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL3N0cmluZy9pbmRleC50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9tYXRoL21heC50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9tYXRoL21pbi50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9tYXRoL3BlcmNlbnRhZ2UudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvbWF0aC9zdW0udHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvbWF0aC9mbG9vci50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9tYXRoL3JvdW5kLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL21hdGgvc3FydC50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9tYXRoL3Bvdy50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9tYXRoL2NlaWwudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvbWF0aC9kZWdyZWVzLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL21hdGgvYnl0ZXMudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvbWF0aC9yYWRpYW5zLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL21hdGgvaW5kZXgudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYm9vbGVhbi9pcy1kZWZpbmVkLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL2Jvb2xlYW4vaXMtbnVsbC50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9ib29sZWFuL2lzLXVuZGVmaW5lZC50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9ib29sZWFuL2lzLXN0cmluZy50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9ib29sZWFuL2lzLWZ1bmN0aW9uLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL2Jvb2xlYW4vaXMtbnVtYmVyLnRzIiwibmc6Ly9uZ3gtcGlwZXMvc3JjL3BpcGVzL2Jvb2xlYW4vaXMtYXJyYXkudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYm9vbGVhbi9pcy1vYmplY3QudHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYm9vbGVhbi9pcy1ncmVhdGVyLWVxdWFsLXRoYW4udHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYm9vbGVhbi9pcy1ncmVhdGVyLXRoYW4udHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYm9vbGVhbi9pcy1sZXNzLWVxdWFsLXRoYW4udHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYm9vbGVhbi9pcy1lcXVhbC10by50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9ib29sZWFuL2lzLW5vdC1lcXVhbC10by50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9ib29sZWFuL2lzLWlkZW50aWNhbC10by50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9ib29sZWFuL2lzLW5vdC1pZGVudGljYWwtdG8udHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYm9vbGVhbi9pcy1sZXNzLXRoYW4udHMiLCJuZzovL25neC1waXBlcy9zcmMvcGlwZXMvYm9vbGVhbi9pbmRleC50cyIsIm5nOi8vbmd4LXBpcGVzL3NyYy9waXBlcy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQFBpcGUoeyBuYW1lOiBcImRpZmZcIiB9KVxuZXhwb3J0IGNsYXNzIERpZmZQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55W10sIC4uLmFyZ3M6IGFueVtdKTogYW55W107XG4gIHRyYW5zZm9ybTxUPihpbnB1dDogVCwgLi4uYXJnczogYW55W10pOiBUO1xuXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCAuLi5hcmdzOiBhbnlbXSk6IGFueSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgcmV0dXJuIGFyZ3MucmVkdWNlKChkLCBjKSA9PiBkLmZpbHRlcigoZTogYW55KSA9PiAhfmMuaW5kZXhPZihlKSksIGlucHV0KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJpbml0aWFsXCIgfSlcbmV4cG9ydCBjbGFzcyBJbml0aWFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueVtdLCBudW06IG51bWJlcik6IGFueVtdO1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGFueTtcblxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgbnVtOiBudW1iZXIgPSAwKTogYW55W10ge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGlucHV0KSA/IGlucHV0LnNsaWNlKDAsIGlucHV0Lmxlbmd0aCAtIG51bSkgOiBpbnB1dDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJmbGF0dGVuXCIgfSlcbmV4cG9ydCBjbGFzcyBGbGF0dGVuUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueVtdLCBzaGFsbG93PzogYm9vbGVhbik6IGFueVtdO1xuICB0cmFuc2Zvcm08VD4oaW5wdXQ6IFQsIHNoYWxsb3c/OiBib29sZWFuKTogVDtcblxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgc2hhbGxvdzogYm9vbGVhbiA9IGZhbHNlKTogYW55IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoYWxsb3cgPyBbXS5jb25jYXQuYXBwbHkoW10sIGlucHV0KSA6IHRoaXMuZmxhdHRlbihpbnB1dCk7XG4gIH1cblxuICBwcml2YXRlIGZsYXR0ZW4oYXJyYXk6IGFueVtdKTogYW55W10ge1xuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoKGFycjogYW55W10sIGVsbTogYW55KSA9PiB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlbG0pKSB7XG4gICAgICAgIHJldHVybiBhcnIuY29uY2F0KHRoaXMuZmxhdHRlbihlbG0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFyci5jb25jYXQoZWxtKTtcbiAgICB9LCBbXSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwiaW50ZXJzZWN0aW9uXCIgfSlcbmV4cG9ydCBjbGFzcyBJbnRlcnNlY3Rpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55W10sIC4uLmFyZ3M6IGFueVtdKTogYW55W107XG4gIHRyYW5zZm9ybTxUPihpbnB1dDogVCwgLi4uYXJnczogYW55W10pOiBUO1xuXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCAuLi5hcmdzOiBhbnlbXSk6IGFueSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgcmV0dXJuIGFyZ3MucmVkdWNlKChuLCBjKSA9PiBuLmZpbHRlcigoZTogYW55KSA9PiAhIX5jLmluZGV4T2YoZSkpLCBpbnB1dCk7XG4gIH1cbn1cbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0geVtvcFswXSAmIDIgPyBcInJldHVyblwiIDogb3BbMF0gPyBcInRocm93XCIgOiBcIm5leHRcIl0pICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gWzAsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7ICB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpZiAob1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG4iLCJleHBvcnQgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWU6IGFueSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsdWU6IGFueSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJGaW5pdGUodmFsdWU6IGFueSkge1xuICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIGlzRmluaXRlKHZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UHJlY2lzaW9uKG51bTogbnVtYmVyLCBwcmVjaXNpb246IG51bWJlcikge1xuICBpZiAocHJlY2lzaW9uIDw9IDApIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChudW0pO1xuICB9XG5cbiAgY29uc3QgdGhvID0gMTAgKiogcHJlY2lzaW9uO1xuXG4gIHJldHVybiBNYXRoLnJvdW5kKG51bSAqIHRobykgLyB0aG87XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkob2JqOiBhbnksIG1hcDogc3RyaW5nKTogYW55IHtcbiAgY29uc3Qga2V5cyA9IG1hcC5zcGxpdChcIi5cIik7XG4gIGNvbnN0IGhlYWQgPSBrZXlzLnNoaWZ0KCk7XG5cbiAgcmV0dXJuIGtleXMucmVkdWNlKChwcm9wOiBhbnksIGtleTogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuICFpc1VuZGVmaW5lZChwcm9wKSAmJiAhaXNVbmRlZmluZWQocHJvcFtrZXldKSA/IHByb3Bba2V5XSA6IHVuZGVmaW5lZDtcbiAgfSwgb2JqW2hlYWQgfHwgXCJcIl0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5UGFyZW50TWFwS2V5KG9iajogYW55LCBtYXA6IHN0cmluZyk6IGFueSB7XG4gIGNvbnN0IGtleXMgPSBtYXAuc3BsaXQoXCIuXCIpO1xuICBjb25zdCB0YWlsID0ga2V5cy5wb3AoKTtcbiAgY29uc3QgcHJvcHMgPSBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkob2JqLCBrZXlzLmpvaW4oXCIuXCIpKTtcblxuICByZXR1cm4geyBwcm9wcywgdGFpbCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5c1R3b09iamVjdHMob2JqOiBhbnksIG90aGVyOiBhbnkpOiBhbnkge1xuICByZXR1cm4gWy4uLk9iamVjdC5rZXlzKG9iaiksIC4uLk9iamVjdC5rZXlzKG90aGVyKV0uZmlsdGVyKChrZXksIGluZGV4LCBhcnJheSkgPT4gYXJyYXkuaW5kZXhPZihrZXkpID09PSBpbmRleCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZXBFcXVhbChvYmo6IGFueSwgb3RoZXI6IGFueSk6IGFueSB7XG4gIGlmICghaXNPYmplY3Qob2JqKSB8fCAhaXNPYmplY3Qob3RoZXIpKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gb3RoZXI7XG4gIH1cblxuICByZXR1cm4gZ2V0S2V5c1R3b09iamVjdHMob2JqLCBvdGhlcikuZXZlcnkoXG4gICAgKGtleTogYW55KTogYm9vbGVhbiA9PiB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9ialtrZXldKSAmJiAhaXNPYmplY3Qob3RoZXJba2V5XSkpIHtcbiAgICAgICAgcmV0dXJuIG9ialtrZXldID09PSBvdGhlcltrZXldO1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdChvYmpba2V5XSkgfHwgIWlzT2JqZWN0KG90aGVyW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzRGVlcEVxdWFsKG9ialtrZXldLCBvdGhlcltrZXldKTtcbiAgICB9XG4gICk7XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG5AUGlwZSh7IG5hbWU6IFwicmV2ZXJzZVwiIH0pXG5leHBvcnQgY2xhc3MgUmV2ZXJzZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xuICAgIGlmIChpc1N0cmluZyhpbnB1dCkpIHtcbiAgICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuc3BsaXQoXCJcIilcbiAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAuam9pbihcIlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCkgPyBpbnB1dC5zbGljZSgpLnJldmVyc2UoKSA6IGlucHV0O1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQFBpcGUoeyBuYW1lOiBcInRhaWxcIiB9KVxuZXhwb3J0IGNsYXNzIFRhaWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55W10sIG51bT86IG51bWJlcik6IGFueVtdO1xuICB0cmFuc2Zvcm08VD4oaW5wdXQ6IFQsIG51bT86IG51bWJlcik6IFQ7XG5cbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIG51bTogbnVtYmVyID0gMCk6IGFueSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaW5wdXQpID8gaW5wdXQuc2xpY2UobnVtKSA6IGlucHV0O1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQFBpcGUoeyBuYW1lOiBcInRydXRoaWZ5XCIgfSlcbmV4cG9ydCBjbGFzcyBUcnVydGhpZnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55W10pOiBhbnlbXTtcbiAgdHJhbnNmb3JtPFQ+KGlucHV0OiBUKTogVDtcblxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaW5wdXQpID8gaW5wdXQuZmlsdGVyKGUgPT4gISFlKSA6IGlucHV0O1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQFBpcGUoeyBuYW1lOiBcInVuaW9uXCIgfSlcbmV4cG9ydCBjbGFzcyBVbmlvblBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnlbXSwgYXJncz86IGFueVtdKTogYW55W107XG4gIHRyYW5zZm9ybTxUPihpbnB1dDogVCwgYXJncz86IGFueVtdKTogVDtcblxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgYXJnczogYW55W10gPSBbXSk6IGFueSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSB8fCAhQXJyYXkuaXNBcnJheShhcmdzKSkge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIHJldHVybiBhcmdzLnJlZHVjZSgobmV3QXJyLCBjdXJyQXJyKSA9PiB7XG4gICAgICByZXR1cm4gbmV3QXJyLmNvbmNhdChcbiAgICAgICAgY3VyckFyci5yZWR1Y2UoKG5vRHVwQXJyOiBhbnlbXSwgY3VycjogYW55KSA9PiB7XG4gICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbiAgICAgICAgICByZXR1cm4gIX5ub0R1cEFyci5pbmRleE9mKGN1cnIpICYmICF+bmV3QXJyLmluZGV4T2YoY3VycikgPyBub0R1cEFyci5jb25jYXQoW2N1cnJdKSA6IG5vRHVwQXJyO1xuICAgICAgICB9LCBbXSlcbiAgICAgICk7XG4gICAgfSwgaW5wdXQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleSwgaXNPYmplY3QsIGlzVW5kZWZpbmVkIH0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG5AUGlwZSh7IG5hbWU6IFwidW5pcXVlXCIgfSlcbmV4cG9ydCBjbGFzcyBVbmlxdWVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55W10sIGFyZ3M/OiBzdHJpbmcgfCB1bmRlZmluZWQpOiBhbnlbXTtcbiAgdHJhbnNmb3JtPFQ+KGlucHV0OiBULCBhcmdzPzogc3RyaW5nIHwgdW5kZWZpbmVkKTogVDtcblxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgcHJvcGVydHlOYW1lPzogc3RyaW5nIHwgdW5kZWZpbmVkKTogYW55IHtcbiAgICBjb25zdCB1bmlxdWVzOiBib29sZWFuW10gPSBbXTtcblxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGlucHV0KVxuICAgICAgPyBpc1VuZGVmaW5lZChwcm9wZXJ0eU5hbWUpXG4gICAgICAgID8gaW5wdXQuZmlsdGVyKChlLCBpKSA9PiBpbnB1dC5pbmRleE9mKGUpID09PSBpKVxuICAgICAgICA6IGlucHV0LmZpbHRlcigoZSwgaSkgPT4ge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KGUsIHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KHZhbHVlKSA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpIHx8IHVuaXF1ZXNbdmFsdWVdKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdW5pcXVlc1t2YWx1ZV0gPSB0cnVlO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9KVxuICAgICAgOiBpbnB1dDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJ3aXRob3V0XCIgfSlcbmV4cG9ydCBjbGFzcyBXaXRob3V0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueVtdLCBhcmdzPzogYW55W10pOiBhbnlbXTtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIGFyZ3M/OiBhbnlbXSk6IGFueTtcblxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgYXJnczogYW55W10gPSBbXSk6IGFueVtdIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dClcbiAgICAgID8gLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbiAgICAgICAgaW5wdXQuZmlsdGVyKGUgPT4gIX5hcmdzLmluZGV4T2YoZSkpXG4gICAgICA6IGlucHV0O1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleSB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcInBsdWNrXCIsIHB1cmU6IGZhbHNlIH0pXG5leHBvcnQgY2xhc3MgUGx1Y2tQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55W10sIG1hcDogc3RyaW5nKTogYW55W107XG4gIHRyYW5zZm9ybTxUPihpbnB1dDogVCwgbWFwOiBzdHJpbmcpOiBUO1xuXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBtYXA6IHN0cmluZyk6IGFueSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaW5wdXQpID8gaW5wdXQubWFwKGUgPT4gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KGUsIG1hcCkpIDogaW5wdXQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwic2h1ZmZsZVwiIH0pXG5leHBvcnQgY2xhc3MgU2h1ZmZsZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnlbXSk6IGFueVtdO1xuICB0cmFuc2Zvcm08VD4oaW5wdXQ6IFQpOiBUO1xuXG4gIC8vIFVzaW5nIGEgdmVyc2lvbiBvZiB0aGUgRmlzaGVyLVlhdGVzIHNodWZmbGUgYWxnb3JpdGhtXG4gIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlciVFMiU4MCU5M1lhdGVzX3NodWZmbGVcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBjb25zdCBzaHVmZmxlZCA9IFsuLi5pbnB1dF07XG4gICAgY29uc3QgbiA9IGlucHV0Lmxlbmd0aCAtIDE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbnN0IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobiAtIGkgKyAxKSkgKyBpO1xuICAgICAgW3NodWZmbGVkW2ldLCBzaHVmZmxlZFtqXV0gPSBbc2h1ZmZsZWRbal0sIHNodWZmbGVkW2ldXTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2h1ZmZsZWQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwiZXZlcnlcIiB9KVxuZXhwb3J0IGNsYXNzIEV2ZXJ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgcHJlZGljYXRlOiAodmFsdWU6IGFueSwgaW5kZXg6IG51bWJlciwgYXJyYXk6IGFueVtdKSA9PiBib29sZWFuKTogYm9vbGVhbiB8IGFueVtdIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCkgPyBpbnB1dC5ldmVyeShwcmVkaWNhdGUpIDogZmFsc2U7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwic29tZVwiIH0pXG5leHBvcnQgY2xhc3MgU29tZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnlbXSwgcHJlZGljYXRlOiAodmFsdWU6IGFueSwgaW5kZXg6IG51bWJlciwgYXJyYXk6IGFueVtdKSA9PiBib29sZWFuKTogYm9vbGVhbjtcbiAgdHJhbnNmb3JtPFQ+KGlucHV0OiBULCBwcmVkaWNhdGU6ICh2YWx1ZTogYW55LCBpbmRleDogbnVtYmVyLCBhcnJheTogYW55W10pID0+IGJvb2xlYW4pOiBUO1xuXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBwcmVkaWNhdGU6ICh2YWx1ZTogYW55LCBpbmRleDogbnVtYmVyLCBhcnJheTogYW55W10pID0+IGJvb2xlYW4pOiBhbnkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGlucHV0KSA/IGlucHV0LnNvbWUocHJlZGljYXRlKSA6IGlucHV0O1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQFBpcGUoeyBuYW1lOiBcInNhbXBsZVwiIH0pXG5leHBvcnQgY2xhc3MgU2FtcGxlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueVtdLCBsZW4/OiBudW1iZXIpOiBhbnlbXTtcbiAgdHJhbnNmb3JtPFQ+KGlucHV0OiBULCBsZW4/OiBudW1iZXIpOiBUO1xuXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBsZW46IG51bWJlciA9IDEpOiBhbnkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBsZXQgc2FtcGxlOiBhbnlbXSA9IFtdO1xuICAgIGNvbnN0IHRtcCA9IFsuLi5pbnB1dF07XG4gICAgY29uc3QgbCA9IGxlbiA8IHRtcC5sZW5ndGggPyBsZW4gOiB0bXAubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgICBzYW1wbGUgPSBzYW1wbGUuY29uY2F0KHRtcC5zcGxpY2UoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdG1wLmxlbmd0aCksIDEpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2FtcGxlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleSwgaXNGdW5jdGlvbiB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcImdyb3VwQnlcIiB9KVxuZXhwb3J0IGNsYXNzIEdyb3VwQnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBkaXNjcmltaW5hdG9yOiBhbnkgPSBbXSwgZGVsaW1pdGVyOiBzdHJpbmcgPSBcInxcIik6IGFueSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdyb3VwQnkoaW5wdXQsIGRpc2NyaW1pbmF0b3IsIGRlbGltaXRlcik7XG4gIH1cblxuICBwcml2YXRlIGdyb3VwQnkobGlzdDogYW55W10sIGRpc2NyaW1pbmF0b3I6IGFueSwgZGVsaW1pdGVyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbGlzdC5yZWR1Y2UoKGFjYzogYW55LCBwYXlsb2FkOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHRoaXMuZXh0cmFjdEtleUJ5RGlzY3JpbWluYXRvcihkaXNjcmltaW5hdG9yLCBwYXlsb2FkLCBkZWxpbWl0ZXIpO1xuXG4gICAgICBhY2Nba2V5XSA9IEFycmF5LmlzQXJyYXkoYWNjW2tleV0pID8gYWNjW2tleV0uY29uY2F0KFtwYXlsb2FkXSkgOiBbcGF5bG9hZF07XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0S2V5QnlEaXNjcmltaW5hdG9yKGRpc2NyaW1pbmF0b3I6IGFueSwgcGF5bG9hZDogc3RyaW5nLCBkZWxpbWl0ZXI6IHN0cmluZykge1xuICAgIGlmIChpc0Z1bmN0aW9uKGRpc2NyaW1pbmF0b3IpKSB7XG4gICAgICByZXR1cm4gKDxGdW5jdGlvbj5kaXNjcmltaW5hdG9yKShwYXlsb2FkKTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShkaXNjcmltaW5hdG9yKSkge1xuICAgICAgcmV0dXJuIGRpc2NyaW1pbmF0b3IubWFwKGsgPT4gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KHBheWxvYWQsIGspKS5qb2luKGRlbGltaXRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShwYXlsb2FkLCA8c3RyaW5nPmRpc2NyaW1pbmF0b3IpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7XG4gIGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleSxcbiAgZXh0cmFjdERlZXBQcm9wZXJ0eUJ5UGFyZW50TWFwS2V5LFxuICBpc0Jvb2xlYW4sXG4gIGlzTnVtYmVyRmluaXRlLFxuICBpc1N0cmluZyxcbiAgaXNVbmRlZmluZWQsXG59IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuLy8gdHNsaW50OmRpc2FibGUgbm8tYml0d2lzZVxuQFBpcGUoeyBuYW1lOiBcImZpbHRlckJ5XCIgfSlcbmV4cG9ydCBjbGFzcyBGaWx0ZXJCeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnlbXSwgcHJvcHM6IEFycmF5PHN0cmluZz4sIHNlYXJjaD86IGFueSwgc3RyaWN0PzogYm9vbGVhbik6IGFueVtdO1xuICB0cmFuc2Zvcm08VD4oaW5wdXQ6IFQsIHByb3BzOiBBcnJheTxzdHJpbmc+LCBzZWFyY2g/OiBhbnksIHN0cmljdD86IGJvb2xlYW4pOiBUO1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgcHJvcHM6IEFycmF5PHN0cmluZz4sIHNlYXJjaDogYW55ID0gXCJcIiwgc3RyaWN0OiBib29sZWFuID0gZmFsc2UpOiBhbnkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkgfHwgKCFpc1N0cmluZyhzZWFyY2gpICYmICFpc051bWJlckZpbml0ZShzZWFyY2gpICYmICFpc0Jvb2xlYW4oc2VhcmNoKSkpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBjb25zdCB0ZXJtID0gU3RyaW5nKHNlYXJjaCkudG9Mb3dlckNhc2UoKTtcblxuICAgIHJldHVybiBpbnB1dC5maWx0ZXIob2JqID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5zb21lKHByb3AgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShvYmosIHByb3ApO1xuICAgICAgICBjb25zdCB7IHByb3BzLCB0YWlsIH0gPSBleHRyYWN0RGVlcFByb3BlcnR5QnlQYXJlbnRNYXBLZXkob2JqLCBwcm9wKTtcblxuICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpICYmICFpc1VuZGVmaW5lZChwcm9wcykgJiYgQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgICByZXR1cm4gcHJvcHMuc29tZShwYXJlbnQgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RyID0gU3RyaW5nKHBhcmVudFt0YWlsXSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHN0cmljdCA/IHN0ciA9PT0gdGVybSA6ICEhfnN0ci5pbmRleE9mKHRlcm0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0clZhbHVlOiBzdHJpbmcgPSBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgcmV0dXJuIHN0cmljdCA/IHRlcm0gPT09IHN0clZhbHVlIDogISF+c3RyVmFsdWUuaW5kZXhPZih0ZXJtKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleSwgaXNTdHJpbmcsIGlzVW5kZWZpbmVkIH0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG5AUGlwZSh7IG5hbWU6IFwib3JkZXJCeVwiIH0pXG5leHBvcnQgY2xhc3MgT3JkZXJCeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnlbXSwgY29uZmlnPzogYW55KTogYW55W107XG4gIHRyYW5zZm9ybTxUPihpbnB1dDogVCwgY29uZmlnPzogYW55KTogVDtcblxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgY29uZmlnPzogYW55KTogYW55IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0ID0gWy4uLmlucHV0XTtcblxuICAgIC8vIHNvcnQgYnkgbXVsdGlwbGUgcHJvcGVydGllc1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZykpIHtcbiAgICAgIHJldHVybiBvdXQuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBjb25zdCBsID0gY29uZmlnLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICBjb25zdCBbcHJvcCwgYXNjXSA9IE9yZGVyQnlQaXBlLmV4dHJhY3RGcm9tQ29uZmlnKGNvbmZpZ1tpXSk7XG4gICAgICAgICAgY29uc3QgcG9zID0gT3JkZXJCeVBpcGUub3JkZXJDb21wYXJlKHByb3AsIGFzYywgYSwgYik7XG4gICAgICAgICAgaWYgKHBvcyAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHNvcnQgYnkgYSBzaW5nbGUgcHJvcGVydHkgdmFsdWVcbiAgICBpZiAoaXNTdHJpbmcoY29uZmlnKSkge1xuICAgICAgY29uc3QgW3Byb3AsIGFzYywgc2lnbl0gPSBPcmRlckJ5UGlwZS5leHRyYWN0RnJvbUNvbmZpZyhjb25maWcpO1xuXG4gICAgICBpZiAoY29uZmlnLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3dpdGNoLWRlZmF1bHRcbiAgICAgICAgc3dpdGNoIChzaWduKSB7XG4gICAgICAgICAgY2FzZSBcIitcIjpcbiAgICAgICAgICAgIHJldHVybiBvdXQuc29ydChPcmRlckJ5UGlwZS5zaW1wbGVTb3J0LmJpbmQodGhpcykpO1xuICAgICAgICAgIGNhc2UgXCItXCI6XG4gICAgICAgICAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUuc2ltcGxlU29ydC5iaW5kKHRoaXMpKS5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dC5zb3J0KE9yZGVyQnlQaXBlLm9yZGVyQ29tcGFyZS5iaW5kKHRoaXMsIHByb3AsIGFzYykpO1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHQgc29ydCBieSB2YWx1ZVxuICAgIHJldHVybiBvdXQuc29ydChPcmRlckJ5UGlwZS5zaW1wbGVTb3J0LmJpbmQodGhpcykpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgc2ltcGxlU29ydChhOiBhbnksIGI6IGFueSkge1xuICAgIHJldHVybiBpc1N0cmluZyhhKSAmJiBpc1N0cmluZyhiKSA/IGEudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIudG9Mb3dlckNhc2UoKSkgOiBhIC0gYjtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIG9yZGVyQ29tcGFyZShwcm9wOiBzdHJpbmcsIGFzYzogYm9vbGVhbiwgYTogYW55LCBiOiBhbnkpIHtcbiAgICBjb25zdCBmaXJzdCA9IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShhLCBwcm9wKTtcbiAgICBjb25zdCBzZWNvbmQgPSBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkoYiwgcHJvcCk7XG5cbiAgICBpZiAoZmlyc3QgPT09IHNlY29uZCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgaWYgKGlzVW5kZWZpbmVkKGZpcnN0KSB8fCBmaXJzdCA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgaWYgKGlzVW5kZWZpbmVkKHNlY29uZCkgfHwgc2Vjb25kID09PSBcIlwiKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgaWYgKGlzU3RyaW5nKGZpcnN0KSAmJiBpc1N0cmluZyhzZWNvbmQpKSB7XG4gICAgICBjb25zdCBwb3MgPSBmaXJzdC50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoc2Vjb25kLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICByZXR1cm4gYXNjID8gcG9zIDogLXBvcztcbiAgICB9XG5cbiAgICByZXR1cm4gYXNjID8gZmlyc3QgLSBzZWNvbmQgOiBzZWNvbmQgLSBmaXJzdDtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGV4dHJhY3RGcm9tQ29uZmlnKGNvbmZpZzogYW55KSB7XG4gICAgY29uc3Qgc2lnbiA9IGNvbmZpZy5zdWJzdHIoMCwgMSk7XG4gICAgY29uc3QgcHJvcCA9IGNvbmZpZy5yZXBsYWNlKC9eWy0rXS8sIFwiXCIpO1xuICAgIGNvbnN0IGFzYyA9IHNpZ24gIT09IFwiLVwiO1xuXG4gICAgcmV0dXJuIFtwcm9wLCBhc2MsIHNpZ25dO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEdyb3VwQnlQaXBlIH0gZnJvbSBcIi4vZ3JvdXAtYnlcIjtcblxuLy8gdHNsaW50OmRpc2FibGUgdXNlLXBpcGUtdHJhbnNmb3JtLWludGVyZmFjZVxuQFBpcGUoeyBuYW1lOiBcImdyb3VwQnlJbXB1cmVcIiwgcHVyZTogZmFsc2UgfSlcbmV4cG9ydCBjbGFzcyBHcm91cEJ5SW1wdXJlUGlwZSBleHRlbmRzIEdyb3VwQnlQaXBlIHt9XG4iLCJpbXBvcnQgeyBQaXBlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZpbHRlckJ5UGlwZSB9IGZyb20gXCIuL2ZpbHRlci1ieVwiO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZSB1c2UtcGlwZS10cmFuc2Zvcm0taW50ZXJmYWNlXG5AUGlwZSh7IG5hbWU6IFwiZmlsdGVyQnlJbXB1cmVcIiwgcHVyZTogZmFsc2UgfSlcbmV4cG9ydCBjbGFzcyBGaWx0ZXJCeUltcHVyZVBpcGUgZXh0ZW5kcyBGaWx0ZXJCeVBpcGUge31cbiIsImltcG9ydCB7IFBpcGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgT3JkZXJCeVBpcGUgfSBmcm9tIFwiLi9vcmRlci1ieVwiO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZSB1c2UtcGlwZS10cmFuc2Zvcm0taW50ZXJmYWNlXG5AUGlwZSh7IG5hbWU6IFwib3JkZXJCeUltcHVyZVwiLCBwdXJlOiBmYWxzZSB9KVxuZXhwb3J0IGNsYXNzIE9yZGVyQnlJbXB1cmVQaXBlIGV4dGVuZHMgT3JkZXJCeVBpcGUge31cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwicmFuZ2VcIiB9KVxuZXhwb3J0IGNsYXNzIFJhbmdlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oc3RhcnQ6IG51bWJlciA9IDEsIGNvdW50OiBudW1iZXIgPSAwLCBzdGVwOiBudW1iZXIgPSAxKTogYW55IHtcbiAgICByZXR1cm4gQXJyYXkoY291bnQpXG4gICAgICAuZmlsbChcIlwiKVxuICAgICAgLm1hcCgodiwgaSkgPT4gc3RlcCAqIGkgKyBzdGFydCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IERpZmZQaXBlIH0gZnJvbSBcIi4vZGlmZlwiO1xuaW1wb3J0IHsgSW5pdGlhbFBpcGUgfSBmcm9tIFwiLi9pbml0aWFsXCI7XG5pbXBvcnQgeyBGbGF0dGVuUGlwZSB9IGZyb20gXCIuL2ZsYXR0ZW5cIjtcbmltcG9ydCB7IEludGVyc2VjdGlvblBpcGUgfSBmcm9tIFwiLi9pbnRlcnNlY3Rpb25cIjtcbmltcG9ydCB7IFJldmVyc2VQaXBlIH0gZnJvbSBcIi4vcmV2ZXJzZVwiO1xuaW1wb3J0IHsgVGFpbFBpcGUgfSBmcm9tIFwiLi90YWlsXCI7XG5pbXBvcnQgeyBUcnVydGhpZnlQaXBlIH0gZnJvbSBcIi4vdHJ1dGhpZnlcIjtcbmltcG9ydCB7IFVuaW9uUGlwZSB9IGZyb20gXCIuL3VuaW9uXCI7XG5pbXBvcnQgeyBVbmlxdWVQaXBlIH0gZnJvbSBcIi4vdW5pcXVlXCI7XG5pbXBvcnQgeyBXaXRob3V0UGlwZSB9IGZyb20gXCIuL3dpdGhvdXRcIjtcbmltcG9ydCB7IFBsdWNrUGlwZSB9IGZyb20gXCIuL3BsdWNrXCI7XG5pbXBvcnQgeyBTaHVmZmxlUGlwZSB9IGZyb20gXCIuL3NodWZmbGVcIjtcbmltcG9ydCB7IEV2ZXJ5UGlwZSB9IGZyb20gXCIuL2V2ZXJ5XCI7XG5pbXBvcnQgeyBTb21lUGlwZSB9IGZyb20gXCIuL3NvbWVcIjtcbmltcG9ydCB7IFNhbXBsZVBpcGUgfSBmcm9tIFwiLi9zYW1wbGVcIjtcbmltcG9ydCB7IEdyb3VwQnlQaXBlIH0gZnJvbSBcIi4vZ3JvdXAtYnlcIjtcbmltcG9ydCB7IEZpbHRlckJ5UGlwZSB9IGZyb20gXCIuL2ZpbHRlci1ieVwiO1xuaW1wb3J0IHsgT3JkZXJCeVBpcGUgfSBmcm9tIFwiLi9vcmRlci1ieVwiO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgR3JvdXBCeUltcHVyZVBpcGUgfSBmcm9tIFwiLi9ncm91cC1ieS1pbXB1cmVcIjtcbmltcG9ydCB7IEZpbHRlckJ5SW1wdXJlUGlwZSB9IGZyb20gXCIuL2ZpbHRlci1ieS1pbXB1cmVcIjtcbmltcG9ydCB7IE9yZGVyQnlJbXB1cmVQaXBlIH0gZnJvbSBcIi4vb3JkZXItYnktaW1wdXJlXCI7XG5pbXBvcnQgeyBSYW5nZVBpcGUgfSBmcm9tIFwiLi9yYW5nZVwiO1xuXG5jb25zdCBBUlJBWV9QSVBFUyA9IFtcbiAgRGlmZlBpcGUsXG4gIEZsYXR0ZW5QaXBlLFxuICBJbml0aWFsUGlwZSxcbiAgSW50ZXJzZWN0aW9uUGlwZSxcbiAgUmV2ZXJzZVBpcGUsXG4gIFRhaWxQaXBlLFxuICBUcnVydGhpZnlQaXBlLFxuICBVbmlvblBpcGUsXG4gIFVuaXF1ZVBpcGUsXG4gIFdpdGhvdXRQaXBlLFxuICBQbHVja1BpcGUsXG4gIFNodWZmbGVQaXBlLFxuICBFdmVyeVBpcGUsXG4gIFNvbWVQaXBlLFxuICBTYW1wbGVQaXBlLFxuICBHcm91cEJ5UGlwZSxcbiAgR3JvdXBCeUltcHVyZVBpcGUsXG4gIEZpbHRlckJ5UGlwZSxcbiAgRmlsdGVyQnlJbXB1cmVQaXBlLFxuICBPcmRlckJ5UGlwZSxcbiAgT3JkZXJCeUltcHVyZVBpcGUsXG4gIFJhbmdlUGlwZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogQVJSQVlfUElQRVMsXG4gIGltcG9ydHM6IFtdLFxuICBleHBvcnRzOiBBUlJBWV9QSVBFUyxcbn0pXG5leHBvcnQgY2xhc3MgTmdBcnJheVBpcGVzTW9kdWxlIHt9XG5cbmV4cG9ydCB7IERpZmZQaXBlIH0gZnJvbSBcIi4vZGlmZlwiO1xuZXhwb3J0IHsgSW5pdGlhbFBpcGUgfSBmcm9tIFwiLi9pbml0aWFsXCI7XG5leHBvcnQgeyBGbGF0dGVuUGlwZSB9IGZyb20gXCIuL2ZsYXR0ZW5cIjtcbmV4cG9ydCB7IEludGVyc2VjdGlvblBpcGUgfSBmcm9tIFwiLi9pbnRlcnNlY3Rpb25cIjtcbmV4cG9ydCB7IFJldmVyc2VQaXBlIH0gZnJvbSBcIi4vcmV2ZXJzZVwiO1xuZXhwb3J0IHsgVGFpbFBpcGUgfSBmcm9tIFwiLi90YWlsXCI7XG5leHBvcnQgeyBUcnVydGhpZnlQaXBlIH0gZnJvbSBcIi4vdHJ1dGhpZnlcIjtcbmV4cG9ydCB7IFVuaW9uUGlwZSB9IGZyb20gXCIuL3VuaW9uXCI7XG5leHBvcnQgeyBVbmlxdWVQaXBlIH0gZnJvbSBcIi4vdW5pcXVlXCI7XG5leHBvcnQgeyBXaXRob3V0UGlwZSB9IGZyb20gXCIuL3dpdGhvdXRcIjtcbmV4cG9ydCB7IFBsdWNrUGlwZSB9IGZyb20gXCIuL3BsdWNrXCI7XG5leHBvcnQgeyBTaHVmZmxlUGlwZSB9IGZyb20gXCIuL3NodWZmbGVcIjtcbmV4cG9ydCB7IEV2ZXJ5UGlwZSB9IGZyb20gXCIuL2V2ZXJ5XCI7XG5leHBvcnQgeyBTb21lUGlwZSB9IGZyb20gXCIuL3NvbWVcIjtcbmV4cG9ydCB7IFNhbXBsZVBpcGUgfSBmcm9tIFwiLi9zYW1wbGVcIjtcbmV4cG9ydCB7IEdyb3VwQnlQaXBlIH0gZnJvbSBcIi4vZ3JvdXAtYnlcIjtcbmV4cG9ydCB7IEZpbHRlckJ5UGlwZSB9IGZyb20gXCIuL2ZpbHRlci1ieVwiO1xuZXhwb3J0IHsgT3JkZXJCeVBpcGUgfSBmcm9tIFwiLi9vcmRlci1ieVwiO1xuZXhwb3J0IHsgR3JvdXBCeUltcHVyZVBpcGUgfSBmcm9tIFwiLi9ncm91cC1ieS1pbXB1cmVcIjtcbmV4cG9ydCB7IEZpbHRlckJ5SW1wdXJlUGlwZSB9IGZyb20gXCIuL2ZpbHRlci1ieS1pbXB1cmVcIjtcbmV4cG9ydCB7IE9yZGVyQnlJbXB1cmVQaXBlIH0gZnJvbSBcIi4vb3JkZXItYnktaW1wdXJlXCI7XG5leHBvcnQgeyBSYW5nZVBpcGUgfSBmcm9tIFwiLi9yYW5nZVwiO1xuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcImtleXNcIiB9KVxuZXhwb3J0IGNsYXNzIEtleXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShvYmo6IGFueSk6IGFueVtdIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopIHx8ICFpc09iamVjdChvYmopKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG5AUGlwZSh7IG5hbWU6IFwidmFsdWVzXCIgfSlcbmV4cG9ydCBjbGFzcyBWYWx1ZXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShvYmo6IGFueSk6IGFueVtdIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopIHx8ICFpc09iamVjdChvYmopKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChrID0+IG9ialtrXSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJwYWlyc1wiIH0pXG5leHBvcnQgY2xhc3MgUGFpcnNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShvYmo6IGFueSk6IGFueVtdIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopIHx8ICFpc09iamVjdChvYmopKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChrID0+IFtrLCBvYmpba11dKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcInBpY2tcIiB9KVxuZXhwb3J0IGNsYXNzIFBpY2tQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShvYmo6IGFueSwgLi4uYXJnczogQXJyYXk8c3RyaW5nPik6IE9iamVjdCB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSB8fCAhaXNPYmplY3Qob2JqKSkge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJncy5yZWR1Y2UoKG8sIGspID0+IHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG8sIHsgW2tdOiBvYmpba10gfSk7XG4gICAgfSwge30pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG5AUGlwZSh7IG5hbWU6IFwib21pdFwiIH0pXG5leHBvcnQgY2xhc3MgT21pdFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKG9iajogYW55LCAuLi5hcmdzOiBBcnJheTxzdHJpbmc+KTogT2JqZWN0IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopIHx8ICFpc09iamVjdChvYmopKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICBPYmplY3Qua2V5cyhvYmopXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1iaXR3aXNlXG4gICAgICAgIC5maWx0ZXIoayA9PiAhfmFyZ3MuaW5kZXhPZihrKSlcbiAgICAgICAgLnJlZHVjZSgobywgaykgPT4ge1xuICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG8sIHsgW2tdOiBvYmpba10gfSk7XG4gICAgICAgIH0sIHt9KVxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJpbnZlcnRcIiB9KVxuZXhwb3J0IGNsYXNzIEludmVydFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKG9iajogYW55KTogT2JqZWN0IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopIHx8ICFpc09iamVjdChvYmopKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZSgobywgaykgPT4ge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obywgeyBbb2JqW2tdXTogayB9KTtcbiAgICB9LCB7fSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJpbnZlcnRCeVwiIH0pXG5leHBvcnQgY2xhc3MgSW52ZXJ0QnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShvYmo6IGFueSwgY2I/OiBGdW5jdGlvbik6IE9iamVjdCB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSB8fCAhaXNPYmplY3Qob2JqKSkge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5yZWR1Y2UoKG86IGFueSwgazogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBjYiA/IGNiKG9ialtrXSkgOiBvYmpba107XG5cbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KG9ba2V5XSkgPyAob1trZXldLnB1c2goayksIG8pIDogT2JqZWN0LmFzc2lnbihvLCB7IFtrZXldOiBba10gfSk7XG4gICAgfSwge30pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGdldEtleXNUd29PYmplY3RzLCBpc0RlZXBFcXVhbCwgaXNPYmplY3QgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJkaWZmT2JqXCIgfSlcbmV4cG9ydCBjbGFzcyBEaWZmT2JqUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0ob2JqOiBhbnksIG9yaWdpbmFsOiBhbnkgPSB7fSk6IGFueSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSB8fCBBcnJheS5pc0FycmF5KG9yaWdpbmFsKSB8fCAhaXNPYmplY3Qob2JqKSB8fCAhaXNPYmplY3Qob3JpZ2luYWwpKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldEtleXNUd29PYmplY3RzKG9iaiwgb3JpZ2luYWwpLnJlZHVjZSgoZGlmZjogYW55LCBrZXk6IGFueSkgPT4ge1xuICAgICAgaWYgKCFpc0RlZXBFcXVhbChvcmlnaW5hbFtrZXldLCBvYmpba2V5XSkpIHtcbiAgICAgICAgZGlmZltrZXldID0gb2JqW2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkaWZmO1xuICAgIH0sIHt9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgS2V5c1BpcGUgfSBmcm9tIFwiLi9rZXlzXCI7XG5pbXBvcnQgeyBWYWx1ZXNQaXBlIH0gZnJvbSBcIi4vdmFsdWVzXCI7XG5pbXBvcnQgeyBQYWlyc1BpcGUgfSBmcm9tIFwiLi9wYWlyc1wiO1xuaW1wb3J0IHsgUGlja1BpcGUgfSBmcm9tIFwiLi9waWNrXCI7XG5pbXBvcnQgeyBPbWl0UGlwZSB9IGZyb20gXCIuL29taXRcIjtcbmltcG9ydCB7IEludmVydFBpcGUgfSBmcm9tIFwiLi9pbnZlcnRcIjtcbmltcG9ydCB7IEludmVydEJ5UGlwZSB9IGZyb20gXCIuL2ludmVydC1ieVwiO1xuaW1wb3J0IHsgRGlmZk9ialBpcGUgfSBmcm9tIFwiLi9kaWZmLW9ialwiO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5jb25zdCBPQkpFQ1RfUElQRVMgPSBbS2V5c1BpcGUsIFZhbHVlc1BpcGUsIFBhaXJzUGlwZSwgUGlja1BpcGUsIEludmVydFBpcGUsIEludmVydEJ5UGlwZSwgT21pdFBpcGUsIERpZmZPYmpQaXBlXTtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBPQkpFQ1RfUElQRVMsXG4gIGltcG9ydHM6IFtdLFxuICBleHBvcnRzOiBPQkpFQ1RfUElQRVMsXG59KVxuZXhwb3J0IGNsYXNzIE5nT2JqZWN0UGlwZXNNb2R1bGUge31cblxuZXhwb3J0IHsgS2V5c1BpcGUgfSBmcm9tIFwiLi9rZXlzXCI7XG5leHBvcnQgeyBWYWx1ZXNQaXBlIH0gZnJvbSBcIi4vdmFsdWVzXCI7XG5leHBvcnQgeyBQYWlyc1BpcGUgfSBmcm9tIFwiLi9wYWlyc1wiO1xuZXhwb3J0IHsgUGlja1BpcGUgfSBmcm9tIFwiLi9waWNrXCI7XG5leHBvcnQgeyBPbWl0UGlwZSB9IGZyb20gXCIuL29taXRcIjtcbmV4cG9ydCB7IEludmVydFBpcGUgfSBmcm9tIFwiLi9pbnZlcnRcIjtcbmV4cG9ydCB7IEludmVydEJ5UGlwZSB9IGZyb20gXCIuL2ludmVydC1ieVwiO1xuZXhwb3J0IHsgRGlmZk9ialBpcGUgfSBmcm9tIFwiLi9kaWZmLW9ialwiO1xuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcInVjd29yZHNcIiB9KVxuZXhwb3J0IGNsYXNzIFVjV29yZHNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogc3RyaW5nKTogc3RyaW5nO1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGFueTtcblxuICB0cmFuc2Zvcm0odGV4dDogYW55KTogc3RyaW5nIHtcbiAgICBpZiAoaXNTdHJpbmcodGV4dCkpIHtcbiAgICAgIHJldHVybiB0ZXh0XG4gICAgICAgIC5zcGxpdChcIiBcIilcbiAgICAgICAgLm1hcCgoc3ViOiBhbnkpID0+IHN1Yi5zbGljZSgwLCAxKS50b1VwcGVyQ2FzZSgpICsgc3ViLnNsaWNlKDEpKVxuICAgICAgICAuam9pbihcIiBcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJsdHJpbVwiIH0pXG5leHBvcnQgY2xhc3MgTGVmdFRyaW1QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybSh0ZXh0OiBzdHJpbmcsIGNoYXJzOiBzdHJpbmcgPSBcIlxcXFxzXCIpOiBzdHJpbmcge1xuICAgIHJldHVybiBpc1N0cmluZyh0ZXh0KSA/IHRleHQucmVwbGFjZShuZXcgUmVnRXhwKGBeWyR7Y2hhcnN9XStgKSwgXCJcIikgOiB0ZXh0O1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG5AUGlwZSh7IG5hbWU6IFwicmVwZWF0XCIgfSlcbmV4cG9ydCBjbGFzcyBSZXBlYXRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShzdHI6IHN0cmluZywgbjogbnVtYmVyID0gMSwgc2VwYXJhdG9yOiBzdHJpbmcgPSBcIlwiKTogc3RyaW5nIHtcbiAgICBpZiAobiA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigpO1xuICAgIH1cblxuICAgIHJldHVybiBuID09PSAxID8gc3RyIDogdGhpcy5yZXBlYXQoc3RyLCBuIC0gMSwgc2VwYXJhdG9yKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVwZWF0KHN0cjogc3RyaW5nLCBuOiBudW1iZXIsIHNlcGFyYXRvcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gaXNTdHJpbmcoc3RyKSA/IChuID09PSAwID8gc3RyIDogc3RyICsgc2VwYXJhdG9yICsgdGhpcy5yZXBlYXQoc3RyLCBuIC0gMSwgc2VwYXJhdG9yKSkgOiBzdHI7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJydHJpbVwiIH0pXG5leHBvcnQgY2xhc3MgUmlnaHRUcmltUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0odGV4dDogc3RyaW5nLCBjaGFyczogc3RyaW5nID0gXCJcXFxcc1wiKTogc3RyaW5nIHtcbiAgICByZXR1cm4gaXNTdHJpbmcodGV4dCkgPyB0ZXh0LnJlcGxhY2UobmV3IFJlZ0V4cChgWyR7Y2hhcnN9XSskYCksIFwiXCIpIDogdGV4dDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBpc1N0cmluZywgaXNVbmRlZmluZWQgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJzY2FuXCIgfSlcbmV4cG9ydCBjbGFzcyBTY2FuUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0odGV4dDogc3RyaW5nLCBhcmdzOiBzdHJpbmdbXSA9IFtdKTogc3RyaW5nIHtcbiAgICByZXR1cm4gaXNTdHJpbmcodGV4dClcbiAgICAgID8gdGV4dC5yZXBsYWNlKC9cXHsoXFxkKyl9L2csIChtYXRjaCwgaW5kZXgpID0+ICghaXNVbmRlZmluZWQoYXJnc1tpbmRleF0pID8gYXJnc1tpbmRleF0gOiBtYXRjaCkpXG4gICAgICA6IHRleHQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJzaG9ydGVuXCIgfSlcbmV4cG9ydCBjbGFzcyBTaG9ydGVuUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IHN0cmluZywgbGVuZ3RoPzogbnVtYmVyLCBzdWZmaXg/OiBzdHJpbmcsIHdvcmRCcmVhaz86IGJvb2xlYW4pOiBzdHJpbmc7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBsZW5ndGg/OiBudW1iZXIsIHN1ZmZpeD86IHN0cmluZywgd29yZEJyZWFrPzogYm9vbGVhbik6IGFueTtcblxuICB0cmFuc2Zvcm0odGV4dDogYW55LCBsZW5ndGg6IG51bWJlciA9IDAsIHN1ZmZpeDogc3RyaW5nID0gXCJcIiwgd29yZEJyZWFrOiBib29sZWFuID0gdHJ1ZSk6IHN0cmluZyB7XG4gICAgaWYgKCFpc1N0cmluZyh0ZXh0KSkge1xuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgaWYgKHRleHQubGVuZ3RoID4gbGVuZ3RoKSB7XG4gICAgICBpZiAod29yZEJyZWFrKSB7XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKDAsIGxlbmd0aCkgKyBzdWZmaXg7XG4gICAgICB9XG5cbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1iaXR3aXNlXG4gICAgICBpZiAoISF+dGV4dC5pbmRleE9mKFwiIFwiLCBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKDAsIHRleHQuaW5kZXhPZihcIiBcIiwgbGVuZ3RoKSkgKyBzdWZmaXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwic3RyaXBUYWdzXCIgfSlcbmV4cG9ydCBjbGFzcyBTdHJpcFRhZ3NQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybSh0ZXh0OiBzdHJpbmcsIC4uLmFsbG93ZWRUYWdzOiBhbnlbXSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGFsbG93ZWRUYWdzLmxlbmd0aCA+IDBcbiAgICAgID8gdGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAoYDwoPyFcXC8/KCR7YWxsb3dlZFRhZ3Muam9pbihcInxcIil9KVxccypcXC8/KVtePl0rPmAsIFwiZ1wiKSwgXCJcIilcbiAgICAgIDogdGV4dC5yZXBsYWNlKC88KD86LnxcXHMpKj8+L2csIFwiXCIpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG5AUGlwZSh7IG5hbWU6IFwidHJpbVwiIH0pXG5leHBvcnQgY2xhc3MgVHJpbVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKHRleHQ6IHN0cmluZywgY2hhcnM6IHN0cmluZyA9IFwiXFxcXHNcIik6IHN0cmluZyB7XG4gICAgcmV0dXJuIGlzU3RyaW5nKHRleHQpID8gdGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAoYF5bJHtjaGFyc31dK3xbJHtjaGFyc31dKyRgLCBcImdcIiksIFwiXCIpIDogdGV4dDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcInVjZmlyc3RcIiB9KVxuZXhwb3J0IGNsYXNzIFVjRmlyc3RQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogc3RyaW5nKTogc3RyaW5nO1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGFueTtcblxuICB0cmFuc2Zvcm0odGV4dDogYW55KTogc3RyaW5nIHtcbiAgICByZXR1cm4gaXNTdHJpbmcodGV4dCkgPyB0ZXh0LnNsaWNlKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyB0ZXh0LnNsaWNlKDEpIDogdGV4dDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcInNsdWdpZnlcIiB9KVxuZXhwb3J0IGNsYXNzIFNsdWdpZnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGlzU3RyaW5nKHN0cilcbiAgICAgID8gc3RyXG4gICAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgLnJlcGxhY2UoL1teXFx3XFwtXSsvZywgXCIgXCIpXG4gICAgICAgICAgLnJlcGxhY2UoL1xccysvZywgXCItXCIpXG4gICAgICA6IHN0cjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcImNhbWVsaXplXCIgfSlcbmV4cG9ydCBjbGFzcyBDYW1lbGl6ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBzdHJpbmcsIGNoYXJzPzogc3RyaW5nKTogc3RyaW5nO1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgY2hhcnM/OiBzdHJpbmcpOiBhbnk7XG5cbiAgdHJhbnNmb3JtKHRleHQ6IGFueSwgY2hhcnM6IHN0cmluZyA9IFwiXFxcXHNcIik6IHN0cmluZyB7XG4gICAgaWYgKCFpc1N0cmluZyh0ZXh0KSkge1xuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRleHRcbiAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAuc3BsaXQoL1stX1xcc10vZylcbiAgICAgIC5maWx0ZXIoKHY6IHN0cmluZykgPT4gISF2KVxuICAgICAgLm1hcCgod29yZDogc3RyaW5nLCBrZXk6IGFueSkgPT4ge1xuICAgICAgICByZXR1cm4gIWtleSA/IHdvcmQgOiB3b3JkLnNsaWNlKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnNsaWNlKDEpO1xuICAgICAgfSlcbiAgICAgIC5qb2luKFwiXCIpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG5AUGlwZSh7IG5hbWU6IFwibGF0aW5pc2VcIiB9KVxuZXhwb3J0IGNsYXNzIExhdGluaXNlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAvLyBTb3VyY2U6IGh0dHA6Ly9zZW1wbGljZXdlYnNpdGVzLmNvbS9yZW1vdmluZy1hY2NlbnRzLWphdmFzY3JpcHRcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lIHdoaXRlc3BhY2UgbWF4LWxpbmUtbGVuZ3RoIG9iamVjdC1saXRlcmFsLWtleS1xdW90ZXNcbiAgcHJpdmF0ZSBsYXRpbk1hcDogYW55ID0ge1xuICAgIMODwoE6IFwiQVwiLFxuICAgIMOEwoI6IFwiQVwiLFxuICAgIMOhwrrCrjogXCJBXCIsXG4gICAgw6HCusK2OiBcIkFcIixcbiAgICDDocK6wrA6IFwiQVwiLFxuICAgIMOhwrrCsjogXCJBXCIsXG4gICAgw6HCusK0OiBcIkFcIixcbiAgICDDh8KNOiBcIkFcIixcbiAgICDDg8KCOiBcIkFcIixcbiAgICDDocK6wqQ6IFwiQVwiLFxuICAgIMOhwrrCrDogXCJBXCIsXG4gICAgw6HCusKmOiBcIkFcIixcbiAgICDDocK6wqg6IFwiQVwiLFxuICAgIMOhwrrCqjogXCJBXCIsXG4gICAgw4PChDogXCJBXCIsXG4gICAgw4fCnjogXCJBXCIsXG4gICAgw4jCpjogXCJBXCIsXG4gICAgw4fCoDogXCJBXCIsXG4gICAgw6HCusKgOiBcIkFcIixcbiAgICDDiMKAOiBcIkFcIixcbiAgICDDg8KAOiBcIkFcIixcbiAgICDDocK6wqI6IFwiQVwiLFxuICAgIMOIwoI6IFwiQVwiLFxuICAgIMOEwoA6IFwiQVwiLFxuICAgIMOEwoQ6IFwiQVwiLFxuICAgIMODwoU6IFwiQVwiLFxuICAgIMOHwro6IFwiQVwiLFxuICAgIMOhwrjCgDogXCJBXCIsXG4gICAgw4jCujogXCJBXCIsXG4gICAgw4PCgzogXCJBXCIsXG4gICAgw6rCnMKyOiBcIkFBXCIsXG4gICAgw4PChjogXCJBRVwiLFxuICAgIMOHwrw6IFwiQUVcIixcbiAgICDDh8KiOiBcIkFFXCIsXG4gICAgw6rCnMK0OiBcIkFPXCIsXG4gICAgw6rCnMK2OiBcIkFVXCIsXG4gICAgw6rCnMK4OiBcIkFWXCIsXG4gICAgw6rCnMK6OiBcIkFWXCIsXG4gICAgw6rCnMK8OiBcIkFZXCIsXG4gICAgw6HCuMKCOiBcIkJcIixcbiAgICDDocK4woQ6IFwiQlwiLFxuICAgIMOGwoE6IFwiQlwiLFxuICAgIMOhwrjChjogXCJCXCIsXG4gICAgw4nCgzogXCJCXCIsXG4gICAgw4bCgjogXCJCXCIsXG4gICAgw4TChjogXCJDXCIsXG4gICAgw4TCjDogXCJDXCIsXG4gICAgw4PChzogXCJDXCIsXG4gICAgw6HCuMKIOiBcIkNcIixcbiAgICDDhMKIOiBcIkNcIixcbiAgICDDhMKKOiBcIkNcIixcbiAgICDDhsKHOiBcIkNcIixcbiAgICDDiMK7OiBcIkNcIixcbiAgICDDhMKOOiBcIkRcIixcbiAgICDDocK4wpA6IFwiRFwiLFxuICAgIMOhwrjCkjogXCJEXCIsXG4gICAgw6HCuMKKOiBcIkRcIixcbiAgICDDocK4wow6IFwiRFwiLFxuICAgIMOGwoo6IFwiRFwiLFxuICAgIMOhwrjCjjogXCJEXCIsXG4gICAgw4fCsjogXCJEXCIsXG4gICAgw4fChTogXCJEXCIsXG4gICAgw4TCkDogXCJEXCIsXG4gICAgw4bCizogXCJEXCIsXG4gICAgw4fCsTogXCJEWlwiLFxuICAgIMOHwoQ6IFwiRFpcIixcbiAgICDDg8KJOiBcIkVcIixcbiAgICDDhMKUOiBcIkVcIixcbiAgICDDhMKaOiBcIkVcIixcbiAgICDDiMKoOiBcIkVcIixcbiAgICDDocK4wpw6IFwiRVwiLFxuICAgIMODwoo6IFwiRVwiLFxuICAgIMOhwrrCvjogXCJFXCIsXG4gICAgw6HCu8KGOiBcIkVcIixcbiAgICDDocK7woA6IFwiRVwiLFxuICAgIMOhwrvCgjogXCJFXCIsXG4gICAgw6HCu8KEOiBcIkVcIixcbiAgICDDocK4wpg6IFwiRVwiLFxuICAgIMODwos6IFwiRVwiLFxuICAgIMOEwpY6IFwiRVwiLFxuICAgIMOhwrrCuDogXCJFXCIsXG4gICAgw4jChDogXCJFXCIsXG4gICAgw4PCiDogXCJFXCIsXG4gICAgw6HCusK6OiBcIkVcIixcbiAgICDDiMKGOiBcIkVcIixcbiAgICDDhMKSOiBcIkVcIixcbiAgICDDocK4wpY6IFwiRVwiLFxuICAgIMOhwrjClDogXCJFXCIsXG4gICAgw4TCmDogXCJFXCIsXG4gICAgw4nChjogXCJFXCIsXG4gICAgw6HCusK8OiBcIkVcIixcbiAgICDDocK4wpo6IFwiRVwiLFxuICAgIMOqwp3CqjogXCJFVFwiLFxuICAgIMOhwrjCnjogXCJGXCIsXG4gICAgw4bCkTogXCJGXCIsXG4gICAgw4fCtDogXCJHXCIsXG4gICAgw4TCnjogXCJHXCIsXG4gICAgw4fCpjogXCJHXCIsXG4gICAgw4TCojogXCJHXCIsXG4gICAgw4TCnDogXCJHXCIsXG4gICAgw4TCoDogXCJHXCIsXG4gICAgw4bCkzogXCJHXCIsXG4gICAgw6HCuMKgOiBcIkdcIixcbiAgICDDh8KkOiBcIkdcIixcbiAgICDDocK4wqo6IFwiSFwiLFxuICAgIMOIwp46IFwiSFwiLFxuICAgIMOhwrjCqDogXCJIXCIsXG4gICAgw4TCpDogXCJIXCIsXG4gICAgw6LCscKnOiBcIkhcIixcbiAgICDDocK4wqY6IFwiSFwiLFxuICAgIMOhwrjCojogXCJIXCIsXG4gICAgw6HCuMKkOiBcIkhcIixcbiAgICDDhMKmOiBcIkhcIixcbiAgICDDg8KNOiBcIklcIixcbiAgICDDhMKsOiBcIklcIixcbiAgICDDh8KPOiBcIklcIixcbiAgICDDg8KOOiBcIklcIixcbiAgICDDg8KPOiBcIklcIixcbiAgICDDocK4wq46IFwiSVwiLFxuICAgIMOEwrA6IFwiSVwiLFxuICAgIMOhwrvCijogXCJJXCIsXG4gICAgw4jCiDogXCJJXCIsXG4gICAgw4PCjDogXCJJXCIsXG4gICAgw6HCu8KIOiBcIklcIixcbiAgICDDiMKKOiBcIklcIixcbiAgICDDhMKqOiBcIklcIixcbiAgICDDhMKuOiBcIklcIixcbiAgICDDhsKXOiBcIklcIixcbiAgICDDhMKoOiBcIklcIixcbiAgICDDocK4wqw6IFwiSVwiLFxuICAgIMOqwp3CuTogXCJEXCIsXG4gICAgw6rCncK7OiBcIkZcIixcbiAgICDDqsKdwr06IFwiR1wiLFxuICAgIMOqwp7CgjogXCJSXCIsXG4gICAgw6rCnsKEOiBcIlNcIixcbiAgICDDqsKewoY6IFwiVFwiLFxuICAgIMOqwp3CrDogXCJJU1wiLFxuICAgIMOEwrQ6IFwiSlwiLFxuICAgIMOJwog6IFwiSlwiLFxuICAgIMOhwrjCsDogXCJLXCIsXG4gICAgw4fCqDogXCJLXCIsXG4gICAgw4TCtjogXCJLXCIsXG4gICAgw6LCscKpOiBcIktcIixcbiAgICDDqsKdwoI6IFwiS1wiLFxuICAgIMOhwrjCsjogXCJLXCIsXG4gICAgw4bCmDogXCJLXCIsXG4gICAgw6HCuMK0OiBcIktcIixcbiAgICDDqsKdwoA6IFwiS1wiLFxuICAgIMOqwp3ChDogXCJLXCIsXG4gICAgw4TCuTogXCJMXCIsXG4gICAgw4jCvTogXCJMXCIsXG4gICAgw4TCvTogXCJMXCIsXG4gICAgw4TCuzogXCJMXCIsXG4gICAgw6HCuMK8OiBcIkxcIixcbiAgICDDocK4wrY6IFwiTFwiLFxuICAgIMOhwrjCuDogXCJMXCIsXG4gICAgw6LCscKgOiBcIkxcIixcbiAgICDDqsKdwog6IFwiTFwiLFxuICAgIMOhwrjCujogXCJMXCIsXG4gICAgw4TCvzogXCJMXCIsXG4gICAgw6LCscKiOiBcIkxcIixcbiAgICDDh8KIOiBcIkxcIixcbiAgICDDhcKBOiBcIkxcIixcbiAgICDDh8KHOiBcIkxKXCIsXG4gICAgw6HCuMK+OiBcIk1cIixcbiAgICDDocK5woA6IFwiTVwiLFxuICAgIMOhwrnCgjogXCJNXCIsXG4gICAgw6LCscKuOiBcIk1cIixcbiAgICDDhcKDOiBcIk5cIixcbiAgICDDhcKHOiBcIk5cIixcbiAgICDDhcKFOiBcIk5cIixcbiAgICDDocK5woo6IFwiTlwiLFxuICAgIMOhwrnChDogXCJOXCIsXG4gICAgw6HCucKGOiBcIk5cIixcbiAgICDDh8K4OiBcIk5cIixcbiAgICDDhsKdOiBcIk5cIixcbiAgICDDocK5wog6IFwiTlwiLFxuICAgIMOIwqA6IFwiTlwiLFxuICAgIMOHwos6IFwiTlwiLFxuICAgIMODwpE6IFwiTlwiLFxuICAgIMOHwoo6IFwiTkpcIixcbiAgICDDg8KTOiBcIk9cIixcbiAgICDDhcKOOiBcIk9cIixcbiAgICDDh8KROiBcIk9cIixcbiAgICDDg8KUOiBcIk9cIixcbiAgICDDocK7wpA6IFwiT1wiLFxuICAgIMOhwrvCmDogXCJPXCIsXG4gICAgw6HCu8KSOiBcIk9cIixcbiAgICDDocK7wpQ6IFwiT1wiLFxuICAgIMOhwrvCljogXCJPXCIsXG4gICAgw4PCljogXCJPXCIsXG4gICAgw4jCqjogXCJPXCIsXG4gICAgw4jCrjogXCJPXCIsXG4gICAgw4jCsDogXCJPXCIsXG4gICAgw6HCu8KMOiBcIk9cIixcbiAgICDDhcKQOiBcIk9cIixcbiAgICDDiMKMOiBcIk9cIixcbiAgICDDg8KSOiBcIk9cIixcbiAgICDDocK7wo46IFwiT1wiLFxuICAgIMOGwqA6IFwiT1wiLFxuICAgIMOhwrvCmjogXCJPXCIsXG4gICAgw6HCu8KiOiBcIk9cIixcbiAgICDDocK7wpw6IFwiT1wiLFxuICAgIMOhwrvCnjogXCJPXCIsXG4gICAgw6HCu8KgOiBcIk9cIixcbiAgICDDiMKOOiBcIk9cIixcbiAgICDDqsKdwoo6IFwiT1wiLFxuICAgIMOqwp3CjDogXCJPXCIsXG4gICAgw4XCjDogXCJPXCIsXG4gICAgw6HCucKSOiBcIk9cIixcbiAgICDDocK5wpA6IFwiT1wiLFxuICAgIMOGwp86IFwiT1wiLFxuICAgIMOHwqo6IFwiT1wiLFxuICAgIMOHwqw6IFwiT1wiLFxuICAgIMODwpg6IFwiT1wiLFxuICAgIMOHwr46IFwiT1wiLFxuICAgIMODwpU6IFwiT1wiLFxuICAgIMOhwrnCjDogXCJPXCIsXG4gICAgw6HCucKOOiBcIk9cIixcbiAgICDDiMKsOiBcIk9cIixcbiAgICDDhsKiOiBcIk9JXCIsXG4gICAgw6rCncKOOiBcIk9PXCIsXG4gICAgw4bCkDogXCJFXCIsXG4gICAgw4bChjogXCJPXCIsXG4gICAgw4jCojogXCJPVVwiLFxuICAgIMOhwrnClDogXCJQXCIsXG4gICAgw6HCucKWOiBcIlBcIixcbiAgICDDqsKdwpI6IFwiUFwiLFxuICAgIMOGwqQ6IFwiUFwiLFxuICAgIMOqwp3ClDogXCJQXCIsXG4gICAgw6LCscKjOiBcIlBcIixcbiAgICDDqsKdwpA6IFwiUFwiLFxuICAgIMOqwp3CmDogXCJRXCIsXG4gICAgw6rCncKWOiBcIlFcIixcbiAgICDDhcKUOiBcIlJcIixcbiAgICDDhcKYOiBcIlJcIixcbiAgICDDhcKWOiBcIlJcIixcbiAgICDDocK5wpg6IFwiUlwiLFxuICAgIMOhwrnCmjogXCJSXCIsXG4gICAgw6HCucKcOiBcIlJcIixcbiAgICDDiMKQOiBcIlJcIixcbiAgICDDiMKSOiBcIlJcIixcbiAgICDDocK5wp46IFwiUlwiLFxuICAgIMOJwow6IFwiUlwiLFxuICAgIMOiwrHCpDogXCJSXCIsXG4gICAgw6rCnMK+OiBcIkNcIixcbiAgICDDhsKOOiBcIkVcIixcbiAgICDDhcKaOiBcIlNcIixcbiAgICDDocK5wqQ6IFwiU1wiLFxuICAgIMOFwqA6IFwiU1wiLFxuICAgIMOhwrnCpjogXCJTXCIsXG4gICAgw4XCnjogXCJTXCIsXG4gICAgw4XCnDogXCJTXCIsXG4gICAgw4jCmDogXCJTXCIsXG4gICAgw6HCucKgOiBcIlNcIixcbiAgICDDocK5wqI6IFwiU1wiLFxuICAgIMOhwrnCqDogXCJTXCIsXG4gICAgw6HCusKeOiBcIlNTXCIsXG4gICAgw4XCpDogXCJUXCIsXG4gICAgw4XCojogXCJUXCIsXG4gICAgw6HCucKwOiBcIlRcIixcbiAgICDDiMKaOiBcIlRcIixcbiAgICDDiMK+OiBcIlRcIixcbiAgICDDocK5wqo6IFwiVFwiLFxuICAgIMOhwrnCrDogXCJUXCIsXG4gICAgw4bCrDogXCJUXCIsXG4gICAgw6HCucKuOiBcIlRcIixcbiAgICDDhsKuOiBcIlRcIixcbiAgICDDhcKmOiBcIlRcIixcbiAgICDDosKxwq86IFwiQVwiLFxuICAgIMOqwp7CgDogXCJMXCIsXG4gICAgw4bCnDogXCJNXCIsXG4gICAgw4nChTogXCJWXCIsXG4gICAgw6rCnMKoOiBcIlRaXCIsXG4gICAgw4PCmjogXCJVXCIsXG4gICAgw4XCrDogXCJVXCIsXG4gICAgw4fCkzogXCJVXCIsXG4gICAgw4PCmzogXCJVXCIsXG4gICAgw6HCucK2OiBcIlVcIixcbiAgICDDg8KcOiBcIlVcIixcbiAgICDDh8KXOiBcIlVcIixcbiAgICDDh8KZOiBcIlVcIixcbiAgICDDh8KbOiBcIlVcIixcbiAgICDDh8KVOiBcIlVcIixcbiAgICDDocK5wrI6IFwiVVwiLFxuICAgIMOhwrvCpDogXCJVXCIsXG4gICAgw4XCsDogXCJVXCIsXG4gICAgw4jClDogXCJVXCIsXG4gICAgw4PCmTogXCJVXCIsXG4gICAgw6HCu8KmOiBcIlVcIixcbiAgICDDhsKvOiBcIlVcIixcbiAgICDDocK7wqg6IFwiVVwiLFxuICAgIMOhwrvCsDogXCJVXCIsXG4gICAgw6HCu8KqOiBcIlVcIixcbiAgICDDocK7wqw6IFwiVVwiLFxuICAgIMOhwrvCrjogXCJVXCIsXG4gICAgw4jCljogXCJVXCIsXG4gICAgw4XCqjogXCJVXCIsXG4gICAgw6HCucK6OiBcIlVcIixcbiAgICDDhcKyOiBcIlVcIixcbiAgICDDhcKuOiBcIlVcIixcbiAgICDDhcKoOiBcIlVcIixcbiAgICDDocK5wrg6IFwiVVwiLFxuICAgIMOhwrnCtDogXCJVXCIsXG4gICAgw6rCncKeOiBcIlZcIixcbiAgICDDocK5wr46IFwiVlwiLFxuICAgIMOGwrI6IFwiVlwiLFxuICAgIMOhwrnCvDogXCJWXCIsXG4gICAgw6rCncKgOiBcIlZZXCIsXG4gICAgw6HCusKCOiBcIldcIixcbiAgICDDhcK0OiBcIldcIixcbiAgICDDocK6woQ6IFwiV1wiLFxuICAgIMOhwrrChjogXCJXXCIsXG4gICAgw6HCusKIOiBcIldcIixcbiAgICDDocK6woA6IFwiV1wiLFxuICAgIMOiwrHCsjogXCJXXCIsXG4gICAgw6HCusKMOiBcIlhcIixcbiAgICDDocK6woo6IFwiWFwiLFxuICAgIMODwp06IFwiWVwiLFxuICAgIMOFwrY6IFwiWVwiLFxuICAgIMOFwrg6IFwiWVwiLFxuICAgIMOhwrrCjjogXCJZXCIsXG4gICAgw6HCu8K0OiBcIllcIixcbiAgICDDocK7wrI6IFwiWVwiLFxuICAgIMOGwrM6IFwiWVwiLFxuICAgIMOhwrvCtjogXCJZXCIsXG4gICAgw6HCu8K+OiBcIllcIixcbiAgICDDiMKyOiBcIllcIixcbiAgICDDicKOOiBcIllcIixcbiAgICDDocK7wrg6IFwiWVwiLFxuICAgIMOFwrk6IFwiWlwiLFxuICAgIMOFwr06IFwiWlwiLFxuICAgIMOhwrrCkDogXCJaXCIsXG4gICAgw6LCscKrOiBcIlpcIixcbiAgICDDhcK7OiBcIlpcIixcbiAgICDDocK6wpI6IFwiWlwiLFxuICAgIMOIwqQ6IFwiWlwiLFxuICAgIMOhwrrClDogXCJaXCIsXG4gICAgw4bCtTogXCJaXCIsXG4gICAgw4TCsjogXCJJSlwiLFxuICAgIMOFwpI6IFwiT0VcIixcbiAgICDDocK0woA6IFwiQVwiLFxuICAgIMOhwrTCgTogXCJBRVwiLFxuICAgIMOKwpk6IFwiQlwiLFxuICAgIMOhwrTCgzogXCJCXCIsXG4gICAgw6HCtMKEOiBcIkNcIixcbiAgICDDocK0woU6IFwiRFwiLFxuICAgIMOhwrTChzogXCJFXCIsXG4gICAgw6rCnMKwOiBcIkZcIixcbiAgICDDicKiOiBcIkdcIixcbiAgICDDisKbOiBcIkdcIixcbiAgICDDisKcOiBcIkhcIixcbiAgICDDicKqOiBcIklcIixcbiAgICDDisKBOiBcIlJcIixcbiAgICDDocK0woo6IFwiSlwiLFxuICAgIMOhwrTCizogXCJLXCIsXG4gICAgw4rCnzogXCJMXCIsXG4gICAgw6HCtMKMOiBcIkxcIixcbiAgICDDocK0wo06IFwiTVwiLFxuICAgIMOJwrQ6IFwiTlwiLFxuICAgIMOhwrTCjzogXCJPXCIsXG4gICAgw4nCtjogXCJPRVwiLFxuICAgIMOhwrTCkDogXCJPXCIsXG4gICAgw6HCtMKVOiBcIk9VXCIsXG4gICAgw6HCtMKYOiBcIlBcIixcbiAgICDDisKAOiBcIlJcIixcbiAgICDDocK0wo46IFwiTlwiLFxuICAgIMOhwrTCmTogXCJSXCIsXG4gICAgw6rCnMKxOiBcIlNcIixcbiAgICDDocK0wps6IFwiVFwiLFxuICAgIMOiwrHCuzogXCJFXCIsXG4gICAgw6HCtMKaOiBcIlJcIixcbiAgICDDocK0wpw6IFwiVVwiLFxuICAgIMOhwrTCoDogXCJWXCIsXG4gICAgw6HCtMKhOiBcIldcIixcbiAgICDDisKPOiBcIllcIixcbiAgICDDocK0wqI6IFwiWlwiLFxuICAgIMODwqE6IFwiYVwiLFxuICAgIMOEwoM6IFwiYVwiLFxuICAgIMOhwrrCrzogXCJhXCIsXG4gICAgw6HCusK3OiBcImFcIixcbiAgICDDocK6wrE6IFwiYVwiLFxuICAgIMOhwrrCszogXCJhXCIsXG4gICAgw6HCusK1OiBcImFcIixcbiAgICDDh8KOOiBcImFcIixcbiAgICDDg8KiOiBcImFcIixcbiAgICDDocK6wqU6IFwiYVwiLFxuICAgIMOhwrrCrTogXCJhXCIsXG4gICAgw6HCusKnOiBcImFcIixcbiAgICDDocK6wqk6IFwiYVwiLFxuICAgIMOhwrrCqzogXCJhXCIsXG4gICAgw4PCpDogXCJhXCIsXG4gICAgw4fCnzogXCJhXCIsXG4gICAgw4jCpzogXCJhXCIsXG4gICAgw4fCoTogXCJhXCIsXG4gICAgw6HCusKhOiBcImFcIixcbiAgICDDiMKBOiBcImFcIixcbiAgICDDg8KgOiBcImFcIixcbiAgICDDocK6wqM6IFwiYVwiLFxuICAgIMOIwoM6IFwiYVwiLFxuICAgIMOEwoE6IFwiYVwiLFxuICAgIMOEwoU6IFwiYVwiLFxuICAgIMOhwrbCjzogXCJhXCIsXG4gICAgw6HCusKaOiBcImFcIixcbiAgICDDg8KlOiBcImFcIixcbiAgICDDh8K7OiBcImFcIixcbiAgICDDocK4woE6IFwiYVwiLFxuICAgIMOiwrHCpTogXCJhXCIsXG4gICAgw4PCozogXCJhXCIsXG4gICAgw6rCnMKzOiBcImFhXCIsXG4gICAgw4PCpjogXCJhZVwiLFxuICAgIMOHwr06IFwiYWVcIixcbiAgICDDh8KjOiBcImFlXCIsXG4gICAgw6rCnMK1OiBcImFvXCIsXG4gICAgw6rCnMK3OiBcImF1XCIsXG4gICAgw6rCnMK5OiBcImF2XCIsXG4gICAgw6rCnMK7OiBcImF2XCIsXG4gICAgw6rCnMK9OiBcImF5XCIsXG4gICAgw6HCuMKDOiBcImJcIixcbiAgICDDocK4woU6IFwiYlwiLFxuICAgIMOJwpM6IFwiYlwiLFxuICAgIMOhwrjChzogXCJiXCIsXG4gICAgw6HCtcKsOiBcImJcIixcbiAgICDDocK2woA6IFwiYlwiLFxuICAgIMOGwoA6IFwiYlwiLFxuICAgIMOGwoM6IFwiYlwiLFxuICAgIMOJwrU6IFwib1wiLFxuICAgIMOEwoc6IFwiY1wiLFxuICAgIMOEwo06IFwiY1wiLFxuICAgIMODwqc6IFwiY1wiLFxuICAgIMOhwrjCiTogXCJjXCIsXG4gICAgw4TCiTogXCJjXCIsXG4gICAgw4nClTogXCJjXCIsXG4gICAgw4TCizogXCJjXCIsXG4gICAgw4bCiDogXCJjXCIsXG4gICAgw4jCvDogXCJjXCIsXG4gICAgw4TCjzogXCJkXCIsXG4gICAgw6HCuMKROiBcImRcIixcbiAgICDDocK4wpM6IFwiZFwiLFxuICAgIMOIwqE6IFwiZFwiLFxuICAgIMOhwrjCizogXCJkXCIsXG4gICAgw6HCuMKNOiBcImRcIixcbiAgICDDicKXOiBcImRcIixcbiAgICDDocK2wpE6IFwiZFwiLFxuICAgIMOhwrjCjzogXCJkXCIsXG4gICAgw6HCtcKtOiBcImRcIixcbiAgICDDocK2woE6IFwiZFwiLFxuICAgIMOEwpE6IFwiZFwiLFxuICAgIMOJwpY6IFwiZFwiLFxuICAgIMOGwow6IFwiZFwiLFxuICAgIMOEwrE6IFwiaVwiLFxuICAgIMOIwrc6IFwialwiLFxuICAgIMOJwp86IFwialwiLFxuICAgIMOKwoQ6IFwialwiLFxuICAgIMOHwrM6IFwiZHpcIixcbiAgICDDh8KGOiBcImR6XCIsXG4gICAgw4PCqTogXCJlXCIsXG4gICAgw4TClTogXCJlXCIsXG4gICAgw4TCmzogXCJlXCIsXG4gICAgw4jCqTogXCJlXCIsXG4gICAgw6HCuMKdOiBcImVcIixcbiAgICDDg8KqOiBcImVcIixcbiAgICDDocK6wr86IFwiZVwiLFxuICAgIMOhwrvChzogXCJlXCIsXG4gICAgw6HCu8KBOiBcImVcIixcbiAgICDDocK7woM6IFwiZVwiLFxuICAgIMOhwrvChTogXCJlXCIsXG4gICAgw6HCuMKZOiBcImVcIixcbiAgICDDg8KrOiBcImVcIixcbiAgICDDhMKXOiBcImVcIixcbiAgICDDocK6wrk6IFwiZVwiLFxuICAgIMOIwoU6IFwiZVwiLFxuICAgIMODwqg6IFwiZVwiLFxuICAgIMOhwrrCuzogXCJlXCIsXG4gICAgw4jChzogXCJlXCIsXG4gICAgw4TCkzogXCJlXCIsXG4gICAgw6HCuMKXOiBcImVcIixcbiAgICDDocK4wpU6IFwiZVwiLFxuICAgIMOiwrHCuDogXCJlXCIsXG4gICAgw4TCmTogXCJlXCIsXG4gICAgw6HCtsKSOiBcImVcIixcbiAgICDDicKHOiBcImVcIixcbiAgICDDocK6wr06IFwiZVwiLFxuICAgIMOhwrjCmzogXCJlXCIsXG4gICAgw6rCncKrOiBcImV0XCIsXG4gICAgw6HCuMKfOiBcImZcIixcbiAgICDDhsKSOiBcImZcIixcbiAgICDDocK1wq46IFwiZlwiLFxuICAgIMOhwrbCgjogXCJmXCIsXG4gICAgw4fCtTogXCJnXCIsXG4gICAgw4TCnzogXCJnXCIsXG4gICAgw4fCpzogXCJnXCIsXG4gICAgw4TCozogXCJnXCIsXG4gICAgw4TCnTogXCJnXCIsXG4gICAgw4TCoTogXCJnXCIsXG4gICAgw4nCoDogXCJnXCIsXG4gICAgw6HCuMKhOiBcImdcIixcbiAgICDDocK2woM6IFwiZ1wiLFxuICAgIMOHwqU6IFwiZ1wiLFxuICAgIMOhwrjCqzogXCJoXCIsXG4gICAgw4jCnzogXCJoXCIsXG4gICAgw6HCuMKpOiBcImhcIixcbiAgICDDhMKlOiBcImhcIixcbiAgICDDosKxwqg6IFwiaFwiLFxuICAgIMOhwrjCpzogXCJoXCIsXG4gICAgw6HCuMKjOiBcImhcIixcbiAgICDDocK4wqU6IFwiaFwiLFxuICAgIMOJwqY6IFwiaFwiLFxuICAgIMOhwrrCljogXCJoXCIsXG4gICAgw4TCpzogXCJoXCIsXG4gICAgw4bClTogXCJodlwiLFxuICAgIMODwq06IFwiaVwiLFxuICAgIMOEwq06IFwiaVwiLFxuICAgIMOHwpA6IFwiaVwiLFxuICAgIMODwq46IFwiaVwiLFxuICAgIMODwq86IFwiaVwiLFxuICAgIMOhwrjCrzogXCJpXCIsXG4gICAgw6HCu8KLOiBcImlcIixcbiAgICDDiMKJOiBcImlcIixcbiAgICDDg8KsOiBcImlcIixcbiAgICDDocK7wok6IFwiaVwiLFxuICAgIMOIwos6IFwiaVwiLFxuICAgIMOEwqs6IFwiaVwiLFxuICAgIMOEwq86IFwiaVwiLFxuICAgIMOhwrbCljogXCJpXCIsXG4gICAgw4nCqDogXCJpXCIsXG4gICAgw4TCqTogXCJpXCIsXG4gICAgw6HCuMKtOiBcImlcIixcbiAgICDDqsKdwro6IFwiZFwiLFxuICAgIMOqwp3CvDogXCJmXCIsXG4gICAgw6HCtcK5OiBcImdcIixcbiAgICDDqsKewoM6IFwiclwiLFxuICAgIMOqwp7ChTogXCJzXCIsXG4gICAgw6rCnsKHOiBcInRcIixcbiAgICDDqsKdwq06IFwiaXNcIixcbiAgICDDh8KwOiBcImpcIixcbiAgICDDhMK1OiBcImpcIixcbiAgICDDisKdOiBcImpcIixcbiAgICDDicKJOiBcImpcIixcbiAgICDDocK4wrE6IFwia1wiLFxuICAgIMOHwqk6IFwia1wiLFxuICAgIMOEwrc6IFwia1wiLFxuICAgIMOiwrHCqjogXCJrXCIsXG4gICAgw6rCncKDOiBcImtcIixcbiAgICDDocK4wrM6IFwia1wiLFxuICAgIMOGwpk6IFwia1wiLFxuICAgIMOhwrjCtTogXCJrXCIsXG4gICAgw6HCtsKEOiBcImtcIixcbiAgICDDqsKdwoE6IFwia1wiLFxuICAgIMOqwp3ChTogXCJrXCIsXG4gICAgw4TCujogXCJsXCIsXG4gICAgw4bCmjogXCJsXCIsXG4gICAgw4nCrDogXCJsXCIsXG4gICAgw4TCvjogXCJsXCIsXG4gICAgw4TCvDogXCJsXCIsXG4gICAgw6HCuMK9OiBcImxcIixcbiAgICDDiMK0OiBcImxcIixcbiAgICDDocK4wrc6IFwibFwiLFxuICAgIMOhwrjCuTogXCJsXCIsXG4gICAgw6LCscKhOiBcImxcIixcbiAgICDDqsKdwok6IFwibFwiLFxuICAgIMOhwrjCuzogXCJsXCIsXG4gICAgw4XCgDogXCJsXCIsXG4gICAgw4nCqzogXCJsXCIsXG4gICAgw6HCtsKFOiBcImxcIixcbiAgICDDicKtOiBcImxcIixcbiAgICDDhcKCOiBcImxcIixcbiAgICDDh8KJOiBcImxqXCIsXG4gICAgw4XCvzogXCJzXCIsXG4gICAgw6HCusKcOiBcInNcIixcbiAgICDDocK6wps6IFwic1wiLFxuICAgIMOhwrrCnTogXCJzXCIsXG4gICAgw6HCuMK/OiBcIm1cIixcbiAgICDDocK5woE6IFwibVwiLFxuICAgIMOhwrnCgzogXCJtXCIsXG4gICAgw4nCsTogXCJtXCIsXG4gICAgw6HCtcKvOiBcIm1cIixcbiAgICDDocK2woY6IFwibVwiLFxuICAgIMOFwoQ6IFwiblwiLFxuICAgIMOFwog6IFwiblwiLFxuICAgIMOFwoY6IFwiblwiLFxuICAgIMOhwrnCizogXCJuXCIsXG4gICAgw4jCtTogXCJuXCIsXG4gICAgw6HCucKFOiBcIm5cIixcbiAgICDDocK5woc6IFwiblwiLFxuICAgIMOHwrk6IFwiblwiLFxuICAgIMOJwrI6IFwiblwiLFxuICAgIMOhwrnCiTogXCJuXCIsXG4gICAgw4bCnjogXCJuXCIsXG4gICAgw6HCtcKwOiBcIm5cIixcbiAgICDDocK2woc6IFwiblwiLFxuICAgIMOJwrM6IFwiblwiLFxuICAgIMODwrE6IFwiblwiLFxuICAgIMOHwow6IFwibmpcIixcbiAgICDDg8KzOiBcIm9cIixcbiAgICDDhcKPOiBcIm9cIixcbiAgICDDh8KSOiBcIm9cIixcbiAgICDDg8K0OiBcIm9cIixcbiAgICDDocK7wpE6IFwib1wiLFxuICAgIMOhwrvCmTogXCJvXCIsXG4gICAgw6HCu8KTOiBcIm9cIixcbiAgICDDocK7wpU6IFwib1wiLFxuICAgIMOhwrvClzogXCJvXCIsXG4gICAgw4PCtjogXCJvXCIsXG4gICAgw4jCqzogXCJvXCIsXG4gICAgw4jCrzogXCJvXCIsXG4gICAgw4jCsTogXCJvXCIsXG4gICAgw6HCu8KNOiBcIm9cIixcbiAgICDDhcKROiBcIm9cIixcbiAgICDDiMKNOiBcIm9cIixcbiAgICDDg8KyOiBcIm9cIixcbiAgICDDocK7wo86IFwib1wiLFxuICAgIMOGwqE6IFwib1wiLFxuICAgIMOhwrvCmzogXCJvXCIsXG4gICAgw6HCu8KjOiBcIm9cIixcbiAgICDDocK7wp06IFwib1wiLFxuICAgIMOhwrvCnzogXCJvXCIsXG4gICAgw6HCu8KhOiBcIm9cIixcbiAgICDDiMKPOiBcIm9cIixcbiAgICDDqsKdwos6IFwib1wiLFxuICAgIMOqwp3CjTogXCJvXCIsXG4gICAgw6LCscK6OiBcIm9cIixcbiAgICDDhcKNOiBcIm9cIixcbiAgICDDocK5wpM6IFwib1wiLFxuICAgIMOhwrnCkTogXCJvXCIsXG4gICAgw4fCqzogXCJvXCIsXG4gICAgw4fCrTogXCJvXCIsXG4gICAgw4PCuDogXCJvXCIsXG4gICAgw4fCvzogXCJvXCIsXG4gICAgw4PCtTogXCJvXCIsXG4gICAgw6HCucKNOiBcIm9cIixcbiAgICDDocK5wo86IFwib1wiLFxuICAgIMOIwq06IFwib1wiLFxuICAgIMOGwqM6IFwib2lcIixcbiAgICDDqsKdwo86IFwib29cIixcbiAgICDDicKbOiBcImVcIixcbiAgICDDocK2wpM6IFwiZVwiLFxuICAgIMOJwpQ6IFwib1wiLFxuICAgIMOhwrbClzogXCJvXCIsXG4gICAgw4jCozogXCJvdVwiLFxuICAgIMOhwrnClTogXCJwXCIsXG4gICAgw6HCucKXOiBcInBcIixcbiAgICDDqsKdwpM6IFwicFwiLFxuICAgIMOGwqU6IFwicFwiLFxuICAgIMOhwrXCsTogXCJwXCIsXG4gICAgw6HCtsKIOiBcInBcIixcbiAgICDDqsKdwpU6IFwicFwiLFxuICAgIMOhwrXCvTogXCJwXCIsXG4gICAgw6rCncKROiBcInBcIixcbiAgICDDqsKdwpk6IFwicVwiLFxuICAgIMOKwqA6IFwicVwiLFxuICAgIMOJwos6IFwicVwiLFxuICAgIMOqwp3ClzogXCJxXCIsXG4gICAgw4XClTogXCJyXCIsXG4gICAgw4XCmTogXCJyXCIsXG4gICAgw4XClzogXCJyXCIsXG4gICAgw6HCucKZOiBcInJcIixcbiAgICDDocK5wps6IFwiclwiLFxuICAgIMOhwrnCnTogXCJyXCIsXG4gICAgw4jCkTogXCJyXCIsXG4gICAgw4nCvjogXCJyXCIsXG4gICAgw6HCtcKzOiBcInJcIixcbiAgICDDiMKTOiBcInJcIixcbiAgICDDocK5wp86IFwiclwiLFxuICAgIMOJwrw6IFwiclwiLFxuICAgIMOhwrXCsjogXCJyXCIsXG4gICAgw6HCtsKJOiBcInJcIixcbiAgICDDicKNOiBcInJcIixcbiAgICDDicK9OiBcInJcIixcbiAgICDDosKGwoQ6IFwiY1wiLFxuICAgIMOqwpzCvzogXCJjXCIsXG4gICAgw4nCmDogXCJlXCIsXG4gICAgw4nCvzogXCJyXCIsXG4gICAgw4XCmzogXCJzXCIsXG4gICAgw6HCucKlOiBcInNcIixcbiAgICDDhcKhOiBcInNcIixcbiAgICDDocK5wqc6IFwic1wiLFxuICAgIMOFwp86IFwic1wiLFxuICAgIMOFwp06IFwic1wiLFxuICAgIMOIwpk6IFwic1wiLFxuICAgIMOhwrnCoTogXCJzXCIsXG4gICAgw6HCucKjOiBcInNcIixcbiAgICDDocK5wqk6IFwic1wiLFxuICAgIMOKwoI6IFwic1wiLFxuICAgIMOhwrXCtDogXCJzXCIsXG4gICAgw6HCtsKKOiBcInNcIixcbiAgICDDiMK/OiBcInNcIixcbiAgICDDicKhOiBcImdcIixcbiAgICDDg8KfOiBcInNzXCIsXG4gICAgw6HCtMKROiBcIm9cIixcbiAgICDDocK0wpM6IFwib1wiLFxuICAgIMOhwrTCnTogXCJ1XCIsXG4gICAgw4XCpTogXCJ0XCIsXG4gICAgw4XCozogXCJ0XCIsXG4gICAgw6HCucKxOiBcInRcIixcbiAgICDDiMKbOiBcInRcIixcbiAgICDDiMK2OiBcInRcIixcbiAgICDDocK6wpc6IFwidFwiLFxuICAgIMOiwrHCpjogXCJ0XCIsXG4gICAgw6HCucKrOiBcInRcIixcbiAgICDDocK5wq06IFwidFwiLFxuICAgIMOGwq06IFwidFwiLFxuICAgIMOhwrnCrzogXCJ0XCIsXG4gICAgw6HCtcK1OiBcInRcIixcbiAgICDDhsKrOiBcInRcIixcbiAgICDDisKIOiBcInRcIixcbiAgICDDhcKnOiBcInRcIixcbiAgICDDocK1wro6IFwidGhcIixcbiAgICDDicKQOiBcImFcIixcbiAgICDDocK0woI6IFwiYWVcIixcbiAgICDDh8KdOiBcImVcIixcbiAgICDDocK1wrc6IFwiZ1wiLFxuICAgIMOJwqU6IFwiaFwiLFxuICAgIMOKwq46IFwiaFwiLFxuICAgIMOKwq86IFwiaFwiLFxuICAgIMOhwrTCiTogXCJpXCIsXG4gICAgw4rCnjogXCJrXCIsXG4gICAgw6rCnsKBOiBcImxcIixcbiAgICDDicKvOiBcIm1cIixcbiAgICDDicKwOiBcIm1cIixcbiAgICDDocK0wpQ6IFwib2VcIixcbiAgICDDicK5OiBcInJcIixcbiAgICDDicK7OiBcInJcIixcbiAgICDDicK6OiBcInJcIixcbiAgICDDosKxwrk6IFwiclwiLFxuICAgIMOKwoc6IFwidFwiLFxuICAgIMOKwow6IFwidlwiLFxuICAgIMOKwo06IFwid1wiLFxuICAgIMOKwo46IFwieVwiLFxuICAgIMOqwpzCqTogXCJ0elwiLFxuICAgIMODwro6IFwidVwiLFxuICAgIMOFwq06IFwidVwiLFxuICAgIMOHwpQ6IFwidVwiLFxuICAgIMODwrs6IFwidVwiLFxuICAgIMOhwrnCtzogXCJ1XCIsXG4gICAgw4PCvDogXCJ1XCIsXG4gICAgw4fCmDogXCJ1XCIsXG4gICAgw4fCmjogXCJ1XCIsXG4gICAgw4fCnDogXCJ1XCIsXG4gICAgw4fCljogXCJ1XCIsXG4gICAgw6HCucKzOiBcInVcIixcbiAgICDDocK7wqU6IFwidVwiLFxuICAgIMOFwrE6IFwidVwiLFxuICAgIMOIwpU6IFwidVwiLFxuICAgIMODwrk6IFwidVwiLFxuICAgIMOhwrvCpzogXCJ1XCIsXG4gICAgw4bCsDogXCJ1XCIsXG4gICAgw6HCu8KpOiBcInVcIixcbiAgICDDocK7wrE6IFwidVwiLFxuICAgIMOhwrvCqzogXCJ1XCIsXG4gICAgw6HCu8KtOiBcInVcIixcbiAgICDDocK7wq86IFwidVwiLFxuICAgIMOIwpc6IFwidVwiLFxuICAgIMOFwqs6IFwidVwiLFxuICAgIMOhwrnCuzogXCJ1XCIsXG4gICAgw4XCszogXCJ1XCIsXG4gICAgw6HCtsKZOiBcInVcIixcbiAgICDDhcKvOiBcInVcIixcbiAgICDDhcKpOiBcInVcIixcbiAgICDDocK5wrk6IFwidVwiLFxuICAgIMOhwrnCtTogXCJ1XCIsXG4gICAgw6HCtcKrOiBcInVlXCIsXG4gICAgw6rCncK4OiBcInVtXCIsXG4gICAgw6LCscK0OiBcInZcIixcbiAgICDDqsKdwp86IFwidlwiLFxuICAgIMOhwrnCvzogXCJ2XCIsXG4gICAgw4rCizogXCJ2XCIsXG4gICAgw6HCtsKMOiBcInZcIixcbiAgICDDosKxwrE6IFwidlwiLFxuICAgIMOhwrnCvTogXCJ2XCIsXG4gICAgw6rCncKhOiBcInZ5XCIsXG4gICAgw6HCusKDOiBcIndcIixcbiAgICDDhcK1OiBcIndcIixcbiAgICDDocK6woU6IFwid1wiLFxuICAgIMOhwrrChzogXCJ3XCIsXG4gICAgw6HCusKJOiBcIndcIixcbiAgICDDocK6woE6IFwid1wiLFxuICAgIMOiwrHCszogXCJ3XCIsXG4gICAgw6HCusKYOiBcIndcIixcbiAgICDDocK6wo06IFwieFwiLFxuICAgIMOhwrrCizogXCJ4XCIsXG4gICAgw6HCtsKNOiBcInhcIixcbiAgICDDg8K9OiBcInlcIixcbiAgICDDhcK3OiBcInlcIixcbiAgICDDg8K/OiBcInlcIixcbiAgICDDocK6wo86IFwieVwiLFxuICAgIMOhwrvCtTogXCJ5XCIsXG4gICAgw6HCu8KzOiBcInlcIixcbiAgICDDhsK0OiBcInlcIixcbiAgICDDocK7wrc6IFwieVwiLFxuICAgIMOhwrvCvzogXCJ5XCIsXG4gICAgw4jCszogXCJ5XCIsXG4gICAgw6HCusKZOiBcInlcIixcbiAgICDDicKPOiBcInlcIixcbiAgICDDocK7wrk6IFwieVwiLFxuICAgIMOFwro6IFwielwiLFxuICAgIMOFwr46IFwielwiLFxuICAgIMOhwrrCkTogXCJ6XCIsXG4gICAgw4rCkTogXCJ6XCIsXG4gICAgw6LCscKsOiBcInpcIixcbiAgICDDhcK8OiBcInpcIixcbiAgICDDocK6wpM6IFwielwiLFxuICAgIMOIwqU6IFwielwiLFxuICAgIMOhwrrClTogXCJ6XCIsXG4gICAgw6HCtcK2OiBcInpcIixcbiAgICDDocK2wo46IFwielwiLFxuICAgIMOKwpA6IFwielwiLFxuICAgIMOGwrY6IFwielwiLFxuICAgIMOJwoA6IFwielwiLFxuICAgIMOvwqzCgDogXCJmZlwiLFxuICAgIMOvwqzCgzogXCJmZmlcIixcbiAgICDDr8KswoQ6IFwiZmZsXCIsXG4gICAgw6/CrMKBOiBcImZpXCIsXG4gICAgw6/CrMKCOiBcImZsXCIsXG4gICAgw4TCszogXCJpalwiLFxuICAgIMOFwpM6IFwib2VcIixcbiAgICDDr8KswoY6IFwic3RcIixcbiAgICDDosKCwpA6IFwiYVwiLFxuICAgIMOiwoLCkTogXCJlXCIsXG4gICAgw6HCtcKiOiBcImlcIixcbiAgICDDosKxwrw6IFwialwiLFxuICAgIMOiwoLCkjogXCJvXCIsXG4gICAgw6HCtcKjOiBcInJcIixcbiAgICDDocK1wqQ6IFwidVwiLFxuICAgIMOhwrXCpTogXCJ2XCIsXG4gICAgw6LCgsKTOiBcInhcIixcbiAgfTtcblxuICB0cmFuc2Zvcm0oaW5wdXQ6IHN0cmluZywgY2hhcnM/OiBzdHJpbmcpOiBzdHJpbmc7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBjaGFycz86IHN0cmluZyk6IGFueTtcblxuICB0cmFuc2Zvcm0odGV4dDogYW55LCBjaGFyczogc3RyaW5nID0gXCJcXFxcc1wiKTogc3RyaW5nIHtcbiAgICByZXR1cm4gaXNTdHJpbmcodGV4dClcbiAgICAgID8gdGV4dC5yZXBsYWNlKC9bXkEtWmEtejAtOV0vZywgKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubGF0aW5NYXBba2V5XSB8fCBrZXk7XG4gICAgICAgIH0pXG4gICAgICA6IHRleHQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJsaW5lc1wiIH0pXG5leHBvcnQgY2xhc3MgTGluZXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybSh0ZXh0OiBhbnksIGNoYXJzOiBzdHJpbmcgPSBcIlxcXFxzXCIpOiBBcnJheTxzdHJpbmc+IHwgYW55IHtcbiAgICByZXR1cm4gaXNTdHJpbmcodGV4dCkgPyB0ZXh0LnJlcGxhY2UoL1xcclxcbi9nLCBcIlxcblwiKS5zcGxpdChcIlxcblwiKSA6IHRleHQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJ1bmRlcnNjb3JlXCIgfSlcbmV4cG9ydCBjbGFzcyBVbmRlcnNjb3JlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IHN0cmluZywgY2hhcnM/OiBzdHJpbmcpOiBzdHJpbmc7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBjaGFycz86IHN0cmluZyk6IGFueTtcblxuICB0cmFuc2Zvcm0odGV4dDogYW55LCBjaGFyczogc3RyaW5nID0gXCJcXFxcc1wiKTogc3RyaW5nIHtcbiAgICByZXR1cm4gaXNTdHJpbmcodGV4dClcbiAgICAgID8gdGV4dFxuICAgICAgICAgIC50cmltKClcbiAgICAgICAgICAucmVwbGFjZSgvXFxzKy9nLCBcIlwiKVxuICAgICAgICAgIC5yZXBsYWNlKC9bQS1aXS9nLCAoYzogc3RyaW5nLCBrOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBrID8gYF8ke2MudG9Mb3dlckNhc2UoKX1gIDogYy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIH0pXG4gICAgICA6IHRleHQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJtYXRjaFwiIH0pXG5leHBvcnQgY2xhc3MgTWF0Y2hQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybSh0ZXh0OiBzdHJpbmcsIHBhdHRlcm46IHN0cmluZywgZmxhZ3M/OiBzdHJpbmcpOiBSZWdFeHBNYXRjaEFycmF5IHwgbnVsbDtcbiAgdHJhbnNmb3JtPFQ+KHRleHQ6IFQsIHBhdHRlcm46IHN0cmluZywgZmxhZ3M/OiBzdHJpbmcpOiBUO1xuXG4gIHRyYW5zZm9ybSh0ZXh0OiBhbnksIHBhdHRlcm46IHN0cmluZywgZmxhZ3M/OiBzdHJpbmcpOiBhbnkge1xuICAgIGlmICghaXNTdHJpbmcodGV4dCkpIHtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cblxuICAgIHJldHVybiB0ZXh0Lm1hdGNoKG5ldyBSZWdFeHAocGF0dGVybiwgZmxhZ3MpKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcInRlc3RcIiB9KVxuZXhwb3J0IGNsYXNzIFRlc3RQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybSh0ZXh0OiBzdHJpbmcsIHBhdHRlcm46IHN0cmluZywgZmxhZ3M/OiBzdHJpbmcpOiBib29sZWFuO1xuICB0cmFuc2Zvcm08VD4odGV4dDogVCwgcGF0dGVybjogc3RyaW5nLCBmbGFncz86IHN0cmluZyk6IFQ7XG5cbiAgdHJhbnNmb3JtKHRleHQ6IGFueSwgcGF0dGVybjogc3RyaW5nLCBmbGFncz86IHN0cmluZyk6IGFueSB7XG4gICAgaWYgKCFpc1N0cmluZyh0ZXh0KSkge1xuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAocGF0dGVybiwgZmxhZ3MpLnRlc3QodGV4dCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJscGFkXCIgfSlcbmV4cG9ydCBjbGFzcyBMZWZ0UGFkUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oc3RyOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyLCBwYWRDaGFyYWN0ZXI6IHN0cmluZyA9IFwiIFwiKTogc3RyaW5nIHtcbiAgICBpZiAoIWlzU3RyaW5nKHN0cikgfHwgc3RyLmxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICBzdHIgPSBwYWRDaGFyYWN0ZXIgKyBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcInJwYWRcIiB9KVxuZXhwb3J0IGNsYXNzIFJpZ2h0UGFkUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oc3RyOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyID0gMSwgcGFkQ2hhcmFjdGVyOiBzdHJpbmcgPSBcIiBcIik6IHN0cmluZyB7XG4gICAgaWYgKCFpc1N0cmluZyhzdHIpIHx8IHN0ci5sZW5ndGggPj0gbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgc3RyID0gc3RyICsgcGFkQ2hhcmFjdGVyO1xuICAgIH1cblxuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJ3cmFwXCIgfSlcbmV4cG9ydCBjbGFzcyBXcmFwUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oc3RyOiBzdHJpbmcsIHByZWZpeDogc3RyaW5nID0gXCJcIiwgc3VmZml4OiBzdHJpbmcgPSBcIlwiKTogc3RyaW5nIHtcbiAgICBpZiAoIWlzU3RyaW5nKHN0cikpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuICghIXByZWZpeCAmJiBpc1N0cmluZyhwcmVmaXgpID8gcHJlZml4IDogXCJcIikgKyBzdHIgKyAoISFzdWZmaXggJiYgaXNTdHJpbmcoc3VmZml4KSA/IHN1ZmZpeCA6IFwiXCIpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBVY1dvcmRzUGlwZSB9IGZyb20gXCIuL3Vjd29yZHNcIjtcbmltcG9ydCB7IExlZnRUcmltUGlwZSB9IGZyb20gXCIuL2x0cmltXCI7XG5pbXBvcnQgeyBSZXBlYXRQaXBlIH0gZnJvbSBcIi4vcmVwZWF0XCI7XG5pbXBvcnQgeyBSaWdodFRyaW1QaXBlIH0gZnJvbSBcIi4vcnRyaW1cIjtcbmltcG9ydCB7IFNjYW5QaXBlIH0gZnJvbSBcIi4vc2NhblwiO1xuaW1wb3J0IHsgU2hvcnRlblBpcGUgfSBmcm9tIFwiLi9zaG9ydGVuXCI7XG5pbXBvcnQgeyBTdHJpcFRhZ3NQaXBlIH0gZnJvbSBcIi4vc3RyaXAtdGFnc1wiO1xuaW1wb3J0IHsgVHJpbVBpcGUgfSBmcm9tIFwiLi90cmltXCI7XG5pbXBvcnQgeyBVY0ZpcnN0UGlwZSB9IGZyb20gXCIuL3VjZmlyc3RcIjtcbmltcG9ydCB7IFNsdWdpZnlQaXBlIH0gZnJvbSBcIi4vc2x1Z2lmeVwiO1xuaW1wb3J0IHsgQ2FtZWxpemVQaXBlIH0gZnJvbSBcIi4vY2FtZWxpemVcIjtcbmltcG9ydCB7IExhdGluaXNlUGlwZSB9IGZyb20gXCIuL2xhdGluaXNlXCI7XG5pbXBvcnQgeyBMaW5lc1BpcGUgfSBmcm9tIFwiLi9saW5lc1wiO1xuaW1wb3J0IHsgVW5kZXJzY29yZVBpcGUgfSBmcm9tIFwiLi91bmRlcnNjb3JlXCI7XG5pbXBvcnQgeyBNYXRjaFBpcGUgfSBmcm9tIFwiLi9tYXRjaFwiO1xuaW1wb3J0IHsgVGVzdFBpcGUgfSBmcm9tIFwiLi90ZXN0XCI7XG5pbXBvcnQgeyBMZWZ0UGFkUGlwZSB9IGZyb20gXCIuL2xwYWRcIjtcbmltcG9ydCB7IFJpZ2h0UGFkUGlwZSB9IGZyb20gXCIuL3JwYWRcIjtcbmltcG9ydCB7IFdyYXBQaXBlIH0gZnJvbSBcIi4vd3JhcFwiO1xuXG5leHBvcnQgY29uc3QgU1RSSU5HX1BJUEVTID0gW1xuICBMZWZ0VHJpbVBpcGUsXG4gIFJlcGVhdFBpcGUsXG4gIFJpZ2h0VHJpbVBpcGUsXG4gIFNjYW5QaXBlLFxuICBTaG9ydGVuUGlwZSxcbiAgU3RyaXBUYWdzUGlwZSxcbiAgVHJpbVBpcGUsXG4gIFVjRmlyc3RQaXBlLFxuICBVY1dvcmRzUGlwZSxcbiAgU2x1Z2lmeVBpcGUsXG4gIENhbWVsaXplUGlwZSxcbiAgTGF0aW5pc2VQaXBlLFxuICBMaW5lc1BpcGUsXG4gIFVuZGVyc2NvcmVQaXBlLFxuICBNYXRjaFBpcGUsXG4gIFRlc3RQaXBlLFxuICBMZWZ0UGFkUGlwZSxcbiAgUmlnaHRQYWRQaXBlLFxuICBXcmFwUGlwZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogU1RSSU5HX1BJUEVTLFxuICBpbXBvcnRzOiBbXSxcbiAgZXhwb3J0czogU1RSSU5HX1BJUEVTLFxufSlcbmV4cG9ydCBjbGFzcyBOZ1N0cmluZ1BpcGVzTW9kdWxlIHt9XG5cbmV4cG9ydCB7IFVjV29yZHNQaXBlIH0gZnJvbSBcIi4vdWN3b3Jkc1wiO1xuZXhwb3J0IHsgTGVmdFRyaW1QaXBlIH0gZnJvbSBcIi4vbHRyaW1cIjtcbmV4cG9ydCB7IFJlcGVhdFBpcGUgfSBmcm9tIFwiLi9yZXBlYXRcIjtcbmV4cG9ydCB7IFJpZ2h0VHJpbVBpcGUgfSBmcm9tIFwiLi9ydHJpbVwiO1xuZXhwb3J0IHsgU2NhblBpcGUgfSBmcm9tIFwiLi9zY2FuXCI7XG5leHBvcnQgeyBTaG9ydGVuUGlwZSB9IGZyb20gXCIuL3Nob3J0ZW5cIjtcbmV4cG9ydCB7IFN0cmlwVGFnc1BpcGUgfSBmcm9tIFwiLi9zdHJpcC10YWdzXCI7XG5leHBvcnQgeyBUcmltUGlwZSB9IGZyb20gXCIuL3RyaW1cIjtcbmV4cG9ydCB7IFVjRmlyc3RQaXBlIH0gZnJvbSBcIi4vdWNmaXJzdFwiO1xuZXhwb3J0IHsgU2x1Z2lmeVBpcGUgfSBmcm9tIFwiLi9zbHVnaWZ5XCI7XG5leHBvcnQgeyBDYW1lbGl6ZVBpcGUgfSBmcm9tIFwiLi9jYW1lbGl6ZVwiO1xuZXhwb3J0IHsgTGF0aW5pc2VQaXBlIH0gZnJvbSBcIi4vbGF0aW5pc2VcIjtcbmV4cG9ydCB7IExpbmVzUGlwZSB9IGZyb20gXCIuL2xpbmVzXCI7XG5leHBvcnQgeyBVbmRlcnNjb3JlUGlwZSB9IGZyb20gXCIuL3VuZGVyc2NvcmVcIjtcbmV4cG9ydCB7IE1hdGNoUGlwZSB9IGZyb20gXCIuL21hdGNoXCI7XG5leHBvcnQgeyBUZXN0UGlwZSB9IGZyb20gXCIuL3Rlc3RcIjtcbmV4cG9ydCB7IExlZnRQYWRQaXBlIH0gZnJvbSBcIi4vbHBhZFwiO1xuZXhwb3J0IHsgUmlnaHRQYWRQaXBlIH0gZnJvbSBcIi4vcnBhZFwiO1xuZXhwb3J0IHsgV3JhcFBpcGUgfSBmcm9tIFwiLi93cmFwXCI7XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQFBpcGUoeyBuYW1lOiBcIm1heFwiIH0pXG5leHBvcnQgY2xhc3MgTWF4UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oYXJyOiBhbnkpOiBudW1iZXIgfCBudW1iZXJbXSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKSA/IE1hdGgubWF4KC4uLmFycikgOiBhcnI7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwibWluXCIgfSlcbmV4cG9ydCBjbGFzcyBNaW5QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShhcnI6IGFueSk6IG51bWJlciB8IG51bWJlcltdIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcnIpID8gTWF0aC5taW4oLi4uYXJyKSA6IGFycjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJwZXJjZW50YWdlXCIgfSlcbmV4cG9ydCBjbGFzcyBQZXJjZW50YWdlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0obnVtOiBudW1iZXIsIHRvdGFsPzogbnVtYmVyLCBmbG9vcj86IGJvb2xlYW4pOiBudW1iZXI7XG4gIHRyYW5zZm9ybTxUPihudW06IFQsIHRvdGFsPzogbnVtYmVyLCBmbG9vcj86IGJvb2xlYW4pOiBUO1xuXG4gIHRyYW5zZm9ybShudW06IGFueSwgdG90YWw6IG51bWJlciA9IDEwMCwgZmxvb3I6IGJvb2xlYW4gPSBmYWxzZSk6IGFueSB7XG4gICAgaWYgKGlzTmFOKG51bSkpIHtcbiAgICAgIHJldHVybiBudW07XG4gICAgfVxuXG4gICAgY29uc3QgcGVyY2VudCA9IChudW0gKiAxMDApIC8gdG90YWw7XG5cbiAgICByZXR1cm4gZmxvb3IgPyBNYXRoLmZsb29yKHBlcmNlbnQpIDogcGVyY2VudDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJzdW1cIiB9KVxuZXhwb3J0IGNsYXNzIFN1bVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKG51bTogYW55W10pOiBudW1iZXI7XG4gIHRyYW5zZm9ybTxUPihudW06IGFueSk6IFQ7XG5cbiAgdHJhbnNmb3JtKGFycjogYW55KTogYW55IHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcnIpID8gYXJyLnJlZHVjZSgoc3VtLCBjdXJyKSA9PiBzdW0gKyBjdXJyLCAwKSA6IGFycjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJmbG9vclwiIH0pXG5leHBvcnQgY2xhc3MgRmxvb3JQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShudW06IG51bWJlciwgcHJlY2lzaW9uOiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICBpZiAocHJlY2lzaW9uIDw9IDApIHtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bSk7XG4gICAgfVxuXG4gICAgY29uc3QgdGhvID0gMTAgKiogcHJlY2lzaW9uO1xuXG4gICAgcmV0dXJuIE1hdGguZmxvb3IobnVtICogdGhvKSAvIHRobztcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBhcHBseVByZWNpc2lvbiB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcInJvdW5kXCIgfSlcbmV4cG9ydCBjbGFzcyBSb3VuZFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKG51bTogbnVtYmVyLCBwcmVjaXNpb246IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgIHJldHVybiBhcHBseVByZWNpc2lvbihudW0sIHByZWNpc2lvbik7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwic3FydFwiIH0pXG5leHBvcnQgY2xhc3MgU3FydFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKG51bTogbnVtYmVyKTogbnVtYmVyO1xuICB0cmFuc2Zvcm08VD4obnVtOiBUKTogVDtcblxuICB0cmFuc2Zvcm0obnVtOiBhbnkpOiBhbnkge1xuICAgIHJldHVybiAhaXNOYU4obnVtKSA/IE1hdGguc3FydChudW0pIDogbnVtO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQFBpcGUoeyBuYW1lOiBcInBvd1wiIH0pXG5leHBvcnQgY2xhc3MgUG93ZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShudW06IG51bWJlciwgcG93ZXI/OiBudW1iZXIpOiBudW1iZXI7XG4gIHRyYW5zZm9ybShudW06IGFueSwgcG93ZXI/OiBudW1iZXIpOiBhbnk7XG5cbiAgdHJhbnNmb3JtKG51bTogYW55LCBwb3dlcjogbnVtYmVyID0gMik6IG51bWJlciB7XG4gICAgcmV0dXJuICFpc05hTihudW0pID8gbnVtICoqIHBvd2VyIDogbnVtO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQFBpcGUoeyBuYW1lOiBcImNlaWxcIiB9KVxuZXhwb3J0IGNsYXNzIENlaWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShudW06IG51bWJlciwgcHJlY2lzaW9uOiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICBpZiAocHJlY2lzaW9uIDw9IDApIHtcbiAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtKTtcbiAgICB9XG5cbiAgICBjb25zdCB0aG8gPSAxMCAqKiBwcmVjaXNpb247XG5cbiAgICByZXR1cm4gTWF0aC5jZWlsKG51bSAqIHRobykgLyB0aG87XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNOdW1iZXJGaW5pdGUgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJkZWdyZWVzXCIgfSlcbmV4cG9ydCBjbGFzcyBEZWdyZWVzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0ocmFkaWFuczogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAoIWlzTnVtYmVyRmluaXRlKHJhZGlhbnMpKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHJldHVybiAocmFkaWFucyAqIDE4MCkgLyBNYXRoLlBJO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGFwcGx5UHJlY2lzaW9uLCBpc051bWJlckZpbml0ZSwgaXNVbmRlZmluZWQgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJieXRlc1wiIH0pXG5leHBvcnQgY2xhc3MgQnl0ZXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHByaXZhdGUgZGljdGlvbmFyeTogQXJyYXk8eyBtYXg6IG51bWJlcjsgdHlwZTogc3RyaW5nIH0+ID0gW1xuICAgIHsgbWF4OiAxMDI0LCB0eXBlOiBcIkJcIiB9LFxuICAgIHsgbWF4OiAxMDQ4NTc2LCB0eXBlOiBcIktCXCIgfSxcbiAgICB7IG1heDogMTA3Mzc0MTgyNCwgdHlwZTogXCJNQlwiIH0sXG4gICAgeyBtYXg6IDEuMDk5NTExNmUxMiwgdHlwZTogXCJHQlwiIH0sXG4gIF07XG5cbiAgdHJhbnNmb3JtKHZhbHVlOiBudW1iZXIsIHByZWNpc2lvbj86IG51bWJlciB8IHVuZGVmaW5lZCk6IHN0cmluZyB8IG51bWJlciB7XG4gICAgaWYgKCFpc051bWJlckZpbml0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuXG4gICAgY29uc3QgZm9ybWF0ID0gdGhpcy5kaWN0aW9uYXJ5LmZpbmQoZCA9PiB2YWx1ZSA8IGQubWF4KSB8fCB0aGlzLmRpY3Rpb25hcnlbdGhpcy5kaWN0aW9uYXJ5Lmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IGNhbGMgPSB2YWx1ZSAvIChmb3JtYXQubWF4IC8gMTAyNCk7XG4gICAgY29uc3QgbnVtID0gaXNVbmRlZmluZWQocHJlY2lzaW9uKSA/IGNhbGMgOiBhcHBseVByZWNpc2lvbihjYWxjLCBwcmVjaXNpb24pO1xuXG4gICAgcmV0dXJuIGAke251bX0gJHtmb3JtYXQudHlwZX1gO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzTnVtYmVyRmluaXRlIH0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG5AUGlwZSh7IG5hbWU6IFwicmFkaWFuc1wiIH0pXG5leHBvcnQgY2xhc3MgUmFkaWFuc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGRlZ3JlZXM6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKCFpc051bWJlckZpbml0ZShkZWdyZWVzKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICByZXR1cm4gKGRlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTWF4UGlwZSB9IGZyb20gXCIuL21heFwiO1xuaW1wb3J0IHsgTWluUGlwZSB9IGZyb20gXCIuL21pblwiO1xuaW1wb3J0IHsgUGVyY2VudGFnZVBpcGUgfSBmcm9tIFwiLi9wZXJjZW50YWdlXCI7XG5pbXBvcnQgeyBTdW1QaXBlIH0gZnJvbSBcIi4vc3VtXCI7XG5pbXBvcnQgeyBGbG9vclBpcGUgfSBmcm9tIFwiLi9mbG9vclwiO1xuaW1wb3J0IHsgUm91bmRQaXBlIH0gZnJvbSBcIi4vcm91bmRcIjtcbmltcG9ydCB7IFNxcnRQaXBlIH0gZnJvbSBcIi4vc3FydFwiO1xuaW1wb3J0IHsgUG93ZXJQaXBlIH0gZnJvbSBcIi4vcG93XCI7XG5pbXBvcnQgeyBDZWlsUGlwZSB9IGZyb20gXCIuL2NlaWxcIjtcbmltcG9ydCB7IERlZ3JlZXNQaXBlIH0gZnJvbSBcIi4vZGVncmVlc1wiO1xuaW1wb3J0IHsgQnl0ZXNQaXBlIH0gZnJvbSBcIi4vYnl0ZXNcIjtcbmltcG9ydCB7IFJhZGlhbnNQaXBlIH0gZnJvbSBcIi4vcmFkaWFuc1wiO1xuXG5leHBvcnQgY29uc3QgTUFUSF9QSVBFUyA9IFtcbiAgTWF4UGlwZSxcbiAgTWluUGlwZSxcbiAgUGVyY2VudGFnZVBpcGUsXG4gIFN1bVBpcGUsXG4gIEZsb29yUGlwZSxcbiAgUm91bmRQaXBlLFxuICBTcXJ0UGlwZSxcbiAgUG93ZXJQaXBlLFxuICBDZWlsUGlwZSxcbiAgRGVncmVlc1BpcGUsXG4gIEJ5dGVzUGlwZSxcbiAgUmFkaWFuc1BpcGUsXG5dO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IE1BVEhfUElQRVMsXG4gIGltcG9ydHM6IFtdLFxuICBleHBvcnRzOiBNQVRIX1BJUEVTLFxufSlcbmV4cG9ydCBjbGFzcyBOZ01hdGhQaXBlc01vZHVsZSB7fVxuXG5leHBvcnQgeyBNYXhQaXBlIH0gZnJvbSBcIi4vbWF4XCI7XG5leHBvcnQgeyBNaW5QaXBlIH0gZnJvbSBcIi4vbWluXCI7XG5leHBvcnQgeyBQZXJjZW50YWdlUGlwZSB9IGZyb20gXCIuL3BlcmNlbnRhZ2VcIjtcbmV4cG9ydCB7IFN1bVBpcGUgfSBmcm9tIFwiLi9zdW1cIjtcbmV4cG9ydCB7IEZsb29yUGlwZSB9IGZyb20gXCIuL2Zsb29yXCI7XG5leHBvcnQgeyBSb3VuZFBpcGUgfSBmcm9tIFwiLi9yb3VuZFwiO1xuZXhwb3J0IHsgU3FydFBpcGUgfSBmcm9tIFwiLi9zcXJ0XCI7XG5leHBvcnQgeyBQb3dlclBpcGUgfSBmcm9tIFwiLi9wb3dcIjtcbmV4cG9ydCB7IENlaWxQaXBlIH0gZnJvbSBcIi4vY2VpbFwiO1xuZXhwb3J0IHsgRGVncmVlc1BpcGUgfSBmcm9tIFwiLi9kZWdyZWVzXCI7XG5leHBvcnQgeyBCeXRlc1BpcGUgfSBmcm9tIFwiLi9ieXRlc1wiO1xuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBpc1VuZGVmaW5lZCB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcImlzRGVmaW5lZFwiIH0pXG5leHBvcnQgY2xhc3MgSXNEZWZpbmVkUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhaXNVbmRlZmluZWQoaW5wdXQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQFBpcGUoeyBuYW1lOiBcImlzTnVsbFwiIH0pXG5leHBvcnQgY2xhc3MgSXNOdWxsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpbnB1dCA9PT0gbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBpc1VuZGVmaW5lZCB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcImlzVW5kZWZpbmVkXCIgfSlcbmV4cG9ydCBjbGFzcyBJc1VuZGVmaW5lZFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaXNVbmRlZmluZWQoaW5wdXQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG5AUGlwZSh7IG5hbWU6IFwiaXNTdHJpbmdcIiB9KVxuZXhwb3J0IGNsYXNzIElzU3RyaW5nUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpc1N0cmluZyhpbnB1dCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcImlzRnVuY3Rpb25cIiB9KVxuZXhwb3J0IGNsYXNzIElzRnVuY3Rpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzTnVtYmVyIH0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG5AUGlwZSh7IG5hbWU6IFwiaXNOdW1iZXJcIiB9KVxuZXhwb3J0IGNsYXNzIElzTnVtYmVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpc051bWJlcihpbnB1dCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwiaXNBcnJheVwiIH0pXG5leHBvcnQgY2xhc3MgSXNBcnJheVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJpc09iamVjdFwiIH0pXG5leHBvcnQgY2xhc3MgSXNPYmplY3RQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGlucHV0KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJpc0dyZWF0ZXJFcXVhbFRoYW5cIiB9KVxuZXhwb3J0IGNsYXNzIElzR3JlYXRlckVxdWFsVGhhblBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBudW1iZXIsIG90aGVyOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaW5wdXQgPj0gb3RoZXI7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwiaXNHcmVhdGVyVGhhblwiIH0pXG5leHBvcnQgY2xhc3MgSXNHcmVhdGVyVGhhblBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBudW1iZXIsIG90aGVyOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaW5wdXQgPiBvdGhlcjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJpc0xlc3NFcXVhbFRoYW5cIiB9KVxuZXhwb3J0IGNsYXNzIElzTGVzc0VxdWFsVGhhblBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBudW1iZXIsIG90aGVyOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaW5wdXQgPD0gb3RoZXI7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwiaXNFcXVhbFRvXCIgfSlcbmV4cG9ydCBjbGFzcyBJc0VxdWFsVG9QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBvdGhlcjogYW55KTogYm9vbGVhbiB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnRyaXBsZS1lcXVhbHNcbiAgICByZXR1cm4gaW5wdXQgPT0gb3RoZXI7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwiaXNOb3RFcXVhbFRvXCIgfSlcbmV4cG9ydCBjbGFzcyBJc05vdEVxdWFsVG9QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBvdGhlcjogYW55KTogYm9vbGVhbiB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnRyaXBsZS1lcXVhbHNcbiAgICByZXR1cm4gaW5wdXQgIT0gb3RoZXI7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AUGlwZSh7IG5hbWU6IFwiaXNJZGVudGljYWxUb1wiIH0pXG5leHBvcnQgY2xhc3MgSXNJZGVudGljYWxUb1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIG90aGVyOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaW5wdXQgPT09IG90aGVyO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQFBpcGUoeyBuYW1lOiBcImlzTm90SWRlbnRpY2FsVG9cIiB9KVxuZXhwb3J0IGNsYXNzIElzTm90SWRlbnRpY2FsVG9QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBvdGhlcjogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlucHV0ICE9PSBvdGhlcjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJpc0xlc3NUaGFuXCIgfSlcbmV4cG9ydCBjbGFzcyBJc0xlc3NUaGFuUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IG51bWJlciwgb3RoZXI6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpbnB1dCA8IG90aGVyO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJc0RlZmluZWRQaXBlIH0gZnJvbSBcIi4vaXMtZGVmaW5lZFwiO1xuaW1wb3J0IHsgSXNOdWxsUGlwZSB9IGZyb20gXCIuL2lzLW51bGxcIjtcbmltcG9ydCB7IElzVW5kZWZpbmVkUGlwZSB9IGZyb20gXCIuL2lzLXVuZGVmaW5lZFwiO1xuaW1wb3J0IHsgSXNTdHJpbmdQaXBlIH0gZnJvbSBcIi4vaXMtc3RyaW5nXCI7XG5pbXBvcnQgeyBJc0Z1bmN0aW9uUGlwZSB9IGZyb20gXCIuL2lzLWZ1bmN0aW9uXCI7XG5pbXBvcnQgeyBJc051bWJlclBpcGUgfSBmcm9tIFwiLi9pcy1udW1iZXJcIjtcbmltcG9ydCB7IElzQXJyYXlQaXBlIH0gZnJvbSBcIi4vaXMtYXJyYXlcIjtcbmltcG9ydCB7IElzT2JqZWN0UGlwZSB9IGZyb20gXCIuL2lzLW9iamVjdFwiO1xuaW1wb3J0IHsgSXNHcmVhdGVyRXF1YWxUaGFuUGlwZSB9IGZyb20gXCIuL2lzLWdyZWF0ZXItZXF1YWwtdGhhblwiO1xuaW1wb3J0IHsgSXNHcmVhdGVyVGhhblBpcGUgfSBmcm9tIFwiLi9pcy1ncmVhdGVyLXRoYW5cIjtcbmltcG9ydCB7IElzTGVzc0VxdWFsVGhhblBpcGUgfSBmcm9tIFwiLi9pcy1sZXNzLWVxdWFsLXRoYW5cIjtcbmltcG9ydCB7IElzRXF1YWxUb1BpcGUgfSBmcm9tIFwiLi9pcy1lcXVhbC10b1wiO1xuaW1wb3J0IHsgSXNOb3RFcXVhbFRvUGlwZSB9IGZyb20gXCIuL2lzLW5vdC1lcXVhbC10b1wiO1xuaW1wb3J0IHsgSXNJZGVudGljYWxUb1BpcGUgfSBmcm9tIFwiLi9pcy1pZGVudGljYWwtdG9cIjtcbmltcG9ydCB7IElzTm90SWRlbnRpY2FsVG9QaXBlIH0gZnJvbSBcIi4vaXMtbm90LWlkZW50aWNhbC10b1wiO1xuaW1wb3J0IHsgSXNMZXNzVGhhblBpcGUgfSBmcm9tIFwiLi9pcy1sZXNzLXRoYW5cIjtcblxuZXhwb3J0IGNvbnN0IEJPT0xFQU5fUElQRVMgPSBbXG4gIElzRGVmaW5lZFBpcGUsXG4gIElzTnVsbFBpcGUsXG4gIElzVW5kZWZpbmVkUGlwZSxcbiAgSXNTdHJpbmdQaXBlLFxuICBJc0Z1bmN0aW9uUGlwZSxcbiAgSXNOdW1iZXJQaXBlLFxuICBJc0FycmF5UGlwZSxcbiAgSXNPYmplY3RQaXBlLFxuICBJc0dyZWF0ZXJFcXVhbFRoYW5QaXBlLFxuICBJc0dyZWF0ZXJUaGFuUGlwZSxcbiAgSXNMZXNzRXF1YWxUaGFuUGlwZSxcbiAgSXNMZXNzRXF1YWxUaGFuUGlwZSxcbiAgSXNFcXVhbFRvUGlwZSxcbiAgSXNOb3RFcXVhbFRvUGlwZSxcbiAgSXNJZGVudGljYWxUb1BpcGUsXG4gIElzTm90SWRlbnRpY2FsVG9QaXBlLFxuICBJc0xlc3NUaGFuUGlwZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogQk9PTEVBTl9QSVBFUyxcbiAgaW1wb3J0czogW10sXG4gIGV4cG9ydHM6IEJPT0xFQU5fUElQRVMsXG59KVxuZXhwb3J0IGNsYXNzIE5nQm9vbGVhblBpcGVzTW9kdWxlIHt9XG5cbmV4cG9ydCB7IElzRGVmaW5lZFBpcGUgfSBmcm9tIFwiLi9pcy1kZWZpbmVkXCI7XG5leHBvcnQgeyBJc051bGxQaXBlIH0gZnJvbSBcIi4vaXMtbnVsbFwiO1xuZXhwb3J0IHsgSXNVbmRlZmluZWRQaXBlIH0gZnJvbSBcIi4vaXMtdW5kZWZpbmVkXCI7XG5leHBvcnQgeyBJc1N0cmluZ1BpcGUgfSBmcm9tIFwiLi9pcy1zdHJpbmdcIjtcbmV4cG9ydCB7IElzRnVuY3Rpb25QaXBlIH0gZnJvbSBcIi4vaXMtZnVuY3Rpb25cIjtcbmV4cG9ydCB7IElzTnVtYmVyUGlwZSB9IGZyb20gXCIuL2lzLW51bWJlclwiO1xuZXhwb3J0IHsgSXNBcnJheVBpcGUgfSBmcm9tIFwiLi9pcy1hcnJheVwiO1xuZXhwb3J0IHsgSXNPYmplY3RQaXBlIH0gZnJvbSBcIi4vaXMtb2JqZWN0XCI7XG5leHBvcnQgeyBJc0dyZWF0ZXJFcXVhbFRoYW5QaXBlIH0gZnJvbSBcIi4vaXMtZ3JlYXRlci1lcXVhbC10aGFuXCI7XG5leHBvcnQgeyBJc0dyZWF0ZXJUaGFuUGlwZSB9IGZyb20gXCIuL2lzLWdyZWF0ZXItdGhhblwiO1xuZXhwb3J0IHsgSXNMZXNzRXF1YWxUaGFuUGlwZSB9IGZyb20gXCIuL2lzLWxlc3MtZXF1YWwtdGhhblwiO1xuZXhwb3J0IHsgSXNFcXVhbFRvUGlwZSB9IGZyb20gXCIuL2lzLWVxdWFsLXRvXCI7XG5leHBvcnQgeyBJc05vdEVxdWFsVG9QaXBlIH0gZnJvbSBcIi4vaXMtbm90LWVxdWFsLXRvXCI7XG5leHBvcnQgeyBJc0lkZW50aWNhbFRvUGlwZSB9IGZyb20gXCIuL2lzLWlkZW50aWNhbC10b1wiO1xuZXhwb3J0IHsgSXNOb3RJZGVudGljYWxUb1BpcGUgfSBmcm9tIFwiLi9pcy1ub3QtaWRlbnRpY2FsLXRvXCI7XG5leHBvcnQgeyBJc0xlc3NUaGFuUGlwZSB9IGZyb20gXCIuL2lzLWxlc3MtdGhhblwiO1xuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTmdBcnJheVBpcGVzTW9kdWxlIH0gZnJvbSBcIi4vYXJyYXkvaW5kZXhcIjtcbmltcG9ydCB7IE5nT2JqZWN0UGlwZXNNb2R1bGUgfSBmcm9tIFwiLi9vYmplY3QvaW5kZXhcIjtcbmltcG9ydCB7IE5nU3RyaW5nUGlwZXNNb2R1bGUgfSBmcm9tIFwiLi9zdHJpbmcvaW5kZXhcIjtcbmltcG9ydCB7IE5nTWF0aFBpcGVzTW9kdWxlIH0gZnJvbSBcIi4vbWF0aC9pbmRleFwiO1xuaW1wb3J0IHsgTmdCb29sZWFuUGlwZXNNb2R1bGUgfSBmcm9tIFwiLi9ib29sZWFuL2luZGV4XCI7XG5cbkBOZ01vZHVsZSh7XG4gIGV4cG9ydHM6IFtOZ0FycmF5UGlwZXNNb2R1bGUsIE5nU3RyaW5nUGlwZXNNb2R1bGUsIE5nTWF0aFBpcGVzTW9kdWxlLCBOZ0Jvb2xlYW5QaXBlc01vZHVsZSwgTmdPYmplY3RQaXBlc01vZHVsZV0sXG59KVxuZXhwb3J0IGNsYXNzIE5nUGlwZXNNb2R1bGUge31cblxuZXhwb3J0ICogZnJvbSBcIi4vYXJyYXkvaW5kZXhcIjtcbmV4cG9ydCAqIGZyb20gXCIuL29iamVjdC9pbmRleFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3RyaW5nL2luZGV4XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tYXRoL2luZGV4XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ib29sZWFuL2luZGV4XCI7XG4iXSwibmFtZXMiOlsiUGlwZSIsInRzbGliXzEuX19zcHJlYWQiLCJ0c2xpYl8xLl9fZXh0ZW5kcyIsIk5nTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O1FBT0UsNEJBQVM7Ozs7O1lBQVQsVUFBVSxLQUFVO2dCQUFFLGNBQWM7cUJBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztvQkFBZCw2QkFBYzs7Z0JBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUN6QixPQUFPLEtBQUssQ0FBQztpQkFDZDs7Z0JBR0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVB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O2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxLQUFLO2dCQUNSLENBQUMsRUFBRSxLQUFLO2dCQUNSLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxJQUFJO2dCQUNQLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2dCQUNOLENBQUMsRUFBRSxHQUFHO2FBQ1A7Ozs7Ozs7UUFLRCxnQ0FBUzs7Ozs7WUFBVCxVQUFVLElBQVMsRUFBRSxL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