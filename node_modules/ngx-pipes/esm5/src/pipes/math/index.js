/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from "@angular/core";
import { MaxPipe } from "./max";
import { MinPipe } from "./min";
import { PercentagePipe } from "./percentage";
import { SumPipe } from "./sum";
import { FloorPipe } from "./floor";
import { RoundPipe } from "./round";
import { SqrtPipe } from "./sqrt";
import { PowerPipe } from "./pow";
import { CeilPipe } from "./ceil";
import { DegreesPipe } from "./degrees";
import { BytesPipe } from "./bytes";
import { RadiansPipe } from "./radians";
export var /** @type {?} */ MATH_PIPES = [
    MaxPipe,
    MinPipe,
    PercentagePipe,
    SumPipe,
    FloorPipe,
    RoundPipe,
    SqrtPipe,
    PowerPipe,
    CeilPipe,
    DegreesPipe,
    BytesPipe,
    RadiansPipe,
];
var NgMathPipesModule = /** @class */ (function () {
    function NgMathPipesModule() {
    }
    NgMathPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: MATH_PIPES,
                    imports: [],
                    exports: MATH_PIPES,
                },] },
    ];
    return NgMathPipesModule;
}());
export { NgMathPipesModule };
export { MaxPipe } from "./max";
export { MinPipe } from "./min";
export { PercentagePipe } from "./percentage";
export { SumPipe } from "./sum";
export { FloorPipe } from "./floor";
export { RoundPipe } from "./round";
export { SqrtPipe } from "./sqrt";
export { PowerPipe } from "./pow";
export { CeilPipe } from "./ceil";
export { DegreesPipe } from "./degrees";
export { BytesPipe } from "./bytes";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvbWF0aC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDaEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM5QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDbEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV4QyxNQUFNLENBQUMscUJBQU0sVUFBVSxHQUFHO0lBQ3hCLE9BQU87SUFDUCxPQUFPO0lBQ1AsY0FBYztJQUNkLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztDQUNaLENBQUM7Ozs7O2dCQUVELFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUUsVUFBVTtvQkFDeEIsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsT0FBTyxFQUFFLFVBQVU7aUJBQ3BCOzs0QkFqQ0Q7O1NBa0NhLGlCQUFpQjtBQUU5QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDaEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM5QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDbEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBNYXhQaXBlIH0gZnJvbSBcIi4vbWF4XCI7XG5pbXBvcnQgeyBNaW5QaXBlIH0gZnJvbSBcIi4vbWluXCI7XG5pbXBvcnQgeyBQZXJjZW50YWdlUGlwZSB9IGZyb20gXCIuL3BlcmNlbnRhZ2VcIjtcbmltcG9ydCB7IFN1bVBpcGUgfSBmcm9tIFwiLi9zdW1cIjtcbmltcG9ydCB7IEZsb29yUGlwZSB9IGZyb20gXCIuL2Zsb29yXCI7XG5pbXBvcnQgeyBSb3VuZFBpcGUgfSBmcm9tIFwiLi9yb3VuZFwiO1xuaW1wb3J0IHsgU3FydFBpcGUgfSBmcm9tIFwiLi9zcXJ0XCI7XG5pbXBvcnQgeyBQb3dlclBpcGUgfSBmcm9tIFwiLi9wb3dcIjtcbmltcG9ydCB7IENlaWxQaXBlIH0gZnJvbSBcIi4vY2VpbFwiO1xuaW1wb3J0IHsgRGVncmVlc1BpcGUgfSBmcm9tIFwiLi9kZWdyZWVzXCI7XG5pbXBvcnQgeyBCeXRlc1BpcGUgfSBmcm9tIFwiLi9ieXRlc1wiO1xuaW1wb3J0IHsgUmFkaWFuc1BpcGUgfSBmcm9tIFwiLi9yYWRpYW5zXCI7XG5cbmV4cG9ydCBjb25zdCBNQVRIX1BJUEVTID0gW1xuICBNYXhQaXBlLFxuICBNaW5QaXBlLFxuICBQZXJjZW50YWdlUGlwZSxcbiAgU3VtUGlwZSxcbiAgRmxvb3JQaXBlLFxuICBSb3VuZFBpcGUsXG4gIFNxcnRQaXBlLFxuICBQb3dlclBpcGUsXG4gIENlaWxQaXBlLFxuICBEZWdyZWVzUGlwZSxcbiAgQnl0ZXNQaXBlLFxuICBSYWRpYW5zUGlwZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogTUFUSF9QSVBFUyxcbiAgaW1wb3J0czogW10sXG4gIGV4cG9ydHM6IE1BVEhfUElQRVMsXG59KVxuZXhwb3J0IGNsYXNzIE5nTWF0aFBpcGVzTW9kdWxlIHt9XG5cbmV4cG9ydCB7IE1heFBpcGUgfSBmcm9tIFwiLi9tYXhcIjtcbmV4cG9ydCB7IE1pblBpcGUgfSBmcm9tIFwiLi9taW5cIjtcbmV4cG9ydCB7IFBlcmNlbnRhZ2VQaXBlIH0gZnJvbSBcIi4vcGVyY2VudGFnZVwiO1xuZXhwb3J0IHsgU3VtUGlwZSB9IGZyb20gXCIuL3N1bVwiO1xuZXhwb3J0IHsgRmxvb3JQaXBlIH0gZnJvbSBcIi4vZmxvb3JcIjtcbmV4cG9ydCB7IFJvdW5kUGlwZSB9IGZyb20gXCIuL3JvdW5kXCI7XG5leHBvcnQgeyBTcXJ0UGlwZSB9IGZyb20gXCIuL3NxcnRcIjtcbmV4cG9ydCB7IFBvd2VyUGlwZSB9IGZyb20gXCIuL3Bvd1wiO1xuZXhwb3J0IHsgQ2VpbFBpcGUgfSBmcm9tIFwiLi9jZWlsXCI7XG5leHBvcnQgeyBEZWdyZWVzUGlwZSB9IGZyb20gXCIuL2RlZ3JlZXNcIjtcbmV4cG9ydCB7IEJ5dGVzUGlwZSB9IGZyb20gXCIuL2J5dGVzXCI7XG4iXX0=