/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { DiffPipe } from "./diff";
import { InitialPipe } from "./initial";
import { FlattenPipe } from "./flatten";
import { IntersectionPipe } from "./intersection";
import { ReversePipe } from "./reverse";
import { TailPipe } from "./tail";
import { TrurthifyPipe } from "./truthify";
import { UnionPipe } from "./union";
import { UniquePipe } from "./unique";
import { WithoutPipe } from "./without";
import { PluckPipe } from "./pluck";
import { ShufflePipe } from "./shuffle";
import { EveryPipe } from "./every";
import { SomePipe } from "./some";
import { SamplePipe } from "./sample";
import { GroupByPipe } from "./group-by";
import { FilterByPipe } from "./filter-by";
import { OrderByPipe } from "./order-by";
import { NgModule } from "@angular/core";
import { GroupByImpurePipe } from "./group-by-impure";
import { FilterByImpurePipe } from "./filter-by-impure";
import { OrderByImpurePipe } from "./order-by-impure";
import { RangePipe } from "./range";
var /** @type {?} */ ARRAY_PIPES = [
    DiffPipe,
    FlattenPipe,
    InitialPipe,
    IntersectionPipe,
    ReversePipe,
    TailPipe,
    TrurthifyPipe,
    UnionPipe,
    UniquePipe,
    WithoutPipe,
    PluckPipe,
    ShufflePipe,
    EveryPipe,
    SomePipe,
    SamplePipe,
    GroupByPipe,
    GroupByImpurePipe,
    FilterByPipe,
    FilterByImpurePipe,
    OrderByPipe,
    OrderByImpurePipe,
    RangePipe,
];
var NgArrayPipesModule = /** @class */ (function () {
    function NgArrayPipesModule() {
    }
    NgArrayPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: ARRAY_PIPES,
                    imports: [],
                    exports: ARRAY_PIPES,
                },] },
    ];
    return NgArrayPipesModule;
}());
export { NgArrayPipesModule };
export { DiffPipe } from "./diff";
export { InitialPipe } from "./initial";
export { FlattenPipe } from "./flatten";
export { IntersectionPipe } from "./intersection";
export { ReversePipe } from "./reverse";
export { TailPipe } from "./tail";
export { TrurthifyPipe } from "./truthify";
export { UnionPipe } from "./union";
export { UniquePipe } from "./unique";
export { WithoutPipe } from "./without";
export { PluckPipe } from "./pluck";
export { ShufflePipe } from "./shuffle";
export { EveryPipe } from "./every";
export { SomePipe } from "./some";
export { SamplePipe } from "./sample";
export { GroupByPipe } from "./group-by";
export { FilterByPipe } from "./filter-by";
export { OrderByPipe } from "./order-by";
export { GroupByImpurePipe } from "./group-by-impure";
export { FilterByImpurePipe } from "./filter-by-impure";
export { OrderByImpurePipe } from "./order-by-impure";
export { RangePipe } from "./range";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYXJyYXkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFcEMscUJBQU0sV0FBVyxHQUFHO0lBQ2xCLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLGdCQUFnQjtJQUNoQixXQUFXO0lBQ1gsUUFBUTtJQUNSLGFBQWE7SUFDYixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxpQkFBaUI7SUFDakIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsaUJBQWlCO0lBQ2pCLFNBQVM7Q0FDVixDQUFDOzs7OztnQkFFRCxRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFLFdBQVc7b0JBQ3pCLE9BQU8sRUFBRSxFQUFFO29CQUNYLE9BQU8sRUFBRSxXQUFXO2lCQUNyQjs7NkJBckREOztTQXNEYSxrQkFBa0I7QUFFL0IsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaWZmUGlwZSB9IGZyb20gXCIuL2RpZmZcIjtcbmltcG9ydCB7IEluaXRpYWxQaXBlIH0gZnJvbSBcIi4vaW5pdGlhbFwiO1xuaW1wb3J0IHsgRmxhdHRlblBpcGUgfSBmcm9tIFwiLi9mbGF0dGVuXCI7XG5pbXBvcnQgeyBJbnRlcnNlY3Rpb25QaXBlIH0gZnJvbSBcIi4vaW50ZXJzZWN0aW9uXCI7XG5pbXBvcnQgeyBSZXZlcnNlUGlwZSB9IGZyb20gXCIuL3JldmVyc2VcIjtcbmltcG9ydCB7IFRhaWxQaXBlIH0gZnJvbSBcIi4vdGFpbFwiO1xuaW1wb3J0IHsgVHJ1cnRoaWZ5UGlwZSB9IGZyb20gXCIuL3RydXRoaWZ5XCI7XG5pbXBvcnQgeyBVbmlvblBpcGUgfSBmcm9tIFwiLi91bmlvblwiO1xuaW1wb3J0IHsgVW5pcXVlUGlwZSB9IGZyb20gXCIuL3VuaXF1ZVwiO1xuaW1wb3J0IHsgV2l0aG91dFBpcGUgfSBmcm9tIFwiLi93aXRob3V0XCI7XG5pbXBvcnQgeyBQbHVja1BpcGUgfSBmcm9tIFwiLi9wbHVja1wiO1xuaW1wb3J0IHsgU2h1ZmZsZVBpcGUgfSBmcm9tIFwiLi9zaHVmZmxlXCI7XG5pbXBvcnQgeyBFdmVyeVBpcGUgfSBmcm9tIFwiLi9ldmVyeVwiO1xuaW1wb3J0IHsgU29tZVBpcGUgfSBmcm9tIFwiLi9zb21lXCI7XG5pbXBvcnQgeyBTYW1wbGVQaXBlIH0gZnJvbSBcIi4vc2FtcGxlXCI7XG5pbXBvcnQgeyBHcm91cEJ5UGlwZSB9IGZyb20gXCIuL2dyb3VwLWJ5XCI7XG5pbXBvcnQgeyBGaWx0ZXJCeVBpcGUgfSBmcm9tIFwiLi9maWx0ZXItYnlcIjtcbmltcG9ydCB7IE9yZGVyQnlQaXBlIH0gZnJvbSBcIi4vb3JkZXItYnlcIjtcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEdyb3VwQnlJbXB1cmVQaXBlIH0gZnJvbSBcIi4vZ3JvdXAtYnktaW1wdXJlXCI7XG5pbXBvcnQgeyBGaWx0ZXJCeUltcHVyZVBpcGUgfSBmcm9tIFwiLi9maWx0ZXItYnktaW1wdXJlXCI7XG5pbXBvcnQgeyBPcmRlckJ5SW1wdXJlUGlwZSB9IGZyb20gXCIuL29yZGVyLWJ5LWltcHVyZVwiO1xuaW1wb3J0IHsgUmFuZ2VQaXBlIH0gZnJvbSBcIi4vcmFuZ2VcIjtcblxuY29uc3QgQVJSQVlfUElQRVMgPSBbXG4gIERpZmZQaXBlLFxuICBGbGF0dGVuUGlwZSxcbiAgSW5pdGlhbFBpcGUsXG4gIEludGVyc2VjdGlvblBpcGUsXG4gIFJldmVyc2VQaXBlLFxuICBUYWlsUGlwZSxcbiAgVHJ1cnRoaWZ5UGlwZSxcbiAgVW5pb25QaXBlLFxuICBVbmlxdWVQaXBlLFxuICBXaXRob3V0UGlwZSxcbiAgUGx1Y2tQaXBlLFxuICBTaHVmZmxlUGlwZSxcbiAgRXZlcnlQaXBlLFxuICBTb21lUGlwZSxcbiAgU2FtcGxlUGlwZSxcbiAgR3JvdXBCeVBpcGUsXG4gIEdyb3VwQnlJbXB1cmVQaXBlLFxuICBGaWx0ZXJCeVBpcGUsXG4gIEZpbHRlckJ5SW1wdXJlUGlwZSxcbiAgT3JkZXJCeVBpcGUsXG4gIE9yZGVyQnlJbXB1cmVQaXBlLFxuICBSYW5nZVBpcGUsXG5dO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IEFSUkFZX1BJUEVTLFxuICBpbXBvcnRzOiBbXSxcbiAgZXhwb3J0czogQVJSQVlfUElQRVMsXG59KVxuZXhwb3J0IGNsYXNzIE5nQXJyYXlQaXBlc01vZHVsZSB7fVxuXG5leHBvcnQgeyBEaWZmUGlwZSB9IGZyb20gXCIuL2RpZmZcIjtcbmV4cG9ydCB7IEluaXRpYWxQaXBlIH0gZnJvbSBcIi4vaW5pdGlhbFwiO1xuZXhwb3J0IHsgRmxhdHRlblBpcGUgfSBmcm9tIFwiLi9mbGF0dGVuXCI7XG5leHBvcnQgeyBJbnRlcnNlY3Rpb25QaXBlIH0gZnJvbSBcIi4vaW50ZXJzZWN0aW9uXCI7XG5leHBvcnQgeyBSZXZlcnNlUGlwZSB9IGZyb20gXCIuL3JldmVyc2VcIjtcbmV4cG9ydCB7IFRhaWxQaXBlIH0gZnJvbSBcIi4vdGFpbFwiO1xuZXhwb3J0IHsgVHJ1cnRoaWZ5UGlwZSB9IGZyb20gXCIuL3RydXRoaWZ5XCI7XG5leHBvcnQgeyBVbmlvblBpcGUgfSBmcm9tIFwiLi91bmlvblwiO1xuZXhwb3J0IHsgVW5pcXVlUGlwZSB9IGZyb20gXCIuL3VuaXF1ZVwiO1xuZXhwb3J0IHsgV2l0aG91dFBpcGUgfSBmcm9tIFwiLi93aXRob3V0XCI7XG5leHBvcnQgeyBQbHVja1BpcGUgfSBmcm9tIFwiLi9wbHVja1wiO1xuZXhwb3J0IHsgU2h1ZmZsZVBpcGUgfSBmcm9tIFwiLi9zaHVmZmxlXCI7XG5leHBvcnQgeyBFdmVyeVBpcGUgfSBmcm9tIFwiLi9ldmVyeVwiO1xuZXhwb3J0IHsgU29tZVBpcGUgfSBmcm9tIFwiLi9zb21lXCI7XG5leHBvcnQgeyBTYW1wbGVQaXBlIH0gZnJvbSBcIi4vc2FtcGxlXCI7XG5leHBvcnQgeyBHcm91cEJ5UGlwZSB9IGZyb20gXCIuL2dyb3VwLWJ5XCI7XG5leHBvcnQgeyBGaWx0ZXJCeVBpcGUgfSBmcm9tIFwiLi9maWx0ZXItYnlcIjtcbmV4cG9ydCB7IE9yZGVyQnlQaXBlIH0gZnJvbSBcIi4vb3JkZXItYnlcIjtcbmV4cG9ydCB7IEdyb3VwQnlJbXB1cmVQaXBlIH0gZnJvbSBcIi4vZ3JvdXAtYnktaW1wdXJlXCI7XG5leHBvcnQgeyBGaWx0ZXJCeUltcHVyZVBpcGUgfSBmcm9tIFwiLi9maWx0ZXItYnktaW1wdXJlXCI7XG5leHBvcnQgeyBPcmRlckJ5SW1wdXJlUGlwZSB9IGZyb20gXCIuL29yZGVyLWJ5LWltcHVyZVwiO1xuZXhwb3J0IHsgUmFuZ2VQaXBlIH0gZnJvbSBcIi4vcmFuZ2VcIjtcbiJdfQ==