/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from "@angular/core";
import { extractDeepPropertyByMapKey, isFunction } from "../helpers/helpers";
var GroupByPipe = /** @class */ (function () {
    function GroupByPipe() {
    }
    /**
     * @param {?} input
     * @param {?=} discriminator
     * @param {?=} delimiter
     * @return {?}
     */
    GroupByPipe.prototype.transform = /**
     * @param {?} input
     * @param {?=} discriminator
     * @param {?=} delimiter
     * @return {?}
     */
    function (input, discriminator, delimiter) {
        if (discriminator === void 0) { discriminator = []; }
        if (delimiter === void 0) { delimiter = "|"; }
        if (!Array.isArray(input)) {
            return input;
        }
        return this.groupBy(input, discriminator, delimiter);
    };
    /**
     * @param {?} list
     * @param {?} discriminator
     * @param {?} delimiter
     * @return {?}
     */
    GroupByPipe.prototype.groupBy = /**
     * @param {?} list
     * @param {?} discriminator
     * @param {?} delimiter
     * @return {?}
     */
    function (list, discriminator, delimiter) {
        var _this = this;
        return list.reduce(function (acc, payload) {
            var /** @type {?} */ key = _this.extractKeyByDiscriminator(discriminator, payload, delimiter);
            acc[key] = Array.isArray(acc[key]) ? acc[key].concat([payload]) : [payload];
            return acc;
        }, {});
    };
    /**
     * @param {?} discriminator
     * @param {?} payload
     * @param {?} delimiter
     * @return {?}
     */
    GroupByPipe.prototype.extractKeyByDiscriminator = /**
     * @param {?} discriminator
     * @param {?} payload
     * @param {?} delimiter
     * @return {?}
     */
    function (discriminator, payload, delimiter) {
        if (isFunction(discriminator)) {
            return (/** @type {?} */ (discriminator))(payload);
        }
        if (Array.isArray(discriminator)) {
            return discriminator.map(function (k) { return extractDeepPropertyByMapKey(payload, k); }).join(delimiter);
        }
        return extractDeepPropertyByMapKey(payload, /** @type {?} */ (discriminator));
    };
    GroupByPipe.decorators = [
        { type: Pipe, args: [{ name: "groupBy" },] },
    ];
    return GroupByPipe;
}());
export { GroupByPipe };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtYnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYXJyYXkvZ3JvdXAtYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7Ozs7OztJQUkzRSwrQkFBUzs7Ozs7O0lBQVQsVUFBVSxLQUFVLEVBQUUsYUFBdUIsRUFBRSxTQUF1QjtRQUFoRCw4QkFBQSxFQUFBLGtCQUF1QjtRQUFFLDBCQUFBLEVBQUEsZUFBdUI7UUFDcEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2Q7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ3REOzs7Ozs7O0lBRU8sNkJBQU87Ozs7OztjQUFDLElBQVcsRUFBRSxhQUFrQixFQUFFLFNBQWlCOztRQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQVEsRUFBRSxPQUFlO1lBQzNDLHFCQUFNLEdBQUcsR0FBRyxLQUFJLENBQUMseUJBQXlCLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUU5RSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFNUUsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNaLEVBQUUsRUFBRSxDQUFDLENBQUM7Ozs7Ozs7O0lBR0QsK0NBQXlCOzs7Ozs7Y0FBQyxhQUFrQixFQUFFLE9BQWUsRUFBRSxTQUFpQjtRQUN0RixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxtQkFBVyxhQUFhLEVBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMzQztRQUVELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsMkJBQTJCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUF2QyxDQUF1QyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3hGO1FBRUQsTUFBTSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sb0JBQVUsYUFBYSxFQUFDLENBQUM7OztnQkE3QnRFLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7O3NCQUh6Qjs7U0FJYSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXksIGlzRnVuY3Rpb24gfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJncm91cEJ5XCIgfSlcbmV4cG9ydCBjbGFzcyBHcm91cEJ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgZGlzY3JpbWluYXRvcjogYW55ID0gW10sIGRlbGltaXRlcjogc3RyaW5nID0gXCJ8XCIpOiBhbnkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ncm91cEJ5KGlucHV0LCBkaXNjcmltaW5hdG9yLCBkZWxpbWl0ZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBncm91cEJ5KGxpc3Q6IGFueVtdLCBkaXNjcmltaW5hdG9yOiBhbnksIGRlbGltaXRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGxpc3QucmVkdWNlKChhY2M6IGFueSwgcGF5bG9hZDogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSB0aGlzLmV4dHJhY3RLZXlCeURpc2NyaW1pbmF0b3IoZGlzY3JpbWluYXRvciwgcGF5bG9hZCwgZGVsaW1pdGVyKTtcblxuICAgICAgYWNjW2tleV0gPSBBcnJheS5pc0FycmF5KGFjY1trZXldKSA/IGFjY1trZXldLmNvbmNhdChbcGF5bG9hZF0pIDogW3BheWxvYWRdO1xuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdEtleUJ5RGlzY3JpbWluYXRvcihkaXNjcmltaW5hdG9yOiBhbnksIHBheWxvYWQ6IHN0cmluZywgZGVsaW1pdGVyOiBzdHJpbmcpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihkaXNjcmltaW5hdG9yKSkge1xuICAgICAgcmV0dXJuICg8RnVuY3Rpb24+ZGlzY3JpbWluYXRvcikocGF5bG9hZCk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGlzY3JpbWluYXRvcikpIHtcbiAgICAgIHJldHVybiBkaXNjcmltaW5hdG9yLm1hcChrID0+IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShwYXlsb2FkLCBrKSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkocGF5bG9hZCwgPHN0cmluZz5kaXNjcmltaW5hdG9yKTtcbiAgfVxufVxuIl19