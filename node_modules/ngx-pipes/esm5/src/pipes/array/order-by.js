/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe } from "@angular/core";
import { extractDeepPropertyByMapKey, isString, isUndefined } from "../helpers/helpers";
var OrderByPipe = /** @class */ (function () {
    function OrderByPipe() {
    }
    /**
     * @param {?} input
     * @param {?=} config
     * @return {?}
     */
    OrderByPipe.prototype.transform = /**
     * @param {?} input
     * @param {?=} config
     * @return {?}
     */
    function (input, config) {
        if (!Array.isArray(input)) {
            return input;
        }
        var /** @type {?} */ out = tslib_1.__spread(input);
        // sort by multiple properties
        if (Array.isArray(config)) {
            return out.sort(function (a, b) {
                var /** @type {?} */ l = config.length;
                for (var /** @type {?} */ i = 0; i < l; ++i) {
                    var _a = tslib_1.__read(OrderByPipe.extractFromConfig(config[i]), 2), prop = _a[0], asc = _a[1];
                    var /** @type {?} */ pos = OrderByPipe.orderCompare(prop, asc, a, b);
                    if (pos !== 0) {
                        return pos;
                    }
                }
                return 0;
            });
        }
        // sort by a single property value
        if (isString(config)) {
            var _a = tslib_1.__read(OrderByPipe.extractFromConfig(config), 3), prop = _a[0], asc = _a[1], sign = _a[2];
            if (config.length === 1) {
                // tslint:disable-next-line:switch-default
                switch (sign) {
                    case "+":
                        return out.sort(OrderByPipe.simpleSort.bind(this));
                    case "-":
                        return out.sort(OrderByPipe.simpleSort.bind(this)).reverse();
                }
            }
            return out.sort(OrderByPipe.orderCompare.bind(this, prop, asc));
        }
        // default sort by value
        return out.sort(OrderByPipe.simpleSort.bind(this));
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    OrderByPipe.simpleSort = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        return isString(a) && isString(b) ? a.toLowerCase().localeCompare(b.toLowerCase()) : a - b;
    };
    /**
     * @param {?} prop
     * @param {?} asc
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    OrderByPipe.orderCompare = /**
     * @param {?} prop
     * @param {?} asc
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (prop, asc, a, b) {
        var /** @type {?} */ first = extractDeepPropertyByMapKey(a, prop);
        var /** @type {?} */ second = extractDeepPropertyByMapKey(b, prop);
        if (first === second) {
            return 0;
        }
        if (isUndefined(first) || first === "") {
            return 1;
        }
        if (isUndefined(second) || second === "") {
            return -1;
        }
        if (isString(first) && isString(second)) {
            var /** @type {?} */ pos = first.toLowerCase().localeCompare(second.toLowerCase());
            return asc ? pos : -pos;
        }
        return asc ? first - second : second - first;
    };
    /**
     * @param {?} config
     * @return {?}
     */
    OrderByPipe.extractFromConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var /** @type {?} */ sign = config.substr(0, 1);
        var /** @type {?} */ prop = config.replace(/^[-+]/, "");
        var /** @type {?} */ asc = sign !== "-";
        return [prop, asc, sign];
    };
    OrderByPipe.decorators = [
        { type: Pipe, args: [{ name: "orderBy" },] },
    ];
    return OrderByPipe;
}());
export { OrderByPipe };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItYnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYXJyYXkvb3JkZXItYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7Ozs7Ozs7SUFPdEYsK0JBQVM7Ozs7O0lBQVQsVUFBVSxLQUFVLEVBQUUsTUFBWTtRQUNoQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDZDtRQUVELHFCQUFNLEdBQUcsb0JBQU8sS0FBSyxDQUFDLENBQUM7O1FBR3ZCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ25CLHFCQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO2dCQUN4QixHQUFHLENBQUMsQ0FBQyxxQkFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztvQkFDM0Isc0VBQU8sWUFBSSxFQUFFLFdBQUcsQ0FBNkM7b0JBQzdELHFCQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUN0RCxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDZCxNQUFNLENBQUMsR0FBRyxDQUFDO3FCQUNaO2lCQUNGO2dCQUVE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UUFDakMscUJBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLHFCQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssR0FBRyxDQUFDO1FBRXpCLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7OztnQkFuRjVCLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7O3NCQUh6Qjs7U0FJYSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXksIGlzU3RyaW5nLCBpc1VuZGVmaW5lZCB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcIm9yZGVyQnlcIiB9KVxuZXhwb3J0IGNsYXNzIE9yZGVyQnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55W10sIGNvbmZpZz86IGFueSk6IGFueVtdO1xuICB0cmFuc2Zvcm08VD4oaW5wdXQ6IFQsIGNvbmZpZz86IGFueSk6IFQ7XG5cbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIGNvbmZpZz86IGFueSk6IGFueSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIGNvbnN0IG91dCA9IFsuLi5pbnB1dF07XG5cbiAgICAvLyBzb3J0IGJ5IG11bHRpcGxlIHByb3BlcnRpZXNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWcpKSB7XG4gICAgICByZXR1cm4gb3V0LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgY29uc3QgbCA9IGNvbmZpZy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgY29uc3QgW3Byb3AsIGFzY10gPSBPcmRlckJ5UGlwZS5leHRyYWN0RnJvbUNvbmZpZyhjb25maWdbaV0pO1xuICAgICAgICAgIGNvbnN0IHBvcyA9IE9yZGVyQnlQaXBlLm9yZGVyQ29tcGFyZShwcm9wLCBhc2MsIGEsIGIpO1xuICAgICAgICAgIGlmIChwb3MgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBzb3J0IGJ5IGEgc2luZ2xlIHByb3BlcnR5IHZhbHVlXG4gICAgaWYgKGlzU3RyaW5nKGNvbmZpZykpIHtcbiAgICAgIGNvbnN0IFtwcm9wLCBhc2MsIHNpZ25dID0gT3JkZXJCeVBpcGUuZXh0cmFjdEZyb21Db25maWcoY29uZmlnKTtcblxuICAgICAgaWYgKGNvbmZpZy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnN3aXRjaC1kZWZhdWx0XG4gICAgICAgIHN3aXRjaCAoc2lnbikge1xuICAgICAgICAgIGNhc2UgXCIrXCI6XG4gICAgICAgICAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUuc2ltcGxlU29ydC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICBjYXNlIFwiLVwiOlxuICAgICAgICAgICAgcmV0dXJuIG91dC5zb3J0KE9yZGVyQnlQaXBlLnNpbXBsZVNvcnQuYmluZCh0aGlzKSkucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXQuc29ydChPcmRlckJ5UGlwZS5vcmRlckNvbXBhcmUuYmluZCh0aGlzLCBwcm9wLCBhc2MpKTtcbiAgICB9XG5cbiAgICAvLyBkZWZhdWx0IHNvcnQgYnkgdmFsdWVcbiAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUuc2ltcGxlU29ydC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHNpbXBsZVNvcnQoYTogYW55LCBiOiBhbnkpIHtcbiAgICByZXR1cm4gaXNTdHJpbmcoYSkgJiYgaXNTdHJpbmcoYikgPyBhLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShiLnRvTG93ZXJDYXNlKCkpIDogYSAtIGI7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBvcmRlckNvbXBhcmUocHJvcDogc3RyaW5nLCBhc2M6IGJvb2xlYW4sIGE6IGFueSwgYjogYW55KSB7XG4gICAgY29uc3QgZmlyc3QgPSBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkoYSwgcHJvcCk7XG4gICAgY29uc3Qgc2Vjb25kID0gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KGIsIHByb3ApO1xuXG4gICAgaWYgKGZpcnN0ID09PSBzZWNvbmQpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZChmaXJzdCkgfHwgZmlyc3QgPT09IFwiXCIpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZChzZWNvbmQpIHx8IHNlY29uZCA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlmIChpc1N0cmluZyhmaXJzdCkgJiYgaXNTdHJpbmcoc2Vjb25kKSkge1xuICAgICAgY29uc3QgcG9zID0gZmlyc3QudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKHNlY29uZC50b0xvd2VyQ2FzZSgpKTtcblxuICAgICAgcmV0dXJuIGFzYyA/IHBvcyA6IC1wb3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzYyA/IGZpcnN0IC0gc2Vjb25kIDogc2Vjb25kIC0gZmlyc3Q7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBleHRyYWN0RnJvbUNvbmZpZyhjb25maWc6IGFueSkge1xuICAgIGNvbnN0IHNpZ24gPSBjb25maWcuc3Vic3RyKDAsIDEpO1xuICAgIGNvbnN0IHByb3AgPSBjb25maWcucmVwbGFjZSgvXlstK10vLCBcIlwiKTtcbiAgICBjb25zdCBhc2MgPSBzaWduICE9PSBcIi1cIjtcblxuICAgIHJldHVybiBbcHJvcCwgYXNjLCBzaWduXTtcbiAgfVxufVxuIl19