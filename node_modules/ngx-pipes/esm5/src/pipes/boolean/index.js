/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from "@angular/core";
import { IsDefinedPipe } from "./is-defined";
import { IsNullPipe } from "./is-null";
import { IsUndefinedPipe } from "./is-undefined";
import { IsStringPipe } from "./is-string";
import { IsFunctionPipe } from "./is-function";
import { IsNumberPipe } from "./is-number";
import { IsArrayPipe } from "./is-array";
import { IsObjectPipe } from "./is-object";
import { IsGreaterEqualThanPipe } from "./is-greater-equal-than";
import { IsGreaterThanPipe } from "./is-greater-than";
import { IsLessEqualThanPipe } from "./is-less-equal-than";
import { IsEqualToPipe } from "./is-equal-to";
import { IsNotEqualToPipe } from "./is-not-equal-to";
import { IsIdenticalToPipe } from "./is-identical-to";
import { IsNotIdenticalToPipe } from "./is-not-identical-to";
import { IsLessThanPipe } from "./is-less-than";
export var /** @type {?} */ BOOLEAN_PIPES = [
    IsDefinedPipe,
    IsNullPipe,
    IsUndefinedPipe,
    IsStringPipe,
    IsFunctionPipe,
    IsNumberPipe,
    IsArrayPipe,
    IsObjectPipe,
    IsGreaterEqualThanPipe,
    IsGreaterThanPipe,
    IsLessEqualThanPipe,
    IsLessEqualThanPipe,
    IsEqualToPipe,
    IsNotEqualToPipe,
    IsIdenticalToPipe,
    IsNotIdenticalToPipe,
    IsLessThanPipe,
];
var NgBooleanPipesModule = /** @class */ (function () {
    function NgBooleanPipesModule() {
    }
    NgBooleanPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: BOOLEAN_PIPES,
                    imports: [],
                    exports: BOOLEAN_PIPES,
                },] },
    ];
    return NgBooleanPipesModule;
}());
export { NgBooleanPipesModule };
export { IsDefinedPipe } from "./is-defined";
export { IsNullPipe } from "./is-null";
export { IsUndefinedPipe } from "./is-undefined";
export { IsStringPipe } from "./is-string";
export { IsFunctionPipe } from "./is-function";
export { IsNumberPipe } from "./is-number";
export { IsArrayPipe } from "./is-array";
export { IsObjectPipe } from "./is-object";
export { IsGreaterEqualThanPipe } from "./is-greater-equal-than";
export { IsGreaterThanPipe } from "./is-greater-than";
export { IsLessEqualThanPipe } from "./is-less-equal-than";
export { IsEqualToPipe } from "./is-equal-to";
export { IsNotEqualToPipe } from "./is-not-equal-to";
export { IsIdenticalToPipe } from "./is-identical-to";
export { IsNotIdenticalToPipe } from "./is-not-identical-to";
export { IsLessThanPipe } from "./is-less-than";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYm9vbGVhbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRCxNQUFNLENBQUMscUJBQU0sYUFBYSxHQUFHO0lBQzNCLGFBQWE7SUFDYixVQUFVO0lBQ1YsZUFBZTtJQUNmLFlBQVk7SUFDWixjQUFjO0lBQ2QsWUFBWTtJQUNaLFdBQVc7SUFDWCxZQUFZO0lBQ1osc0JBQXNCO0lBQ3RCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLG9CQUFvQjtJQUNwQixjQUFjO0NBQ2YsQ0FBQzs7Ozs7Z0JBRUQsUUFBUSxTQUFDO29CQUNSLFlBQVksRUFBRSxhQUFhO29CQUMzQixPQUFPLEVBQUUsRUFBRTtvQkFDWCxPQUFPLEVBQUUsYUFBYTtpQkFDdkI7OytCQTFDRDs7U0EyQ2Esb0JBQW9CO0FBRWpDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSXNEZWZpbmVkUGlwZSB9IGZyb20gXCIuL2lzLWRlZmluZWRcIjtcbmltcG9ydCB7IElzTnVsbFBpcGUgfSBmcm9tIFwiLi9pcy1udWxsXCI7XG5pbXBvcnQgeyBJc1VuZGVmaW5lZFBpcGUgfSBmcm9tIFwiLi9pcy11bmRlZmluZWRcIjtcbmltcG9ydCB7IElzU3RyaW5nUGlwZSB9IGZyb20gXCIuL2lzLXN0cmluZ1wiO1xuaW1wb3J0IHsgSXNGdW5jdGlvblBpcGUgfSBmcm9tIFwiLi9pcy1mdW5jdGlvblwiO1xuaW1wb3J0IHsgSXNOdW1iZXJQaXBlIH0gZnJvbSBcIi4vaXMtbnVtYmVyXCI7XG5pbXBvcnQgeyBJc0FycmF5UGlwZSB9IGZyb20gXCIuL2lzLWFycmF5XCI7XG5pbXBvcnQgeyBJc09iamVjdFBpcGUgfSBmcm9tIFwiLi9pcy1vYmplY3RcIjtcbmltcG9ydCB7IElzR3JlYXRlckVxdWFsVGhhblBpcGUgfSBmcm9tIFwiLi9pcy1ncmVhdGVyLWVxdWFsLXRoYW5cIjtcbmltcG9ydCB7IElzR3JlYXRlclRoYW5QaXBlIH0gZnJvbSBcIi4vaXMtZ3JlYXRlci10aGFuXCI7XG5pbXBvcnQgeyBJc0xlc3NFcXVhbFRoYW5QaXBlIH0gZnJvbSBcIi4vaXMtbGVzcy1lcXVhbC10aGFuXCI7XG5pbXBvcnQgeyBJc0VxdWFsVG9QaXBlIH0gZnJvbSBcIi4vaXMtZXF1YWwtdG9cIjtcbmltcG9ydCB7IElzTm90RXF1YWxUb1BpcGUgfSBmcm9tIFwiLi9pcy1ub3QtZXF1YWwtdG9cIjtcbmltcG9ydCB7IElzSWRlbnRpY2FsVG9QaXBlIH0gZnJvbSBcIi4vaXMtaWRlbnRpY2FsLXRvXCI7XG5pbXBvcnQgeyBJc05vdElkZW50aWNhbFRvUGlwZSB9IGZyb20gXCIuL2lzLW5vdC1pZGVudGljYWwtdG9cIjtcbmltcG9ydCB7IElzTGVzc1RoYW5QaXBlIH0gZnJvbSBcIi4vaXMtbGVzcy10aGFuXCI7XG5cbmV4cG9ydCBjb25zdCBCT09MRUFOX1BJUEVTID0gW1xuICBJc0RlZmluZWRQaXBlLFxuICBJc051bGxQaXBlLFxuICBJc1VuZGVmaW5lZFBpcGUsXG4gIElzU3RyaW5nUGlwZSxcbiAgSXNGdW5jdGlvblBpcGUsXG4gIElzTnVtYmVyUGlwZSxcbiAgSXNBcnJheVBpcGUsXG4gIElzT2JqZWN0UGlwZSxcbiAgSXNHcmVhdGVyRXF1YWxUaGFuUGlwZSxcbiAgSXNHcmVhdGVyVGhhblBpcGUsXG4gIElzTGVzc0VxdWFsVGhhblBpcGUsXG4gIElzTGVzc0VxdWFsVGhhblBpcGUsXG4gIElzRXF1YWxUb1BpcGUsXG4gIElzTm90RXF1YWxUb1BpcGUsXG4gIElzSWRlbnRpY2FsVG9QaXBlLFxuICBJc05vdElkZW50aWNhbFRvUGlwZSxcbiAgSXNMZXNzVGhhblBpcGUsXG5dO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IEJPT0xFQU5fUElQRVMsXG4gIGltcG9ydHM6IFtdLFxuICBleHBvcnRzOiBCT09MRUFOX1BJUEVTLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Jvb2xlYW5QaXBlc01vZHVsZSB7fVxuXG5leHBvcnQgeyBJc0RlZmluZWRQaXBlIH0gZnJvbSBcIi4vaXMtZGVmaW5lZFwiO1xuZXhwb3J0IHsgSXNOdWxsUGlwZSB9IGZyb20gXCIuL2lzLW51bGxcIjtcbmV4cG9ydCB7IElzVW5kZWZpbmVkUGlwZSB9IGZyb20gXCIuL2lzLXVuZGVmaW5lZFwiO1xuZXhwb3J0IHsgSXNTdHJpbmdQaXBlIH0gZnJvbSBcIi4vaXMtc3RyaW5nXCI7XG5leHBvcnQgeyBJc0Z1bmN0aW9uUGlwZSB9IGZyb20gXCIuL2lzLWZ1bmN0aW9uXCI7XG5leHBvcnQgeyBJc051bWJlclBpcGUgfSBmcm9tIFwiLi9pcy1udW1iZXJcIjtcbmV4cG9ydCB7IElzQXJyYXlQaXBlIH0gZnJvbSBcIi4vaXMtYXJyYXlcIjtcbmV4cG9ydCB7IElzT2JqZWN0UGlwZSB9IGZyb20gXCIuL2lzLW9iamVjdFwiO1xuZXhwb3J0IHsgSXNHcmVhdGVyRXF1YWxUaGFuUGlwZSB9IGZyb20gXCIuL2lzLWdyZWF0ZXItZXF1YWwtdGhhblwiO1xuZXhwb3J0IHsgSXNHcmVhdGVyVGhhblBpcGUgfSBmcm9tIFwiLi9pcy1ncmVhdGVyLXRoYW5cIjtcbmV4cG9ydCB7IElzTGVzc0VxdWFsVGhhblBpcGUgfSBmcm9tIFwiLi9pcy1sZXNzLWVxdWFsLXRoYW5cIjtcbmV4cG9ydCB7IElzRXF1YWxUb1BpcGUgfSBmcm9tIFwiLi9pcy1lcXVhbC10b1wiO1xuZXhwb3J0IHsgSXNOb3RFcXVhbFRvUGlwZSB9IGZyb20gXCIuL2lzLW5vdC1lcXVhbC10b1wiO1xuZXhwb3J0IHsgSXNJZGVudGljYWxUb1BpcGUgfSBmcm9tIFwiLi9pcy1pZGVudGljYWwtdG9cIjtcbmV4cG9ydCB7IElzTm90SWRlbnRpY2FsVG9QaXBlIH0gZnJvbSBcIi4vaXMtbm90LWlkZW50aWNhbC10b1wiO1xuZXhwb3J0IHsgSXNMZXNzVGhhblBpcGUgfSBmcm9tIFwiLi9pcy1sZXNzLXRoYW5cIjtcbiJdfQ==