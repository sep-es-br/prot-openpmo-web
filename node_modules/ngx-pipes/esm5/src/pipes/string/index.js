/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from "@angular/core";
import { UcWordsPipe } from "./ucwords";
import { LeftTrimPipe } from "./ltrim";
import { RepeatPipe } from "./repeat";
import { RightTrimPipe } from "./rtrim";
import { ScanPipe } from "./scan";
import { ShortenPipe } from "./shorten";
import { StripTagsPipe } from "./strip-tags";
import { TrimPipe } from "./trim";
import { UcFirstPipe } from "./ucfirst";
import { SlugifyPipe } from "./slugify";
import { CamelizePipe } from "./camelize";
import { LatinisePipe } from "./latinise";
import { LinesPipe } from "./lines";
import { UnderscorePipe } from "./underscore";
import { MatchPipe } from "./match";
import { TestPipe } from "./test";
import { LeftPadPipe } from "./lpad";
import { RightPadPipe } from "./rpad";
import { WrapPipe } from "./wrap";
export var /** @type {?} */ STRING_PIPES = [
    LeftTrimPipe,
    RepeatPipe,
    RightTrimPipe,
    ScanPipe,
    ShortenPipe,
    StripTagsPipe,
    TrimPipe,
    UcFirstPipe,
    UcWordsPipe,
    SlugifyPipe,
    CamelizePipe,
    LatinisePipe,
    LinesPipe,
    UnderscorePipe,
    MatchPipe,
    TestPipe,
    LeftPadPipe,
    RightPadPipe,
    WrapPipe,
];
var NgStringPipesModule = /** @class */ (function () {
    function NgStringPipesModule() {
    }
    NgStringPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: STRING_PIPES,
                    imports: [],
                    exports: STRING_PIPES,
                },] },
    ];
    return NgStringPipesModule;
}());
export { NgStringPipesModule };
export { UcWordsPipe } from "./ucwords";
export { LeftTrimPipe } from "./ltrim";
export { RepeatPipe } from "./repeat";
export { RightTrimPipe } from "./rtrim";
export { ScanPipe } from "./scan";
export { ShortenPipe } from "./shorten";
export { StripTagsPipe } from "./strip-tags";
export { TrimPipe } from "./trim";
export { UcFirstPipe } from "./ucfirst";
export { SlugifyPipe } from "./slugify";
export { CamelizePipe } from "./camelize";
export { LatinisePipe } from "./latinise";
export { LinesPipe } from "./lines";
export { UnderscorePipe } from "./underscore";
export { MatchPipe } from "./match";
export { TestPipe } from "./test";
export { LeftPadPipe } from "./lpad";
export { RightPadPipe } from "./rpad";
export { WrapPipe } from "./wrap";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvc3RyaW5nL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFbEMsTUFBTSxDQUFDLHFCQUFNLFlBQVksR0FBRztJQUMxQixZQUFZO0lBQ1osVUFBVTtJQUNWLGFBQWE7SUFDYixRQUFRO0lBQ1IsV0FBVztJQUNYLGFBQWE7SUFDYixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsWUFBWTtJQUNaLFlBQVk7SUFDWixTQUFTO0lBQ1QsY0FBYztJQUNkLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFlBQVk7SUFDWixRQUFRO0NBQ1QsQ0FBQzs7Ozs7Z0JBRUQsUUFBUSxTQUFDO29CQUNSLFlBQVksRUFBRSxZQUFZO29CQUMxQixPQUFPLEVBQUUsRUFBRTtvQkFDWCxPQUFPLEVBQUUsWUFBWTtpQkFDdEI7OzhCQS9DRDs7U0FnRGEsbUJBQW1CO0FBRWhDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBVY1dvcmRzUGlwZSB9IGZyb20gXCIuL3Vjd29yZHNcIjtcbmltcG9ydCB7IExlZnRUcmltUGlwZSB9IGZyb20gXCIuL2x0cmltXCI7XG5pbXBvcnQgeyBSZXBlYXRQaXBlIH0gZnJvbSBcIi4vcmVwZWF0XCI7XG5pbXBvcnQgeyBSaWdodFRyaW1QaXBlIH0gZnJvbSBcIi4vcnRyaW1cIjtcbmltcG9ydCB7IFNjYW5QaXBlIH0gZnJvbSBcIi4vc2NhblwiO1xuaW1wb3J0IHsgU2hvcnRlblBpcGUgfSBmcm9tIFwiLi9zaG9ydGVuXCI7XG5pbXBvcnQgeyBTdHJpcFRhZ3NQaXBlIH0gZnJvbSBcIi4vc3RyaXAtdGFnc1wiO1xuaW1wb3J0IHsgVHJpbVBpcGUgfSBmcm9tIFwiLi90cmltXCI7XG5pbXBvcnQgeyBVY0ZpcnN0UGlwZSB9IGZyb20gXCIuL3VjZmlyc3RcIjtcbmltcG9ydCB7IFNsdWdpZnlQaXBlIH0gZnJvbSBcIi4vc2x1Z2lmeVwiO1xuaW1wb3J0IHsgQ2FtZWxpemVQaXBlIH0gZnJvbSBcIi4vY2FtZWxpemVcIjtcbmltcG9ydCB7IExhdGluaXNlUGlwZSB9IGZyb20gXCIuL2xhdGluaXNlXCI7XG5pbXBvcnQgeyBMaW5lc1BpcGUgfSBmcm9tIFwiLi9saW5lc1wiO1xuaW1wb3J0IHsgVW5kZXJzY29yZVBpcGUgfSBmcm9tIFwiLi91bmRlcnNjb3JlXCI7XG5pbXBvcnQgeyBNYXRjaFBpcGUgfSBmcm9tIFwiLi9tYXRjaFwiO1xuaW1wb3J0IHsgVGVzdFBpcGUgfSBmcm9tIFwiLi90ZXN0XCI7XG5pbXBvcnQgeyBMZWZ0UGFkUGlwZSB9IGZyb20gXCIuL2xwYWRcIjtcbmltcG9ydCB7IFJpZ2h0UGFkUGlwZSB9IGZyb20gXCIuL3JwYWRcIjtcbmltcG9ydCB7IFdyYXBQaXBlIH0gZnJvbSBcIi4vd3JhcFwiO1xuXG5leHBvcnQgY29uc3QgU1RSSU5HX1BJUEVTID0gW1xuICBMZWZ0VHJpbVBpcGUsXG4gIFJlcGVhdFBpcGUsXG4gIFJpZ2h0VHJpbVBpcGUsXG4gIFNjYW5QaXBlLFxuICBTaG9ydGVuUGlwZSxcbiAgU3RyaXBUYWdzUGlwZSxcbiAgVHJpbVBpcGUsXG4gIFVjRmlyc3RQaXBlLFxuICBVY1dvcmRzUGlwZSxcbiAgU2x1Z2lmeVBpcGUsXG4gIENhbWVsaXplUGlwZSxcbiAgTGF0aW5pc2VQaXBlLFxuICBMaW5lc1BpcGUsXG4gIFVuZGVyc2NvcmVQaXBlLFxuICBNYXRjaFBpcGUsXG4gIFRlc3RQaXBlLFxuICBMZWZ0UGFkUGlwZSxcbiAgUmlnaHRQYWRQaXBlLFxuICBXcmFwUGlwZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogU1RSSU5HX1BJUEVTLFxuICBpbXBvcnRzOiBbXSxcbiAgZXhwb3J0czogU1RSSU5HX1BJUEVTLFxufSlcbmV4cG9ydCBjbGFzcyBOZ1N0cmluZ1BpcGVzTW9kdWxlIHt9XG5cbmV4cG9ydCB7IFVjV29yZHNQaXBlIH0gZnJvbSBcIi4vdWN3b3Jkc1wiO1xuZXhwb3J0IHsgTGVmdFRyaW1QaXBlIH0gZnJvbSBcIi4vbHRyaW1cIjtcbmV4cG9ydCB7IFJlcGVhdFBpcGUgfSBmcm9tIFwiLi9yZXBlYXRcIjtcbmV4cG9ydCB7IFJpZ2h0VHJpbVBpcGUgfSBmcm9tIFwiLi9ydHJpbVwiO1xuZXhwb3J0IHsgU2NhblBpcGUgfSBmcm9tIFwiLi9zY2FuXCI7XG5leHBvcnQgeyBTaG9ydGVuUGlwZSB9IGZyb20gXCIuL3Nob3J0ZW5cIjtcbmV4cG9ydCB7IFN0cmlwVGFnc1BpcGUgfSBmcm9tIFwiLi9zdHJpcC10YWdzXCI7XG5leHBvcnQgeyBUcmltUGlwZSB9IGZyb20gXCIuL3RyaW1cIjtcbmV4cG9ydCB7IFVjRmlyc3RQaXBlIH0gZnJvbSBcIi4vdWNmaXJzdFwiO1xuZXhwb3J0IHsgU2x1Z2lmeVBpcGUgfSBmcm9tIFwiLi9zbHVnaWZ5XCI7XG5leHBvcnQgeyBDYW1lbGl6ZVBpcGUgfSBmcm9tIFwiLi9jYW1lbGl6ZVwiO1xuZXhwb3J0IHsgTGF0aW5pc2VQaXBlIH0gZnJvbSBcIi4vbGF0aW5pc2VcIjtcbmV4cG9ydCB7IExpbmVzUGlwZSB9IGZyb20gXCIuL2xpbmVzXCI7XG5leHBvcnQgeyBVbmRlcnNjb3JlUGlwZSB9IGZyb20gXCIuL3VuZGVyc2NvcmVcIjtcbmV4cG9ydCB7IE1hdGNoUGlwZSB9IGZyb20gXCIuL21hdGNoXCI7XG5leHBvcnQgeyBUZXN0UGlwZSB9IGZyb20gXCIuL3Rlc3RcIjtcbmV4cG9ydCB7IExlZnRQYWRQaXBlIH0gZnJvbSBcIi4vbHBhZFwiO1xuZXhwb3J0IHsgUmlnaHRQYWRQaXBlIH0gZnJvbSBcIi4vcnBhZFwiO1xuZXhwb3J0IHsgV3JhcFBpcGUgfSBmcm9tIFwiLi93cmFwXCI7XG4iXX0=