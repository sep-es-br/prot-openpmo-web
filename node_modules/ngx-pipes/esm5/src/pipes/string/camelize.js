/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from "@angular/core";
import { isString } from "../helpers/helpers";
var CamelizePipe = /** @class */ (function () {
    function CamelizePipe() {
    }
    /**
     * @param {?} text
     * @param {?=} chars
     * @return {?}
     */
    CamelizePipe.prototype.transform = /**
     * @param {?} text
     * @param {?=} chars
     * @return {?}
     */
    function (text, chars) {
        if (chars === void 0) { chars = "\\s"; }
        if (!isString(text)) {
            return text;
        }
        return text
            .toLowerCase()
            .split(/[-_\s]/g)
            .filter(function (v) { return !!v; })
            .map(function (word, key) {
            return !key ? word : word.slice(0, 1).toUpperCase() + word.slice(1);
        })
            .join("");
    };
    CamelizePipe.decorators = [
        { type: Pipe, args: [{ name: "camelize" },] },
    ];
    return CamelizePipe;
}());
export { CamelizePipe };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FtZWxpemUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvc3RyaW5nL2NhbWVsaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7Ozs7OztJQU81QyxnQ0FBUzs7Ozs7SUFBVCxVQUFVLElBQVMsRUFBRSxLQUFxQjtRQUFyQixzQkFBQSxFQUFBLGFBQXFCO1FBQ3hDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLENBQUMsSUFBSTthQUNSLFdBQVcsRUFBRTthQUNiLEtBQUssQ0FBQyxTQUFTLENBQUM7YUFDaEIsTUFBTSxDQUFDLFVBQUMsQ0FBUyxJQUFLLE9BQUEsQ0FBQyxDQUFDLENBQUMsRUFBSCxDQUFHLENBQUM7YUFDMUIsR0FBRyxDQUFDLFVBQUMsSUFBWSxFQUFFLEdBQVE7WUFDMUIsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDckUsQ0FBQzthQUNELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNiOztnQkFsQkYsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTs7dUJBSDFCOztTQUlhLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG5AUGlwZSh7IG5hbWU6IFwiY2FtZWxpemVcIiB9KVxuZXhwb3J0IGNsYXNzIENhbWVsaXplUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IHN0cmluZywgY2hhcnM/OiBzdHJpbmcpOiBzdHJpbmc7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBjaGFycz86IHN0cmluZyk6IGFueTtcblxuICB0cmFuc2Zvcm0odGV4dDogYW55LCBjaGFyczogc3RyaW5nID0gXCJcXFxcc1wiKTogc3RyaW5nIHtcbiAgICBpZiAoIWlzU3RyaW5nKHRleHQpKSB7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGV4dFxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC5zcGxpdCgvWy1fXFxzXS9nKVxuICAgICAgLmZpbHRlcigodjogc3RyaW5nKSA9PiAhIXYpXG4gICAgICAubWFwKCh3b3JkOiBzdHJpbmcsIGtleTogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiAha2V5ID8gd29yZCA6IHdvcmQuc2xpY2UoMCwgMSkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSk7XG4gICAgICB9KVxuICAgICAgLmpvaW4oXCJcIik7XG4gIH1cbn1cbiJdfQ==