/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { DiffPipe } from "./diff";
import { InitialPipe } from "./initial";
import { FlattenPipe } from "./flatten";
import { IntersectionPipe } from "./intersection";
import { ReversePipe } from "./reverse";
import { TailPipe } from "./tail";
import { TrurthifyPipe } from "./truthify";
import { UnionPipe } from "./union";
import { UniquePipe } from "./unique";
import { WithoutPipe } from "./without";
import { PluckPipe } from "./pluck";
import { ShufflePipe } from "./shuffle";
import { EveryPipe } from "./every";
import { SomePipe } from "./some";
import { SamplePipe } from "./sample";
import { GroupByPipe } from "./group-by";
import { FilterByPipe } from "./filter-by";
import { OrderByPipe } from "./order-by";
import { NgModule } from "@angular/core";
import { GroupByImpurePipe } from "./group-by-impure";
import { FilterByImpurePipe } from "./filter-by-impure";
import { OrderByImpurePipe } from "./order-by-impure";
import { RangePipe } from "./range";
const /** @type {?} */ ARRAY_PIPES = [
    DiffPipe,
    FlattenPipe,
    InitialPipe,
    IntersectionPipe,
    ReversePipe,
    TailPipe,
    TrurthifyPipe,
    UnionPipe,
    UniquePipe,
    WithoutPipe,
    PluckPipe,
    ShufflePipe,
    EveryPipe,
    SomePipe,
    SamplePipe,
    GroupByPipe,
    GroupByImpurePipe,
    FilterByPipe,
    FilterByImpurePipe,
    OrderByPipe,
    OrderByImpurePipe,
    RangePipe,
];
export class NgArrayPipesModule {
}
NgArrayPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: ARRAY_PIPES,
                imports: [],
                exports: ARRAY_PIPES,
            },] },
];
export { DiffPipe } from "./diff";
export { InitialPipe } from "./initial";
export { FlattenPipe } from "./flatten";
export { IntersectionPipe } from "./intersection";
export { ReversePipe } from "./reverse";
export { TailPipe } from "./tail";
export { TrurthifyPipe } from "./truthify";
export { UnionPipe } from "./union";
export { UniquePipe } from "./unique";
export { WithoutPipe } from "./without";
export { PluckPipe } from "./pluck";
export { ShufflePipe } from "./shuffle";
export { EveryPipe } from "./every";
export { SomePipe } from "./some";
export { SamplePipe } from "./sample";
export { GroupByPipe } from "./group-by";
export { FilterByPipe } from "./filter-by";
export { OrderByPipe } from "./order-by";
export { GroupByImpurePipe } from "./group-by-impure";
export { FilterByImpurePipe } from "./filter-by-impure";
export { OrderByImpurePipe } from "./order-by-impure";
export { RangePipe } from "./range";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYXJyYXkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFcEMsdUJBQU0sV0FBVyxHQUFHO0lBQ2xCLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLGdCQUFnQjtJQUNoQixXQUFXO0lBQ1gsUUFBUTtJQUNSLGFBQWE7SUFDYixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxpQkFBaUI7SUFDakIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsaUJBQWlCO0lBQ2pCLFNBQVM7Q0FDVixDQUFDO0FBT0YsTUFBTTs7O1lBTEwsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxXQUFXO2dCQUN6QixPQUFPLEVBQUUsRUFBRTtnQkFDWCxPQUFPLEVBQUUsV0FBVzthQUNyQjs7QUFHRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpZmZQaXBlIH0gZnJvbSBcIi4vZGlmZlwiO1xuaW1wb3J0IHsgSW5pdGlhbFBpcGUgfSBmcm9tIFwiLi9pbml0aWFsXCI7XG5pbXBvcnQgeyBGbGF0dGVuUGlwZSB9IGZyb20gXCIuL2ZsYXR0ZW5cIjtcbmltcG9ydCB7IEludGVyc2VjdGlvblBpcGUgfSBmcm9tIFwiLi9pbnRlcnNlY3Rpb25cIjtcbmltcG9ydCB7IFJldmVyc2VQaXBlIH0gZnJvbSBcIi4vcmV2ZXJzZVwiO1xuaW1wb3J0IHsgVGFpbFBpcGUgfSBmcm9tIFwiLi90YWlsXCI7XG5pbXBvcnQgeyBUcnVydGhpZnlQaXBlIH0gZnJvbSBcIi4vdHJ1dGhpZnlcIjtcbmltcG9ydCB7IFVuaW9uUGlwZSB9IGZyb20gXCIuL3VuaW9uXCI7XG5pbXBvcnQgeyBVbmlxdWVQaXBlIH0gZnJvbSBcIi4vdW5pcXVlXCI7XG5pbXBvcnQgeyBXaXRob3V0UGlwZSB9IGZyb20gXCIuL3dpdGhvdXRcIjtcbmltcG9ydCB7IFBsdWNrUGlwZSB9IGZyb20gXCIuL3BsdWNrXCI7XG5pbXBvcnQgeyBTaHVmZmxlUGlwZSB9IGZyb20gXCIuL3NodWZmbGVcIjtcbmltcG9ydCB7IEV2ZXJ5UGlwZSB9IGZyb20gXCIuL2V2ZXJ5XCI7XG5pbXBvcnQgeyBTb21lUGlwZSB9IGZyb20gXCIuL3NvbWVcIjtcbmltcG9ydCB7IFNhbXBsZVBpcGUgfSBmcm9tIFwiLi9zYW1wbGVcIjtcbmltcG9ydCB7IEdyb3VwQnlQaXBlIH0gZnJvbSBcIi4vZ3JvdXAtYnlcIjtcbmltcG9ydCB7IEZpbHRlckJ5UGlwZSB9IGZyb20gXCIuL2ZpbHRlci1ieVwiO1xuaW1wb3J0IHsgT3JkZXJCeVBpcGUgfSBmcm9tIFwiLi9vcmRlci1ieVwiO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgR3JvdXBCeUltcHVyZVBpcGUgfSBmcm9tIFwiLi9ncm91cC1ieS1pbXB1cmVcIjtcbmltcG9ydCB7IEZpbHRlckJ5SW1wdXJlUGlwZSB9IGZyb20gXCIuL2ZpbHRlci1ieS1pbXB1cmVcIjtcbmltcG9ydCB7IE9yZGVyQnlJbXB1cmVQaXBlIH0gZnJvbSBcIi4vb3JkZXItYnktaW1wdXJlXCI7XG5pbXBvcnQgeyBSYW5nZVBpcGUgfSBmcm9tIFwiLi9yYW5nZVwiO1xuXG5jb25zdCBBUlJBWV9QSVBFUyA9IFtcbiAgRGlmZlBpcGUsXG4gIEZsYXR0ZW5QaXBlLFxuICBJbml0aWFsUGlwZSxcbiAgSW50ZXJzZWN0aW9uUGlwZSxcbiAgUmV2ZXJzZVBpcGUsXG4gIFRhaWxQaXBlLFxuICBUcnVydGhpZnlQaXBlLFxuICBVbmlvblBpcGUsXG4gIFVuaXF1ZVBpcGUsXG4gIFdpdGhvdXRQaXBlLFxuICBQbHVja1BpcGUsXG4gIFNodWZmbGVQaXBlLFxuICBFdmVyeVBpcGUsXG4gIFNvbWVQaXBlLFxuICBTYW1wbGVQaXBlLFxuICBHcm91cEJ5UGlwZSxcbiAgR3JvdXBCeUltcHVyZVBpcGUsXG4gIEZpbHRlckJ5UGlwZSxcbiAgRmlsdGVyQnlJbXB1cmVQaXBlLFxuICBPcmRlckJ5UGlwZSxcbiAgT3JkZXJCeUltcHVyZVBpcGUsXG4gIFJhbmdlUGlwZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogQVJSQVlfUElQRVMsXG4gIGltcG9ydHM6IFtdLFxuICBleHBvcnRzOiBBUlJBWV9QSVBFUyxcbn0pXG5leHBvcnQgY2xhc3MgTmdBcnJheVBpcGVzTW9kdWxlIHt9XG5cbmV4cG9ydCB7IERpZmZQaXBlIH0gZnJvbSBcIi4vZGlmZlwiO1xuZXhwb3J0IHsgSW5pdGlhbFBpcGUgfSBmcm9tIFwiLi9pbml0aWFsXCI7XG5leHBvcnQgeyBGbGF0dGVuUGlwZSB9IGZyb20gXCIuL2ZsYXR0ZW5cIjtcbmV4cG9ydCB7IEludGVyc2VjdGlvblBpcGUgfSBmcm9tIFwiLi9pbnRlcnNlY3Rpb25cIjtcbmV4cG9ydCB7IFJldmVyc2VQaXBlIH0gZnJvbSBcIi4vcmV2ZXJzZVwiO1xuZXhwb3J0IHsgVGFpbFBpcGUgfSBmcm9tIFwiLi90YWlsXCI7XG5leHBvcnQgeyBUcnVydGhpZnlQaXBlIH0gZnJvbSBcIi4vdHJ1dGhpZnlcIjtcbmV4cG9ydCB7IFVuaW9uUGlwZSB9IGZyb20gXCIuL3VuaW9uXCI7XG5leHBvcnQgeyBVbmlxdWVQaXBlIH0gZnJvbSBcIi4vdW5pcXVlXCI7XG5leHBvcnQgeyBXaXRob3V0UGlwZSB9IGZyb20gXCIuL3dpdGhvdXRcIjtcbmV4cG9ydCB7IFBsdWNrUGlwZSB9IGZyb20gXCIuL3BsdWNrXCI7XG5leHBvcnQgeyBTaHVmZmxlUGlwZSB9IGZyb20gXCIuL3NodWZmbGVcIjtcbmV4cG9ydCB7IEV2ZXJ5UGlwZSB9IGZyb20gXCIuL2V2ZXJ5XCI7XG5leHBvcnQgeyBTb21lUGlwZSB9IGZyb20gXCIuL3NvbWVcIjtcbmV4cG9ydCB7IFNhbXBsZVBpcGUgfSBmcm9tIFwiLi9zYW1wbGVcIjtcbmV4cG9ydCB7IEdyb3VwQnlQaXBlIH0gZnJvbSBcIi4vZ3JvdXAtYnlcIjtcbmV4cG9ydCB7IEZpbHRlckJ5UGlwZSB9IGZyb20gXCIuL2ZpbHRlci1ieVwiO1xuZXhwb3J0IHsgT3JkZXJCeVBpcGUgfSBmcm9tIFwiLi9vcmRlci1ieVwiO1xuZXhwb3J0IHsgR3JvdXBCeUltcHVyZVBpcGUgfSBmcm9tIFwiLi9ncm91cC1ieS1pbXB1cmVcIjtcbmV4cG9ydCB7IEZpbHRlckJ5SW1wdXJlUGlwZSB9IGZyb20gXCIuL2ZpbHRlci1ieS1pbXB1cmVcIjtcbmV4cG9ydCB7IE9yZGVyQnlJbXB1cmVQaXBlIH0gZnJvbSBcIi4vb3JkZXItYnktaW1wdXJlXCI7XG5leHBvcnQgeyBSYW5nZVBpcGUgfSBmcm9tIFwiLi9yYW5nZVwiO1xuIl19