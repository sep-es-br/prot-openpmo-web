/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from "@angular/core";
import { extractDeepPropertyByMapKey, isFunction } from "../helpers/helpers";
export class GroupByPipe {
    /**
     * @param {?} input
     * @param {?=} discriminator
     * @param {?=} delimiter
     * @return {?}
     */
    transform(input, discriminator = [], delimiter = "|") {
        if (!Array.isArray(input)) {
            return input;
        }
        return this.groupBy(input, discriminator, delimiter);
    }
    /**
     * @param {?} list
     * @param {?} discriminator
     * @param {?} delimiter
     * @return {?}
     */
    groupBy(list, discriminator, delimiter) {
        return list.reduce((acc, payload) => {
            const /** @type {?} */ key = this.extractKeyByDiscriminator(discriminator, payload, delimiter);
            acc[key] = Array.isArray(acc[key]) ? acc[key].concat([payload]) : [payload];
            return acc;
        }, {});
    }
    /**
     * @param {?} discriminator
     * @param {?} payload
     * @param {?} delimiter
     * @return {?}
     */
    extractKeyByDiscriminator(discriminator, payload, delimiter) {
        if (isFunction(discriminator)) {
            return (/** @type {?} */ (discriminator))(payload);
        }
        if (Array.isArray(discriminator)) {
            return discriminator.map(k => extractDeepPropertyByMapKey(payload, k)).join(delimiter);
        }
        return extractDeepPropertyByMapKey(payload, /** @type {?} */ (discriminator));
    }
}
GroupByPipe.decorators = [
    { type: Pipe, args: [{ name: "groupBy" },] },
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtYnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYXJyYXkvZ3JvdXAtYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUc3RSxNQUFNOzs7Ozs7O0lBQ0osU0FBUyxDQUFDLEtBQVUsRUFBRSxnQkFBcUIsRUFBRSxFQUFFLFlBQW9CLEdBQUc7UUFDcEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2Q7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ3REOzs7Ozs7O0lBRU8sT0FBTyxDQUFDLElBQVcsRUFBRSxhQUFrQixFQUFFLFNBQWlCO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBUSxFQUFFLE9BQWUsRUFBRSxFQUFFO1lBQy9DLHVCQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUU5RSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFNUUsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNaLEVBQUUsRUFBRSxDQUFDLENBQUM7Ozs7Ozs7O0lBR0QseUJBQXlCLENBQUMsYUFBa0IsRUFBRSxPQUFlLEVBQUUsU0FBaUI7UUFDdEYsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixNQUFNLENBQUMsbUJBQVcsYUFBYSxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0M7UUFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN4RjtRQUVELE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxPQUFPLG9CQUFVLGFBQWEsRUFBQyxDQUFDOzs7O1lBN0J0RSxJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXksIGlzRnVuY3Rpb24gfSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbkBQaXBlKHsgbmFtZTogXCJncm91cEJ5XCIgfSlcbmV4cG9ydCBjbGFzcyBHcm91cEJ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgZGlzY3JpbWluYXRvcjogYW55ID0gW10sIGRlbGltaXRlcjogc3RyaW5nID0gXCJ8XCIpOiBhbnkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ncm91cEJ5KGlucHV0LCBkaXNjcmltaW5hdG9yLCBkZWxpbWl0ZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBncm91cEJ5KGxpc3Q6IGFueVtdLCBkaXNjcmltaW5hdG9yOiBhbnksIGRlbGltaXRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGxpc3QucmVkdWNlKChhY2M6IGFueSwgcGF5bG9hZDogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSB0aGlzLmV4dHJhY3RLZXlCeURpc2NyaW1pbmF0b3IoZGlzY3JpbWluYXRvciwgcGF5bG9hZCwgZGVsaW1pdGVyKTtcblxuICAgICAgYWNjW2tleV0gPSBBcnJheS5pc0FycmF5KGFjY1trZXldKSA/IGFjY1trZXldLmNvbmNhdChbcGF5bG9hZF0pIDogW3BheWxvYWRdO1xuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdEtleUJ5RGlzY3JpbWluYXRvcihkaXNjcmltaW5hdG9yOiBhbnksIHBheWxvYWQ6IHN0cmluZywgZGVsaW1pdGVyOiBzdHJpbmcpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihkaXNjcmltaW5hdG9yKSkge1xuICAgICAgcmV0dXJuICg8RnVuY3Rpb24+ZGlzY3JpbWluYXRvcikocGF5bG9hZCk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGlzY3JpbWluYXRvcikpIHtcbiAgICAgIHJldHVybiBkaXNjcmltaW5hdG9yLm1hcChrID0+IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShwYXlsb2FkLCBrKSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkocGF5bG9hZCwgPHN0cmluZz5kaXNjcmltaW5hdG9yKTtcbiAgfVxufVxuIl19