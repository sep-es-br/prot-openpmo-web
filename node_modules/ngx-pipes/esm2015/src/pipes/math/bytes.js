/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from "@angular/core";
import { applyPrecision, isNumberFinite, isUndefined } from "../helpers/helpers";
export class BytesPipe {
    constructor() {
        this.dictionary = [
            { max: 1024, type: "B" },
            { max: 1048576, type: "KB" },
            { max: 1073741824, type: "MB" },
            { max: 1.0995116e12, type: "GB" },
        ];
    }
    /**
     * @param {?} value
     * @param {?=} precision
     * @return {?}
     */
    transform(value, precision) {
        if (!isNumberFinite(value)) {
            return NaN;
        }
        const /** @type {?} */ format = this.dictionary.find(d => value < d.max) || this.dictionary[this.dictionary.length - 1];
        const /** @type {?} */ calc = value / (format.max / 1024);
        const /** @type {?} */ num = isUndefined(precision) ? calc : applyPrecision(calc, precision);
        return `${num} ${format.type}`;
    }
}
BytesPipe.decorators = [
    { type: Pipe, args: [{ name: "bytes" },] },
];
function BytesPipe_tsickle_Closure_declarations() {
    /** @type {?} */
    BytesPipe.prototype.dictionary;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnl0ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvbWF0aC9ieXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHakYsTUFBTTs7MEJBQ3VEO1lBQ3pELEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFO1lBQ3hCLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO1lBQzVCLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO1lBQy9CLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO1NBQ2xDOzs7Ozs7O0lBRUQsU0FBUyxDQUFDLEtBQWEsRUFBRSxTQUE4QjtRQUNyRCxFQUFFLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNaO1FBRUQsdUJBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZHLHVCQUFNLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3pDLHVCQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUU1RSxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ2hDOzs7WUFuQkYsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgYXBwbHlQcmVjaXNpb24sIGlzTnVtYmVyRmluaXRlLCBpc1VuZGVmaW5lZCB9IGZyb20gXCIuLi9oZWxwZXJzL2hlbHBlcnNcIjtcblxuQFBpcGUoeyBuYW1lOiBcImJ5dGVzXCIgfSlcbmV4cG9ydCBjbGFzcyBCeXRlc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgcHJpdmF0ZSBkaWN0aW9uYXJ5OiBBcnJheTx7IG1heDogbnVtYmVyOyB0eXBlOiBzdHJpbmcgfT4gPSBbXG4gICAgeyBtYXg6IDEwMjQsIHR5cGU6IFwiQlwiIH0sXG4gICAgeyBtYXg6IDEwNDg1NzYsIHR5cGU6IFwiS0JcIiB9LFxuICAgIHsgbWF4OiAxMDczNzQxODI0LCB0eXBlOiBcIk1CXCIgfSxcbiAgICB7IG1heDogMS4wOTk1MTE2ZTEyLCB0eXBlOiBcIkdCXCIgfSxcbiAgXTtcblxuICB0cmFuc2Zvcm0odmFsdWU6IG51bWJlciwgcHJlY2lzaW9uPzogbnVtYmVyIHwgdW5kZWZpbmVkKTogc3RyaW5nIHwgbnVtYmVyIHtcbiAgICBpZiAoIWlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICBjb25zdCBmb3JtYXQgPSB0aGlzLmRpY3Rpb25hcnkuZmluZChkID0+IHZhbHVlIDwgZC5tYXgpIHx8IHRoaXMuZGljdGlvbmFyeVt0aGlzLmRpY3Rpb25hcnkubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgY2FsYyA9IHZhbHVlIC8gKGZvcm1hdC5tYXggLyAxMDI0KTtcbiAgICBjb25zdCBudW0gPSBpc1VuZGVmaW5lZChwcmVjaXNpb24pID8gY2FsYyA6IGFwcGx5UHJlY2lzaW9uKGNhbGMsIHByZWNpc2lvbik7XG5cbiAgICByZXR1cm4gYCR7bnVtfSAke2Zvcm1hdC50eXBlfWA7XG4gIH1cbn1cbiJdfQ==