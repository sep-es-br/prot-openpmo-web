/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from "@angular/core";
import { IsDefinedPipe } from "./is-defined";
import { IsNullPipe } from "./is-null";
import { IsUndefinedPipe } from "./is-undefined";
import { IsStringPipe } from "./is-string";
import { IsFunctionPipe } from "./is-function";
import { IsNumberPipe } from "./is-number";
import { IsArrayPipe } from "./is-array";
import { IsObjectPipe } from "./is-object";
import { IsGreaterEqualThanPipe } from "./is-greater-equal-than";
import { IsGreaterThanPipe } from "./is-greater-than";
import { IsLessEqualThanPipe } from "./is-less-equal-than";
import { IsEqualToPipe } from "./is-equal-to";
import { IsNotEqualToPipe } from "./is-not-equal-to";
import { IsIdenticalToPipe } from "./is-identical-to";
import { IsNotIdenticalToPipe } from "./is-not-identical-to";
import { IsLessThanPipe } from "./is-less-than";
export const /** @type {?} */ BOOLEAN_PIPES = [
    IsDefinedPipe,
    IsNullPipe,
    IsUndefinedPipe,
    IsStringPipe,
    IsFunctionPipe,
    IsNumberPipe,
    IsArrayPipe,
    IsObjectPipe,
    IsGreaterEqualThanPipe,
    IsGreaterThanPipe,
    IsLessEqualThanPipe,
    IsLessEqualThanPipe,
    IsEqualToPipe,
    IsNotEqualToPipe,
    IsIdenticalToPipe,
    IsNotIdenticalToPipe,
    IsLessThanPipe,
];
export class NgBooleanPipesModule {
}
NgBooleanPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: BOOLEAN_PIPES,
                imports: [],
                exports: BOOLEAN_PIPES,
            },] },
];
export { IsDefinedPipe } from "./is-defined";
export { IsNullPipe } from "./is-null";
export { IsUndefinedPipe } from "./is-undefined";
export { IsStringPipe } from "./is-string";
export { IsFunctionPipe } from "./is-function";
export { IsNumberPipe } from "./is-number";
export { IsArrayPipe } from "./is-array";
export { IsObjectPipe } from "./is-object";
export { IsGreaterEqualThanPipe } from "./is-greater-equal-than";
export { IsGreaterThanPipe } from "./is-greater-than";
export { IsLessEqualThanPipe } from "./is-less-equal-than";
export { IsEqualToPipe } from "./is-equal-to";
export { IsNotEqualToPipe } from "./is-not-equal-to";
export { IsIdenticalToPipe } from "./is-identical-to";
export { IsNotIdenticalToPipe } from "./is-not-identical-to";
export { IsLessThanPipe } from "./is-less-than";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYm9vbGVhbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRCxNQUFNLENBQUMsdUJBQU0sYUFBYSxHQUFHO0lBQzNCLGFBQWE7SUFDYixVQUFVO0lBQ1YsZUFBZTtJQUNmLFlBQVk7SUFDWixjQUFjO0lBQ2QsWUFBWTtJQUNaLFdBQVc7SUFDWCxZQUFZO0lBQ1osc0JBQXNCO0lBQ3RCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLG9CQUFvQjtJQUNwQixjQUFjO0NBQ2YsQ0FBQztBQU9GLE1BQU07OztZQUxMLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsYUFBYTtnQkFDM0IsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsT0FBTyxFQUFFLGFBQWE7YUFDdkI7O0FBR0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDakUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJc0RlZmluZWRQaXBlIH0gZnJvbSBcIi4vaXMtZGVmaW5lZFwiO1xuaW1wb3J0IHsgSXNOdWxsUGlwZSB9IGZyb20gXCIuL2lzLW51bGxcIjtcbmltcG9ydCB7IElzVW5kZWZpbmVkUGlwZSB9IGZyb20gXCIuL2lzLXVuZGVmaW5lZFwiO1xuaW1wb3J0IHsgSXNTdHJpbmdQaXBlIH0gZnJvbSBcIi4vaXMtc3RyaW5nXCI7XG5pbXBvcnQgeyBJc0Z1bmN0aW9uUGlwZSB9IGZyb20gXCIuL2lzLWZ1bmN0aW9uXCI7XG5pbXBvcnQgeyBJc051bWJlclBpcGUgfSBmcm9tIFwiLi9pcy1udW1iZXJcIjtcbmltcG9ydCB7IElzQXJyYXlQaXBlIH0gZnJvbSBcIi4vaXMtYXJyYXlcIjtcbmltcG9ydCB7IElzT2JqZWN0UGlwZSB9IGZyb20gXCIuL2lzLW9iamVjdFwiO1xuaW1wb3J0IHsgSXNHcmVhdGVyRXF1YWxUaGFuUGlwZSB9IGZyb20gXCIuL2lzLWdyZWF0ZXItZXF1YWwtdGhhblwiO1xuaW1wb3J0IHsgSXNHcmVhdGVyVGhhblBpcGUgfSBmcm9tIFwiLi9pcy1ncmVhdGVyLXRoYW5cIjtcbmltcG9ydCB7IElzTGVzc0VxdWFsVGhhblBpcGUgfSBmcm9tIFwiLi9pcy1sZXNzLWVxdWFsLXRoYW5cIjtcbmltcG9ydCB7IElzRXF1YWxUb1BpcGUgfSBmcm9tIFwiLi9pcy1lcXVhbC10b1wiO1xuaW1wb3J0IHsgSXNOb3RFcXVhbFRvUGlwZSB9IGZyb20gXCIuL2lzLW5vdC1lcXVhbC10b1wiO1xuaW1wb3J0IHsgSXNJZGVudGljYWxUb1BpcGUgfSBmcm9tIFwiLi9pcy1pZGVudGljYWwtdG9cIjtcbmltcG9ydCB7IElzTm90SWRlbnRpY2FsVG9QaXBlIH0gZnJvbSBcIi4vaXMtbm90LWlkZW50aWNhbC10b1wiO1xuaW1wb3J0IHsgSXNMZXNzVGhhblBpcGUgfSBmcm9tIFwiLi9pcy1sZXNzLXRoYW5cIjtcblxuZXhwb3J0IGNvbnN0IEJPT0xFQU5fUElQRVMgPSBbXG4gIElzRGVmaW5lZFBpcGUsXG4gIElzTnVsbFBpcGUsXG4gIElzVW5kZWZpbmVkUGlwZSxcbiAgSXNTdHJpbmdQaXBlLFxuICBJc0Z1bmN0aW9uUGlwZSxcbiAgSXNOdW1iZXJQaXBlLFxuICBJc0FycmF5UGlwZSxcbiAgSXNPYmplY3RQaXBlLFxuICBJc0dyZWF0ZXJFcXVhbFRoYW5QaXBlLFxuICBJc0dyZWF0ZXJUaGFuUGlwZSxcbiAgSXNMZXNzRXF1YWxUaGFuUGlwZSxcbiAgSXNMZXNzRXF1YWxUaGFuUGlwZSxcbiAgSXNFcXVhbFRvUGlwZSxcbiAgSXNOb3RFcXVhbFRvUGlwZSxcbiAgSXNJZGVudGljYWxUb1BpcGUsXG4gIElzTm90SWRlbnRpY2FsVG9QaXBlLFxuICBJc0xlc3NUaGFuUGlwZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogQk9PTEVBTl9QSVBFUyxcbiAgaW1wb3J0czogW10sXG4gIGV4cG9ydHM6IEJPT0xFQU5fUElQRVMsXG59KVxuZXhwb3J0IGNsYXNzIE5nQm9vbGVhblBpcGVzTW9kdWxlIHt9XG5cbmV4cG9ydCB7IElzRGVmaW5lZFBpcGUgfSBmcm9tIFwiLi9pcy1kZWZpbmVkXCI7XG5leHBvcnQgeyBJc051bGxQaXBlIH0gZnJvbSBcIi4vaXMtbnVsbFwiO1xuZXhwb3J0IHsgSXNVbmRlZmluZWRQaXBlIH0gZnJvbSBcIi4vaXMtdW5kZWZpbmVkXCI7XG5leHBvcnQgeyBJc1N0cmluZ1BpcGUgfSBmcm9tIFwiLi9pcy1zdHJpbmdcIjtcbmV4cG9ydCB7IElzRnVuY3Rpb25QaXBlIH0gZnJvbSBcIi4vaXMtZnVuY3Rpb25cIjtcbmV4cG9ydCB7IElzTnVtYmVyUGlwZSB9IGZyb20gXCIuL2lzLW51bWJlclwiO1xuZXhwb3J0IHsgSXNBcnJheVBpcGUgfSBmcm9tIFwiLi9pcy1hcnJheVwiO1xuZXhwb3J0IHsgSXNPYmplY3RQaXBlIH0gZnJvbSBcIi4vaXMtb2JqZWN0XCI7XG5leHBvcnQgeyBJc0dyZWF0ZXJFcXVhbFRoYW5QaXBlIH0gZnJvbSBcIi4vaXMtZ3JlYXRlci1lcXVhbC10aGFuXCI7XG5leHBvcnQgeyBJc0dyZWF0ZXJUaGFuUGlwZSB9IGZyb20gXCIuL2lzLWdyZWF0ZXItdGhhblwiO1xuZXhwb3J0IHsgSXNMZXNzRXF1YWxUaGFuUGlwZSB9IGZyb20gXCIuL2lzLWxlc3MtZXF1YWwtdGhhblwiO1xuZXhwb3J0IHsgSXNFcXVhbFRvUGlwZSB9IGZyb20gXCIuL2lzLWVxdWFsLXRvXCI7XG5leHBvcnQgeyBJc05vdEVxdWFsVG9QaXBlIH0gZnJvbSBcIi4vaXMtbm90LWVxdWFsLXRvXCI7XG5leHBvcnQgeyBJc0lkZW50aWNhbFRvUGlwZSB9IGZyb20gXCIuL2lzLWlkZW50aWNhbC10b1wiO1xuZXhwb3J0IHsgSXNOb3RJZGVudGljYWxUb1BpcGUgfSBmcm9tIFwiLi9pcy1ub3QtaWRlbnRpY2FsLXRvXCI7XG5leHBvcnQgeyBJc0xlc3NUaGFuUGlwZSB9IGZyb20gXCIuL2lzLWxlc3MtdGhhblwiO1xuIl19