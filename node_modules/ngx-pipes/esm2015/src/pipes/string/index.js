/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from "@angular/core";
import { UcWordsPipe } from "./ucwords";
import { LeftTrimPipe } from "./ltrim";
import { RepeatPipe } from "./repeat";
import { RightTrimPipe } from "./rtrim";
import { ScanPipe } from "./scan";
import { ShortenPipe } from "./shorten";
import { StripTagsPipe } from "./strip-tags";
import { TrimPipe } from "./trim";
import { UcFirstPipe } from "./ucfirst";
import { SlugifyPipe } from "./slugify";
import { CamelizePipe } from "./camelize";
import { LatinisePipe } from "./latinise";
import { LinesPipe } from "./lines";
import { UnderscorePipe } from "./underscore";
import { MatchPipe } from "./match";
import { TestPipe } from "./test";
import { LeftPadPipe } from "./lpad";
import { RightPadPipe } from "./rpad";
import { WrapPipe } from "./wrap";
export const /** @type {?} */ STRING_PIPES = [
    LeftTrimPipe,
    RepeatPipe,
    RightTrimPipe,
    ScanPipe,
    ShortenPipe,
    StripTagsPipe,
    TrimPipe,
    UcFirstPipe,
    UcWordsPipe,
    SlugifyPipe,
    CamelizePipe,
    LatinisePipe,
    LinesPipe,
    UnderscorePipe,
    MatchPipe,
    TestPipe,
    LeftPadPipe,
    RightPadPipe,
    WrapPipe,
];
export class NgStringPipesModule {
}
NgStringPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: STRING_PIPES,
                imports: [],
                exports: STRING_PIPES,
            },] },
];
export { UcWordsPipe } from "./ucwords";
export { LeftTrimPipe } from "./ltrim";
export { RepeatPipe } from "./repeat";
export { RightTrimPipe } from "./rtrim";
export { ScanPipe } from "./scan";
export { ShortenPipe } from "./shorten";
export { StripTagsPipe } from "./strip-tags";
export { TrimPipe } from "./trim";
export { UcFirstPipe } from "./ucfirst";
export { SlugifyPipe } from "./slugify";
export { CamelizePipe } from "./camelize";
export { LatinisePipe } from "./latinise";
export { LinesPipe } from "./lines";
export { UnderscorePipe } from "./underscore";
export { MatchPipe } from "./match";
export { TestPipe } from "./test";
export { LeftPadPipe } from "./lpad";
export { RightPadPipe } from "./rpad";
export { WrapPipe } from "./wrap";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvc3RyaW5nL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFbEMsTUFBTSxDQUFDLHVCQUFNLFlBQVksR0FBRztJQUMxQixZQUFZO0lBQ1osVUFBVTtJQUNWLGFBQWE7SUFDYixRQUFRO0lBQ1IsV0FBVztJQUNYLGFBQWE7SUFDYixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsWUFBWTtJQUNaLFlBQVk7SUFDWixTQUFTO0lBQ1QsY0FBYztJQUNkLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFlBQVk7SUFDWixRQUFRO0NBQ1QsQ0FBQztBQU9GLE1BQU07OztZQUxMLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsWUFBWTtnQkFDMUIsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsT0FBTyxFQUFFLFlBQVk7YUFDdEI7O0FBR0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDMUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDdEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFVjV29yZHNQaXBlIH0gZnJvbSBcIi4vdWN3b3Jkc1wiO1xuaW1wb3J0IHsgTGVmdFRyaW1QaXBlIH0gZnJvbSBcIi4vbHRyaW1cIjtcbmltcG9ydCB7IFJlcGVhdFBpcGUgfSBmcm9tIFwiLi9yZXBlYXRcIjtcbmltcG9ydCB7IFJpZ2h0VHJpbVBpcGUgfSBmcm9tIFwiLi9ydHJpbVwiO1xuaW1wb3J0IHsgU2NhblBpcGUgfSBmcm9tIFwiLi9zY2FuXCI7XG5pbXBvcnQgeyBTaG9ydGVuUGlwZSB9IGZyb20gXCIuL3Nob3J0ZW5cIjtcbmltcG9ydCB7IFN0cmlwVGFnc1BpcGUgfSBmcm9tIFwiLi9zdHJpcC10YWdzXCI7XG5pbXBvcnQgeyBUcmltUGlwZSB9IGZyb20gXCIuL3RyaW1cIjtcbmltcG9ydCB7IFVjRmlyc3RQaXBlIH0gZnJvbSBcIi4vdWNmaXJzdFwiO1xuaW1wb3J0IHsgU2x1Z2lmeVBpcGUgfSBmcm9tIFwiLi9zbHVnaWZ5XCI7XG5pbXBvcnQgeyBDYW1lbGl6ZVBpcGUgfSBmcm9tIFwiLi9jYW1lbGl6ZVwiO1xuaW1wb3J0IHsgTGF0aW5pc2VQaXBlIH0gZnJvbSBcIi4vbGF0aW5pc2VcIjtcbmltcG9ydCB7IExpbmVzUGlwZSB9IGZyb20gXCIuL2xpbmVzXCI7XG5pbXBvcnQgeyBVbmRlcnNjb3JlUGlwZSB9IGZyb20gXCIuL3VuZGVyc2NvcmVcIjtcbmltcG9ydCB7IE1hdGNoUGlwZSB9IGZyb20gXCIuL21hdGNoXCI7XG5pbXBvcnQgeyBUZXN0UGlwZSB9IGZyb20gXCIuL3Rlc3RcIjtcbmltcG9ydCB7IExlZnRQYWRQaXBlIH0gZnJvbSBcIi4vbHBhZFwiO1xuaW1wb3J0IHsgUmlnaHRQYWRQaXBlIH0gZnJvbSBcIi4vcnBhZFwiO1xuaW1wb3J0IHsgV3JhcFBpcGUgfSBmcm9tIFwiLi93cmFwXCI7XG5cbmV4cG9ydCBjb25zdCBTVFJJTkdfUElQRVMgPSBbXG4gIExlZnRUcmltUGlwZSxcbiAgUmVwZWF0UGlwZSxcbiAgUmlnaHRUcmltUGlwZSxcbiAgU2NhblBpcGUsXG4gIFNob3J0ZW5QaXBlLFxuICBTdHJpcFRhZ3NQaXBlLFxuICBUcmltUGlwZSxcbiAgVWNGaXJzdFBpcGUsXG4gIFVjV29yZHNQaXBlLFxuICBTbHVnaWZ5UGlwZSxcbiAgQ2FtZWxpemVQaXBlLFxuICBMYXRpbmlzZVBpcGUsXG4gIExpbmVzUGlwZSxcbiAgVW5kZXJzY29yZVBpcGUsXG4gIE1hdGNoUGlwZSxcbiAgVGVzdFBpcGUsXG4gIExlZnRQYWRQaXBlLFxuICBSaWdodFBhZFBpcGUsXG4gIFdyYXBQaXBlLFxuXTtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBTVFJJTkdfUElQRVMsXG4gIGltcG9ydHM6IFtdLFxuICBleHBvcnRzOiBTVFJJTkdfUElQRVMsXG59KVxuZXhwb3J0IGNsYXNzIE5nU3RyaW5nUGlwZXNNb2R1bGUge31cblxuZXhwb3J0IHsgVWNXb3Jkc1BpcGUgfSBmcm9tIFwiLi91Y3dvcmRzXCI7XG5leHBvcnQgeyBMZWZ0VHJpbVBpcGUgfSBmcm9tIFwiLi9sdHJpbVwiO1xuZXhwb3J0IHsgUmVwZWF0UGlwZSB9IGZyb20gXCIuL3JlcGVhdFwiO1xuZXhwb3J0IHsgUmlnaHRUcmltUGlwZSB9IGZyb20gXCIuL3J0cmltXCI7XG5leHBvcnQgeyBTY2FuUGlwZSB9IGZyb20gXCIuL3NjYW5cIjtcbmV4cG9ydCB7IFNob3J0ZW5QaXBlIH0gZnJvbSBcIi4vc2hvcnRlblwiO1xuZXhwb3J0IHsgU3RyaXBUYWdzUGlwZSB9IGZyb20gXCIuL3N0cmlwLXRhZ3NcIjtcbmV4cG9ydCB7IFRyaW1QaXBlIH0gZnJvbSBcIi4vdHJpbVwiO1xuZXhwb3J0IHsgVWNGaXJzdFBpcGUgfSBmcm9tIFwiLi91Y2ZpcnN0XCI7XG5leHBvcnQgeyBTbHVnaWZ5UGlwZSB9IGZyb20gXCIuL3NsdWdpZnlcIjtcbmV4cG9ydCB7IENhbWVsaXplUGlwZSB9IGZyb20gXCIuL2NhbWVsaXplXCI7XG5leHBvcnQgeyBMYXRpbmlzZVBpcGUgfSBmcm9tIFwiLi9sYXRpbmlzZVwiO1xuZXhwb3J0IHsgTGluZXNQaXBlIH0gZnJvbSBcIi4vbGluZXNcIjtcbmV4cG9ydCB7IFVuZGVyc2NvcmVQaXBlIH0gZnJvbSBcIi4vdW5kZXJzY29yZVwiO1xuZXhwb3J0IHsgTWF0Y2hQaXBlIH0gZnJvbSBcIi4vbWF0Y2hcIjtcbmV4cG9ydCB7IFRlc3RQaXBlIH0gZnJvbSBcIi4vdGVzdFwiO1xuZXhwb3J0IHsgTGVmdFBhZFBpcGUgfSBmcm9tIFwiLi9scGFkXCI7XG5leHBvcnQgeyBSaWdodFBhZFBpcGUgfSBmcm9tIFwiLi9ycGFkXCI7XG5leHBvcnQgeyBXcmFwUGlwZSB9IGZyb20gXCIuL3dyYXBcIjtcbiJdfQ==