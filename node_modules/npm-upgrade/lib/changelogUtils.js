'use strict';

exports.__esModule = true;
exports.findModuleChangelogUrl = exports.fetchRemoteDb = undefined;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let findModuleChangelogUrl = exports.findModuleChangelogUrl = (() => {
  var _ref2 = (0, _asyncToGenerator3.default)(function* (moduleName, remoteChangelogUrlsDbUrl = DEFAULT_REMOTE_CHANGELOGS_DB_URL) {
    let changelogUrls;

    if (remoteChangelogUrlsDbUrl) {
      changelogUrls = yield fetchRemoteDb(remoteChangelogUrlsDbUrl);
    }

    changelogUrls = changelogUrls || require('../db/changelogUrls.json');

    if (changelogUrls[moduleName]) {
      return changelogUrls[moduleName];
    }

    var _ref3 = yield (0, _packageUtils.getModuleInfo)(moduleName);

    const changelog = _ref3.changelog,
          repository = _ref3.repository;


    if (changelog) {
      return changelog;
    }

    if (repository && repository.url) {
      // If repository is located on one of known hostings, then we will try to request
      // some common changelog files from there or return URL for "Releases" page
      var _ref4 = (0, _repositoryUtils.getRepositoryInfo)(repository.url) || {};

      const fileUrlBuilder = _ref4.fileUrlBuilder,
            releasesPageUrl = _ref4.releasesPageUrl;


      if (fileUrlBuilder) {
        const possibleChangelogUrls = _lodash2.default.map(COMMON_CHANGELOG_FILES, fileUrlBuilder);

        try {
          return yield _bluebird2.default.any(_lodash2.default.map(possibleChangelogUrls, function (url) {
            return _bluebird2.default.try(function () {
              return (0, _got2.default)(url);
            }).return(url);
          }));
        } catch (err) {
          if (!(err instanceof _bluebird2.default.AggregateError)) throw err;
        }
      }

      if (releasesPageUrl) {
        try {
          // Checking `releasesUrl`...
          yield (0, _got2.default)(releasesPageUrl);
          // `releasesUrl` is fine
          return releasesPageUrl;
        } catch (err) {
          // `releasesPageUrl` is broken
        }
      }
    }

    return null;
  });

  return function findModuleChangelogUrl(_x) {
    return _ref2.apply(this, arguments);
  };
})();

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _got = require('got');

var _got2 = _interopRequireDefault(_got);

var _packageUtils = require('./packageUtils');

var _repositoryUtils = require('./repositoryUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const pkg = require('../package.json');

const COMMON_CHANGELOG_FILES = ['CHANGELOG.md', 'History.md', 'CHANGES.md', 'CHANGELOG'];
const CURRENT_REPOSITORY_ID = (0, _repositoryUtils.getRepositoryInfo)(pkg.repository.url).repositoryId;
const DEFAULT_REMOTE_CHANGELOGS_DB_URL = `https://raw.githubusercontent.com/${CURRENT_REPOSITORY_ID}/master/db/changelogUrls.json`;

const fetchRemoteDb = exports.fetchRemoteDb = _lodash2.default.memoize((() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (url = DEFAULT_REMOTE_CHANGELOGS_DB_URL) {
    try {
      const response = yield (0, _got2.default)(url, { json: true });

      return response.body;
    } catch (err) {
      return null;
    }
  });

  return function () {
    return _ref.apply(this, arguments);
  };
})());