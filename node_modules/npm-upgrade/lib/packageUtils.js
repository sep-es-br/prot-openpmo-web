'use strict';

exports.__esModule = true;
exports.getModuleInfo = exports.DEPS_GROUPS = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.loadPackageJson = loadPackageJson;
exports.findModuleDepsGroup = findModuleDepsGroup;
exports.getModuleVersion = getModuleVersion;
exports.setModuleVersion = setModuleVersion;
exports.getModuleHomepage = getModuleHomepage;

var _path = require('path');

var _fs = require('fs');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _npm = require('npm');

var _npm2 = _interopRequireDefault(_npm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEPS_GROUPS = exports.DEPS_GROUPS = [{ name: 'production', field: 'dependencies', cliOption: true }, { name: 'optional', field: 'optionalDependencies', cliOption: true }, { name: 'development', field: 'devDependencies', cliOption: true }, { name: 'peer', field: 'peerDependencies', cliOption: false }];

function loadPackageJson() {
  const packageFile = (0, _path.resolve)('./package.json');
  let packageJson;
  let packageSource;

  try {
    packageSource = (0, _fs.readFileSync)(packageFile, 'utf-8');
    packageJson = JSON.parse(packageSource);
  } catch (err) {
    console.error(`Error loading package.json: ${err.message}`);
    process.exit(1);
  }

  return { path: packageFile, content: packageJson, source: packageSource };
}

function findModuleDepsGroup(moduleName, packageJson) {
  for (var _iterator = _lodash2.default.map(DEPS_GROUPS, 'field'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    const group = _ref;

    const modules = packageJson[group];

    if (modules && modules[moduleName]) {
      return modules;
    }
  }

  return null;
}

function getModuleVersion(moduleName, packageJson) {
  const depsGroup = findModuleDepsGroup(moduleName, packageJson);

  return depsGroup ? depsGroup[moduleName] : null;
}

function setModuleVersion(moduleName, newVersion, packageJson) {
  const depsGroup = findModuleDepsGroup(moduleName, packageJson);

  if (depsGroup) {
    depsGroup[moduleName] = newVersion;
    return true;
  } else {
    return false;
  }
}

function getModuleHomepage(packageJson) {
  return packageJson.homepage || packageJson.url || null;
}

const getModuleInfo = exports.getModuleInfo = _lodash2.default.memoize((() => {
  var _ref2 = (0, _asyncToGenerator3.default)(function* (moduleName) {
    return yield new _promise2.default(function (resolve, reject) {
      try {
        _npm2.default.load({ silent: true }, function (err) {
          if (err) reject(err);
          _npm2.default.commands.view([moduleName], true, function (err, moduleInfo) {
            if (err) reject(err);
            // `moduleInfo` contains object `{ <version>: <info> }`, so we should extract info from there
            resolve(_lodash2.default.values(moduleInfo)[0]);
          });
        });
      } catch (err) {
        reject(err);
      }
    });
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})());