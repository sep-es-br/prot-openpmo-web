'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _path = require('path');

var _fs = require('fs');

var _del = require('del');

var _del2 = _interopRequireDefault(_del);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PROJECT_CONFIG_FILENAME = '.npm-upgrade.json';

const path = (0, _symbol2.default)('path');
const storedData = (0, _symbol2.default)('storedData');
const read = (0, _symbol2.default)('read');
const getData = (0, _symbol2.default)('getData');

class Config {

  constructor(opts) {
    var _ref = opts || {};

    const projectRoot = _ref.projectRoot;

    this[path] = (0, _path.resolve)(projectRoot || process.cwd(), PROJECT_CONFIG_FILENAME);
    this[storedData] = this[read]();
    _lodash2.default.assign(this, _lodash2.default.cloneDeep(this[storedData]));
  }

  save() {
    const data = this[getData]();

    if (_lodash2.default.isEqual(data, this[storedData])) return;

    try {
      if (_lodash2.default.isEmpty(data)) {
        this.remove();
      } else {
        (0, _fs.writeFileSync)(this[path], (0, _stringify2.default)(data, null, 2));
      }
    } catch (err) {
      err.message = `Unable to update npm-upgrade config file: ${err.message}`;
      throw err;
    }
  }

  remove() {
    return _del2.default.sync(this[path]);
  }

  [read]() {
    try {
      return require(this[path]);
    } catch (err) {
      return {};
    }
  }

  [getData]() {
    const data = (0, _extends3.default)({}, this);
    return cleanDeep(data);
  }

}

exports.default = Config;
function cleanDeep(obj) {
  _lodash2.default.each(obj, (val, key) => {
    if (_lodash2.default.isObjectLike(val)) {
      cleanDeep(val);
      if (_lodash2.default.isEmpty(val)) {
        delete obj[key];
      }
    } else if (val === null || val === undefined) {
      delete obj[key];
    }
  });

  return obj;
}