'use strict';

exports.__esModule = true;
exports.handler = exports.describe = exports.command = undefined;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _inquirer = require('inquirer');

var _catchAsyncError = require('../../catchAsyncError');

var _catchAsyncError2 = _interopRequireDefault(_catchAsyncError);

var _askUser = require('../../askUser');

var _askUser2 = _interopRequireDefault(_askUser);

var _cliStyles = require('../../cliStyles');

var _ignore = require('../ignore');

var _Config = require('../../Config');

var _Config2 = _interopRequireDefault(_Config);

var _packageUtils = require('../../packageUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = exports.command = 'add [module]';
const describe = exports.describe = 'Add module to ignored list';

const handler = exports.handler = (0, _catchAsyncError2.default)((() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (opts) {
    let moduleName = opts.module;

    const config = new _Config2.default();
    config.ignore = config.ignore || {};

    console.log(`Currently ignored modules:\n\n${(0, _ignore.createIgnoredModulesTable)(config.ignore)}\n`);

    if (moduleName && !(0, _packageUtils.getModuleVersion)(moduleName, (0, _packageUtils.loadPackageJson)().content)) {
      console.log((0, _cliStyles.attention)(`Couldn't find module ${(0, _cliStyles.strong)(moduleName)} in ${(0, _cliStyles.strong)('package.json')}. Choose existing module.\n`));
      moduleName = null;
    }

    let ignoreMore;
    do {
      if (!moduleName) {
        moduleName = yield (0, _askUser2.default)({
          type: 'list',
          message: 'Select module to ignore:',
          choices: makeModulesToIgnoreList(config.ignore),
          pageSize: 20
        });
      }

      config.ignore[moduleName] = yield (0, _ignore.askIgnoreFields)('*');
      config.save();

      console.log((0, _cliStyles.success)(`\nModule ${(0, _cliStyles.strong)(moduleName)} added to ignored list.\n`));
      moduleName = null;

      ignoreMore = yield (0, _askUser2.default)({
        message: 'Do you want to ignore some other module?',
        type: 'confirm'
      });
    } while (ignoreMore);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})());

function makeModulesToIgnoreList(ignoredModulesConfig) {
  var _loadPackageJson = (0, _packageUtils.loadPackageJson)();

  const packageJson = _loadPackageJson.content;

  const ignoredModules = _lodash2.default.keys(ignoredModulesConfig);

  return _lodash2.default.transform(_packageUtils.DEPS_GROUPS, (list, group) => {
    const groupModules = _lodash2.default.keys(packageJson[group.field]);
    const availableToIgnore = _lodash2.default.difference(groupModules, ignoredModules);

    if (availableToIgnore.length) {
      list.push(new _inquirer.Separator((0, _cliStyles.strong)(`--- ${group.field} ---`)), ...availableToIgnore);
    }
  });
}